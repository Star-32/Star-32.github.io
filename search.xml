<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2023.6.1 A  题解</title>
    <url>/2024/08/06/2023.6.1_A_solution/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="543061ce76a25a8e6eb0a438059c72a9ae88dcdafab03dac6353b419b664962e">05cd41db3361879aefb4267e575d7f2d3adb0f93fc048c926a2b70c4c4bf36fc91727ff5752686cb33683ff90f695377357762900d262109aba04f849263e6745586789dce2426db554b79fce86728ae9ad2672e16bbda83437abf086d37e6b2d10b588ef3d3ee8843615ded1e129e653fc2788d17f878f0f1042e239c696c2afc03fd22770af940084028a66ffa395806df7584d715dcde7178ed582e03e1df1181d305a2da7a778da40503e5de7335838f8feb34c785556bbc991770786c1482c633daa805c13f7b97ccb77ad695417bddcb31523c663fbe18f14fc548ca61772b2cb5a82690b15688d89c6e988be46c3007472169c625d691ea7f24be3bae059b83a0000a0ccce16907ee5af215c7e6ecf516d70559b6959a717532fc1306b50c51f2e731609034199d984555907c056cecd54cb9029f149d52269d6f1ea62e438cb7c81a7c4ef46e768ef5f6a9a1d392dccc49f4f2a160571bb01037344c62426e1ca587211b020ba883b3c936cacb8a78e10e4ac69c554527b510620de91dd7e0a17abc53cafa2d3d89e6c110dc4b64427268c5c1d308b98190b6f20536fd5e99dce671770aa3f85c4774bf70f9567af8198529b76f59502fb14c49bbe7a61556dbc72dfd6687af5cb2f78a8d9b8dda2d461649b2a4a87a703b1d1baa8d2fbc03ab6775a754e605bd445ae2b4a3fe0750dd4768be819f5394f89e116ab0b4cc75d964924c32c33475aee51775ad8637ad6d6b4fa6dbc18afec0257f953baf388c88b4416c3664b79b6926d3e98bde53e03d832500ac30b04ddbf44c8c01ee236063b97a9ee17bec6e96793dc1b688ffd8d755af5afc31619bdd9fe7c26de18fac499fe52144b3820fc0864a29733535001d543c0ea9532a32d7d7d4dcd3eed8ddfa32d6d47be98204c4c1ae996f9869a57882190d93b0fd08abcf7331e01b1fc639872ce1bc07ee72f4b90b7256614fb1a196672cbb9cfb7ee99c7e831d23a007b9a82a2ec7ba02fd05f020ef2bec6a52f26698c5f350a6cd4a2d1e001e5acc2b9da2161de1d9d09f465bb19c77c3512108a24758ba63030030e11c97bf3df0b30815f4fb3199eb59a1bc9699f9bdacfa7984f570a855d39ff1a318bfa8aa27b67402d11d7c67500f20ea713bc728b162722aa52a5b2947d5cd824c89891b988d8f77c9ac14ee67cc5dab41001f44434285a0cce742023672717973fbd5d3879f9e5591c034d4bb3f970350a79cba5e00e5412b6d7ddbc1cd4b1ed00e3cd62e533f20eab1fd4f52224125523f13</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>ARC152B  题解</title>
    <url>/2024/08/06/ARC152B-solution/</url>
    <content><![CDATA[<h3 id="题意简述"><a href="#题意简述" class="headerlink" title="题意简述"></a>题意简述</h3><p>在一条细长的路上有若干个休息区，有两个人在走路。每个人都需要从某一休息区出发，到达路的两个端点并返回初始休息区。由于路很狭窄，两人只能在休息区相遇，也就是说某人可能需要在某一休息区等另外一个人。请你做出合适的安排使得从两人出发到两人都回到出发点的总时间最少。</p>
<h3 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h3><p>约定：令 $x,y$ 分别表示两人的出发点，钦定 $x&lt;y$；令 $t,w$ 分别表示两次的相遇点。</p>
<p>阅读题目后，不难发现，除非两人从同一点出发，否则他们一定会相遇两次。</p>
<p>由于两人必须在等候区相遇，我们容易发现两人在第一次相遇后会同时同地反向出发。</p>
<p>由此，我们可以容易地找到他们第二次相遇的等候区。设第一次在 $t$ 相遇，则第二次在离 $l-t$ 最近两个等候区之一相遇。</p>
<p>我们令 $S$ 表示两次相遇之间经过的时间，则有 $S&#x3D;\max(t+w,2l-t-w)$，这个式子的两部分分别表示到达左边的端点并折返与到达右边的端点并折返。</p>
<p>如果两人从同一端点出发，则答案就为 $2S$，原因显然。</p>
<p>否则答案为 $\text{第一次相遇的时间}+\text{第二次相遇后回出发点的时间}+S$。</p>
<p>下面我们来研究这个第一次相遇的时间。</p>
<ul>
<li><p>同向出发：<br>$$<br>ans&#x3D;\max(t+x,y-t)+\max(w-x,2l-w-y)+S<br>$$</p>
</li>
<li><p>反向出发：<br>$$<br>ans&#x3D;max(x+t,2l-t-y)+max(w-x,y-w)+S<br>$$</p>
</li>
</ul>
<p>我们发现，无论是哪一种情况，这个 $ans$ 的左边部分都一定不小于 $S$，因为 $S$ 中的两种情况在 $ans$ 中都有出现。因此，我们证明了两人从同一端点出发一定能获得最优解。</p>
<p>以上过程明晰了过后，代码也就很简单了（鸣谢 @<a href="https://github.com/Sukwants">Sukwants</a> @ <a href="https://www.luogu.com.cn/blog/songgch/">Song_gch</a> 两位大佬的思路和代码）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN = <span class="number">2e5</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> N;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> L, a[MAXN + <span class="number">5</span>];</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> Ans = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld&quot;</span>, &amp;N, &amp;L);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, a + i);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">lower_bound</span>(a + <span class="number">1</span>, a + N + <span class="number">1</span>, L - a[i]) - a;</span><br><span class="line">        Ans = <span class="built_in">min</span>(Ans, <span class="built_in">min</span>(x &lt;= N ? (a[i] + a[x]) : <span class="number">0x3f3f3f3f3f3f3f3f</span>, x &gt; <span class="number">1</span> ? ((L &lt;&lt; <span class="number">1</span>) - a[i] - a[x - <span class="number">1</span>]) : <span class="number">0x3f3f3f3f3f3f3f3f</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, Ans &lt;&lt; <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>ARC</tag>
      </tags>
  </entry>
  <entry>
    <title>AGC056A  题解</title>
    <url>/2024/08/06/AGC056A-solution/</url>
    <content><![CDATA[<p>考试的时候做到这道题，很多小朋友好像都是坐板凳搜出来的捏~</p>
<p>老用户花了好久终于手玩出了一个构造方案，感觉还算比较简洁，分享给大家。</p>
<h4 id="对于-n-equiv-0-pmod-3-的情况"><a href="#对于-n-equiv-0-pmod-3-的情况" class="headerlink" title="对于 $n\equiv 0 \pmod{3}$ 的情况"></a>对于 $n\equiv 0 \pmod{3}$ 的情况</h4><p>不难发现，我们有一种比较简单的构造方案，即每行循环移位 $3$ 格：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">###......</span><br><span class="line">...###...</span><br><span class="line">......###</span><br><span class="line">###......</span><br><span class="line">...###...</span><br><span class="line">......###</span><br><span class="line">###......</span><br><span class="line">...###...</span><br><span class="line">......###</span><br></pre></td></tr></table></figure>

<p>这样就比较简单地解决了这种情况，相信大家都能想到。</p>
<h4 id="对于-n-equiv-1-pmod-3-的情况"><a href="#对于-n-equiv-1-pmod-3-的情况" class="headerlink" title="对于 $n\equiv 1 \pmod{3}$ 的情况"></a>对于 $n\equiv 1 \pmod{3}$ 的情况</h4><p>我们试图基于上面的情况做一些调整。首先还是每行移位 $3$ 格：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">###....</span><br><span class="line">...###.</span><br><span class="line">##....#</span><br><span class="line">..###..</span><br><span class="line">#....##</span><br><span class="line">.###...</span><br><span class="line">....###</span><br></pre></td></tr></table></figure>

<p>这时我们发现连通块个数不对呀？怎么办呢？</p>
<p>注意到，我们可以把这个图看做 $3$ 组：每一组刚好占满一整行。则上图中第一组的最后一行和第二组的第一行重叠了，多产生了一个连通块。这时我们想通过调整消去第一组的一个连通块，即上图中第三行的最后一个 <code>#</code>。</p>
<p>我们需要用到一个调整的操作：如果 $(x_1,y_1),(x_2,y_2)$ 都染了色，我们可以调整为给 $(x_1,y_2),(x_2,y_1)$ 染色。这个操作的对行列个数显然是没有影响的。我们可以拿他来改变连通块个数。</p>
<p>回到上面，我们考虑把第三行的最后一个 <code>#</code> 和第四行的最后一个 <code>#</code> 拿来调整，会发现连通块的个数刚好减少了！给下面最对称操作后得到的图是这样的：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">###....</span><br><span class="line">...###.</span><br><span class="line">##..#..</span><br><span class="line">#..#..#</span><br><span class="line">..#..##</span><br><span class="line">.###...</span><br><span class="line">....###</span><br></pre></td></tr></table></figure>

<p><strong>归纳一下</strong>：在循环移位后，我们给 $(n&#x2F;3+1,n),(n&#x2F;3\times2,n-2)$ 这两个位置和他们的对称位置分别做调整，就可以构造出解。</p>
<h4 id="对于-n-equiv-2-pmod-3-的情况"><a href="#对于-n-equiv-2-pmod-3-的情况" class="headerlink" title="对于 $n\equiv 2 \pmod{3}$ 的情况"></a>对于 $n\equiv 2 \pmod{3}$ 的情况</h4><p>有了上面的经验，这一步就简单多了。大家可以自己手玩一下，这里给出<strong>归纳结论</strong>：在循环移位后，我们给 $(n&#x2F;3+1,1),(n&#x2F;3\times 2+1,n-3)$ 这两个位置和他们的对称位置分别做调整，就可以构造出解。</p>
<p>这样，我们就解决了这道题！是不是很简洁呢？当然还有其他的构造&#x2F;坐板凳方法，大家可以私信 @<a href="https://www.luogu.com.cn/user/291248">赵悦岑</a> 了解。</p>
<p>最后放一个 $n&#x3D;7,8,10,11$ 的构造图希望能帮助到大家：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/9jhvrgsc.png"></p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>AGC</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>树状数组高阶知识</title>
    <url>/2024/08/06/BIT_plus/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0c792a4166a464595dc1aaf6b98dc8f7de784cc5cc849a07a9c1b9371b870f61">05cd41db3361879aefb4267e575d7f2d310e756734892402d83d3e7facb1a7988e5279bb0cec90e12c6e924cee66b98117ba87437b67a1b39737161b6203be701714798c26d36fcf8df9d7e214c0911e39628e56e56be6177be8b72bf1d056bc9ce57d51a2d556d6eba4c24402c1427a08aac84025313c6b554ad7bb560c88bb774a2743bf38ab99c7a6d0918169253d7075834adc0dc1b5d5de16f95d6c745518486ad20887948871702bbb84f223bb0ff375c15e62431a430755564a56e49cfc2213db50a73de103896ea370868049ae015e6c4678fe898e63c728405d35573e4643d85ac31d7e67180f2d2e744303724ac3a425b6f178495eee43ebe0be6c8a03fc530bbcbff0add09997d2813eb0454e1ca6bf86854a63ba998181662c8e084c561a72e6ffba00f1ffc0da5802fd33c194160adb4f738ef9abc73121f2bac1edb6f0de4a5fa8a39b41ea7c59219ba1d08d8512e47f4e1d863414f82f698dc7936fe754486ecef679035caa973608bc6b9b8f16056ee556f5376b19b8f154</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1322E  题解</title>
    <url>/2024/08/06/CF1322E-solution/</url>
    <content><![CDATA[<p>转换为 $01$ 序列的操作其他题解都已经讲的很清楚了，我这里主要提供一种只用线段树来维护答案的方法。</p>
<p>首先是得到操作数。初始序列上是全 $0$ 的，我们从小到大枚举每个数，并把他们修改成 $1$。由于答案是 $01$ 交错段的长度的一半，我们线段树上的每个结点分别维护左部是 $0&#x2F;1$，右部是 $0&#x2F;1$，左部交错段的长度，右部交错段的长度，区间内交错段的最大长度。向上转移比较容易。</p>
<p>然后是得到最后的操作序列。如果一个位置在当前位置由 $0$ 变成 $1$ 之后，在<strong>操作完后</strong>的序列中由 $0$ 变成了 $1$，那么可以认为这个位置在操作完后变成了当前改变的这个位置的值。而一个位置能影响到的位置，只有他改变完后所在的最长 $01$ 段和<strong>他左右两个 $1$ 所在的最长 $01$ 段</strong>。注意第二部分是很容易忽略掉的。具体影响的位置要根据 $01$ 段最外面的两边具体是 $0$ 还是 $1$ 进行分类讨论。找到他影响的区间后做一个区间 $\min$ 即可（因为可能之前的已经修改过去了），这部分可以用一个标记永久化的线段树实现。</p>
<p><a href="https://codeforces.com/contest/1322/submission/194856264">提交记录</a></p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1534H  题解</title>
    <url>/2024/08/06/CF1534H-solution/</url>
    <content><![CDATA[<p>第一次 DP 的部分和后面交互的部分现有的两篇题解都讲的比较清楚了，这里注意补充解释一下换根和计算答案的部分，（让像我这样的菜鸡容易理解一点）。</p>
<p>我们先列出第一次 DP 的式子：<br>$$<br>f_u&#x3D;\max\limits_{i&#x3D;0}^{size-1} f_v+i<br>$$<br>那么我们考虑当前节点是 $u$ ，新的根是 $v$，那么此时我们要抛弃掉 $v$ 对 $u$ 的贡献并且加入 $fa_u$ 对 $u$ 的贡献。考虑直接将与 $u$ 相连的所有点按 $f$ 值进行排序，那么每次的 $v$ 将整个数组分割成一个前缀和一个后缀，式子其实就是上面那个式子，但是后缀部分的 $i$ 要减去当前这个 $v$ 所多算的 $1$。因此不需要什么平衡树，只用预处理前缀最大值、后缀最大值，中间再合并一下就好了。</p>
<p>计算答案的部分则是简单的分类讨论。我们在计算前仍然需要对所有儿子按 $f$ 值排序。对于当前根是 $u$ ，有 $3$ 种情况：</p>
<ol>
<li>询问的两个点分别在当前节点的两个不同子树内，则贡献为 $\max f_{v0}+f_{vi}+i-1$；</li>
<li>询问的两个点中有一个是当前根，则贡献为 $f_{v0}+deg_u-1$；</li>
<li>询问的两个点都是当前的根，则贡献为 $deg_u$。</li>
</ol>
<p>放一下这个关键的 DFS 部分的代码：</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">bool cmp(int x,int y)&#123;</span><br><span class="line">	return f<span class="comment">[x]</span>&gt;f<span class="comment">[y]</span>;</span><br><span class="line">&#125;</span><br><span class="line">void dfs2(int u,int fa)&#123;</span><br><span class="line">	sort(e<span class="comment">[u]</span>.begin(),e<span class="comment">[u]</span>.end(),cmp);</span><br><span class="line">	for(int i=1;i&lt;e<span class="comment">[u]</span>.size();i++)maxm=max(maxm,f<span class="comment">[e<span class="comment">[u]</span><span class="comment">[0]</span>]</span>+f<span class="comment">[e<span class="comment">[u]</span><span class="comment">[i]</span>]</span>+i-1);</span><br><span class="line">	maxm=max(maxm,max(f<span class="comment">[e<span class="comment">[u]</span><span class="comment">[0]</span>]</span>+(int)e<span class="comment">[u]</span>.size()-1,(int)e<span class="comment">[u]</span>.size()));</span><br><span class="line">	pre<span class="comment">[0]</span>=suf<span class="comment">[e<span class="comment">[u]</span>.size()+1]</span>=0;</span><br><span class="line">	for(int i=0;i&lt;e<span class="comment">[u]</span>.size();i++)pre<span class="comment">[i+1]</span>=max(pre<span class="comment">[i]</span>,f<span class="comment">[e<span class="comment">[u]</span><span class="comment">[i]</span>]</span>+i);</span><br><span class="line">	for(int i=e<span class="comment">[u]</span>.size()-1;i&gt;=0;i--)suf<span class="comment">[i+1]</span>=max(suf<span class="comment">[i+2]</span>,f<span class="comment">[e<span class="comment">[u]</span><span class="comment">[i]</span>]</span>+i);</span><br><span class="line">	for(int i=0;i&lt;e<span class="comment">[u]</span>.size();i++)&#123;</span><br><span class="line">		res<span class="comment">[e<span class="comment">[u]</span><span class="comment">[i]</span>]</span>=max(pre<span class="comment">[i]</span>,suf<span class="comment">[i+2]</span>-1);</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;e<span class="comment">[u]</span>.size();i++)&#123;</span><br><span class="line">		if(e<span class="comment">[u]</span><span class="comment">[i]</span>==fa)continue;</span><br><span class="line">		f<span class="comment">[u]</span>=max((int)e<span class="comment">[u]</span>.size()-1,res<span class="comment">[e<span class="comment">[u]</span><span class="comment">[i]</span>]</span>);</span><br><span class="line">		dfs2(e<span class="comment">[u]</span><span class="comment">[i]</span>,u);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>DP</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1764H  题解</title>
    <url>/2024/08/06/CF1764H-solution/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定长为 $n$ 的序列，初始 $a_i&#x3D;i$。有 $m$ 个操作，操作为给出 $l_i,r_i$ 并将 $[a_{l_i},a_{r_i}]$ 赋值为 $a_{l_i}$。要求对每个 $[i,i+k-1]$，回答保留该区间内的操作后序列中不同元素的数量。</p>
<h3 id="初步分析"><a href="#初步分析" class="headerlink" title="初步分析"></a>初步分析</h3><p>不难发现，对答案产生贡献的有两种情况：</p>
<ul>
<li><p>没有被执行操作的元素</p>
</li>
<li><p>某次操作左端点的元素</p>
</li>
</ul>
<p>我们尝试分别统计这两种情况。</p>
<p>只考虑维护序列，我们容易想到一种基于均摊的，用 set 暴力维护的做法：在 set 中存下每一个区间，遇到修改操作就找到左右端点所在的 set 区间并将其分裂，暴力删去左右端点之间的区间，插入新区间。</p>
<p>我们想在上述过程中同时预处理我们需要的东西。</p>
<h3 id="进一步分析"><a href="#进一步分析" class="headerlink" title="进一步分析"></a>进一步分析</h3><p>对于第一种情况：我们对 set 中的每个区间同时记录下一个 $time$，表示这个区间最初是第 $time$ 次修改操作插入进去的。假设当前是第 $i$ 次修改操作，将从 set 中删去 $[l,r]$ 这个区间，那么我们可以知道在 $[time+1,i-1]$ 这个时间段以内 $[l,r]$ 是没有被修改过的，可以作为第一种贡献。贡献的范围是所有 $ql&gt;time\and qr&lt;i$ 的询问操作。这是一个经典的二维数点问题，可以用扫描线+树状数组解决。</p>
<p>对于第二种情况：我们需要对每个操作维护 $3$ 个信息，分别是：$pre_i$，该操作之前最后一个覆盖到 $l_i$ 的操作；$go_i$，该操作的原始区间 $[l_i,r_i]$ 被完全覆盖掉的时刻；$ed_i$，该操作彻底不能产生贡献的时刻。如果维护好了这些信息，我们知道这个操作能对 $pre_i&lt;ql\and qr&lt;ed_i\and ql\le i\le qr$ 的询问产生贡献，这同样是一个二维数点问题。</p>
<p>具体的，$pre_i$ 只需要在 set 中插入该操作之前查询即可；$go_i$ 为所有 $time&#x3D;i$ 的区间中被删去时刻的最大值；$ed_i&#x3D;\max (go_i,ed_j[pre_j&#x3D;&#x3D;i])$。</p>
<p>这样这道题就完全解决了。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>感觉只有必要放一下预处理，都来做这题了不至于不会二维数点吧：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">bignod</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r,tim;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(bignod b)<span class="type">const</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> l&lt;b.l;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">gonxian</span>&#123;</span><br><span class="line">	<span class="type">int</span> x,y,v;</span><br><span class="line">&#125;gx[<span class="number">2000015</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	set&lt;bignod&gt; st;</span><br><span class="line">	set&lt;bignod&gt; ::iterator it,ti,it2;</span><br><span class="line">	st.<span class="built_in">insert</span>(bignod&#123;<span class="number">1</span>,n,<span class="number">0</span>&#125;);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> l=xg[i].l,r=xg[i].r;</span><br><span class="line">		it=st.<span class="built_in">upper_bound</span>(bignod&#123;l,<span class="number">0</span>,<span class="number">0</span>&#125;),ti=--st.<span class="built_in">upper_bound</span>(bignod&#123;r,<span class="number">0</span>,<span class="number">0</span>&#125;);</span><br><span class="line">		it2=it,it2--;</span><br><span class="line">		bignod u=*it2,v=u;</span><br><span class="line">		pre[i]=u.tim;</span><br><span class="line">		<span class="keyword">if</span>(u.r&gt;=xg[i].r)&#123;</span><br><span class="line">			go[u.tim]=<span class="built_in">max</span>(go[u.tim],i);</span><br><span class="line">			st.<span class="built_in">erase</span>(it2);</span><br><span class="line">			<span class="keyword">if</span>(u.l&lt;l)st.<span class="built_in">insert</span>(bignod&#123;u.l,l<span class="number">-1</span>,u.tim&#125;);</span><br><span class="line">			<span class="keyword">if</span>(u.r&gt;r)st.<span class="built_in">insert</span>(bignod&#123;r+<span class="number">1</span>,u.r,u.tim&#125;);</span><br><span class="line">			st.<span class="built_in">insert</span>(bignod&#123;l,r,i&#125;);</span><br><span class="line">			<span class="keyword">if</span>(u.tim+<span class="number">1</span>&lt;=i<span class="number">-1</span>)gx[++cqt]=gonxian&#123;u.tim+<span class="number">1</span>,i<span class="number">-1</span>,r-l+<span class="number">1</span>&#125;;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		st.<span class="built_in">erase</span>(it2);</span><br><span class="line">		<span class="keyword">for</span>(;it!=ti;)&#123;</span><br><span class="line">			go[(*it).tim]=<span class="built_in">max</span>(go[(*it).tim],i);</span><br><span class="line">			<span class="keyword">if</span>((*it).tim+<span class="number">1</span>&lt;=i<span class="number">-1</span>)gx[++cqt]=gonxian&#123;(*it).tim+<span class="number">1</span>,i<span class="number">-1</span>,(*it).r-(*it).l+<span class="number">1</span>&#125;;</span><br><span class="line">			it2=it++;</span><br><span class="line">			st.<span class="built_in">erase</span>(it2);</span><br><span class="line">		&#125;</span><br><span class="line">		u=*ti,st.<span class="built_in">erase</span>(ti);</span><br><span class="line">		go[v.tim]=<span class="built_in">max</span>(go[v.tim],i),go[u.tim]=<span class="built_in">max</span>(go[u.tim],i);</span><br><span class="line">		<span class="keyword">if</span>(v.tim+<span class="number">1</span>&lt;=i<span class="number">-1</span>)gx[++cqt]=gonxian&#123;v.tim+<span class="number">1</span>,i<span class="number">-1</span>,v.r-l+<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(u.tim+<span class="number">1</span>&lt;=i<span class="number">-1</span>)gx[++cqt]=gonxian&#123;u.tim+<span class="number">1</span>,i<span class="number">-1</span>,r-u.l+<span class="number">1</span>&#125;;</span><br><span class="line">		<span class="keyword">if</span>(v.l&lt;l)st.<span class="built_in">insert</span>(bignod&#123;v.l,l<span class="number">-1</span>,v.tim&#125;);</span><br><span class="line">		<span class="keyword">if</span>(u.r&gt;r)st.<span class="built_in">insert</span>(bignod&#123;r+<span class="number">1</span>,u.r,u.tim&#125;);</span><br><span class="line">		st.<span class="built_in">insert</span>(bignod&#123;l,r,i&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(it=st.<span class="built_in">begin</span>();it!=st.<span class="built_in">end</span>();it++)&#123;</span><br><span class="line">		bignod u=*it;</span><br><span class="line">		<span class="keyword">if</span>(u.tim+<span class="number">1</span>&lt;=m)gx[++cqt]=gonxian&#123;u.tim+<span class="number">1</span>,m,u.r-u.l+<span class="number">1</span>&#125;;</span><br><span class="line">		go[u.tim]=<span class="built_in">max</span>(go[u.tim],m+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=m;i;i--)&#123;</span><br><span class="line">		die[i]=<span class="built_in">max</span>(die[i],go[i]);</span><br><span class="line">		<span class="keyword">if</span>(pre[i])die[pre[i]]=<span class="built_in">max</span>(die[pre[i]],die[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1799E  题解</title>
    <url>/2024/08/06/CF1799E-solution/</url>
    <content><![CDATA[<p>题外话：本来没打这场，但同寝室的巨佬 @<a href="https://www.luogu.com.cn/user/291248">赵悦岑</a> 在打，所以我说帮他口胡一下 E，结果我口胡出来的时候他还没过 B，而且一直到最后都没过！咳咳……</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给你一个 $n\times m$ 的矩阵，矩阵中有 <code>.</code> 和 <code>#</code>，且 <code>#</code> 构成两个四连通块。请用尽量少的操作，将一些 <code>.</code> 改成 <code>#</code> 使得所有 <code>#</code> 构成一个四连通块，且任意两个 <code>#</code> 的最短路（只经过 <code>#</code> ）为他们的曼哈顿距离。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>由题目要求，我们可以发现一些简单的性质：如果一个格子上下或左右都有 <code>#</code>，则他必定会被染成 <code>#</code>，否则无法满足条件。补充完这些后，如果此时只剩一个连通块，那么就做完了。否则继续考虑这个性质：对于上下左右四个边界，一定只会出现单峰的情况，而且剩下的两个连通块一定是左上-右下或右上-左下的，而且不会有某一行或某一列出现两个 <code>#</code> 属于不同连通块。现在我们只考虑左上-右下型的。一个显然的想法是先分别把左上的右下角补齐，把右下的左上角补齐，再用一条简单的路径把两个连通块连起来。举个例子，如果图是这样的：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">###....</span><br><span class="line">##.....</span><br><span class="line">##.....</span><br><span class="line">#......</span><br><span class="line">......#</span><br><span class="line">.....##</span><br><span class="line">....###</span><br></pre></td></tr></table></figure>

<p>那么我们补充完后可以是这样的：</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">###....</span><br><span class="line">###....</span><br><span class="line">###....</span><br><span class="line">#####..</span><br><span class="line">....###</span><br><span class="line">....###</span><br><span class="line">....###</span><br></pre></td></tr></table></figure>

<p>不难证明，这样补充填充的 <code>#</code> 一定是最少的。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>有点长，放在<a href="https://codeforces.com/contest/1799/submission/195512267">这里</a>。</p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>构造</tag>
        <tag>CF</tag>
      </tags>
  </entry>
  <entry>
    <title>CF1814F  题解</title>
    <url>/2024/08/06/CF1814F-solution/</url>
    <content><![CDATA[<h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>看到这种“只在一段时间出现”的问题，很容易想到线段树分治。而维护连通性显然可以用并查集，为了在线段树上实现撤销操作要用按秩合并不带路径压缩的并查集。但是怎么确定是否和 $1$ 连通呢？我们在叶子节点处理这一信息。考虑在叶子节点处我们给 $1$ 在并查集上的根一个标记，在并查集撤销的时候下传标记，这样就能找到彼时所有满足题意的点了。但还有一点细节：并查集在合并的时候可能某一边已经有标记了，这时候需要减去已有的标记避免后面加上的时候造成混淆。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lid (id&lt;&lt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rid (id&lt;&lt;1|1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((tr[id].l+tr[id].r)&gt;&gt;1) </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,top=<span class="number">2e5</span>,L[<span class="number">200005</span>],R[<span class="number">200005</span>],fa[<span class="number">200005</span>],dep[<span class="number">200005</span>],tp,teg[<span class="number">200005</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	<span class="type">int</span> l,r;</span><br><span class="line">	vector&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt; &gt; e;</span><br><span class="line">&#125;tr[<span class="number">800005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">	tr[id].l=l,tr[id].r=r;</span><br><span class="line">	<span class="keyword">if</span>(l==r)<span class="keyword">return</span>;</span><br><span class="line">	<span class="built_in">build</span>(lid,l,mid),<span class="built_in">build</span>(rid,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(tr[id].l==l&amp;&amp;tr[id].r==r)&#123;</span><br><span class="line">		tr[id].e.<span class="built_in">push_back</span>(<span class="built_in">make_pair</span>(u,v));</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(r&lt;=mid)<span class="built_in">modify</span>(lid,l,r,u,v);</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)<span class="built_in">modify</span>(rid,l,r,u,v);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">modify</span>(lid,l,mid,u,v),<span class="built_in">modify</span>(rid,mid+<span class="number">1</span>,r,u,v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(x==fa[x])<span class="keyword">return</span> x;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">find</span>(fa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> u,v,su,sv;</span><br><span class="line">&#125;stk[<span class="number">400005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">find</span>(u)==<span class="built_in">find</span>(v))<span class="keyword">return</span>;</span><br><span class="line">	u=<span class="built_in">find</span>(u),v=<span class="built_in">find</span>(v);</span><br><span class="line">	<span class="keyword">if</span>(dep[u]&gt;dep[v])<span class="built_in">swap</span>(u,v);</span><br><span class="line">	stk[++tp]=node&#123;u,v,dep[u],dep[v]&#125;;</span><br><span class="line">	teg[u]-=teg[v],fa[u]=v,dep[v]+=dep[u]==dep[v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">redo</span><span class="params">(node k)</span></span>&#123;</span><br><span class="line">	fa[k.u]=k.u,dep[k.v]=k.sv;teg[k.u]+=teg[k.v];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> pre=tp;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;tr[id].e.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">		<span class="built_in">merge</span>(tr[id].e[i].first,tr[id].e[i].second);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(tr[id].l==tr[id].r)teg[<span class="built_in">find</span>(<span class="number">1</span>)]++;</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">dfs</span>(lid),<span class="built_in">dfs</span>(rid);</span><br><span class="line">	<span class="keyword">while</span>(tp!=pre)<span class="built_in">redo</span>(stk[tp--]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;<span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,top);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;L[i],&amp;R[i]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;u,&amp;v);</span><br><span class="line">		<span class="type">int</span> ll=<span class="built_in">max</span>(L[u],L[v]),rr=<span class="built_in">min</span>(R[u],R[v]);</span><br><span class="line">		<span class="keyword">if</span>(ll&lt;=rr)<span class="built_in">modify</span>(<span class="number">1</span>,ll,rr,u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)fa[i]=i;</span><br><span class="line">	<span class="built_in">dfs</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(teg[i])cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>线段树分治</tag>
      </tags>
  </entry>
  <entry>
    <title>CF29D  题解</title>
    <url>/2024/08/06/CF29D-solution/</url>
    <content><![CDATA[<p>翻了一下题解区，似乎没有跟我一样的做法？这里提供一种不用 LCA，复杂度同样为 $O(n\log n)$ 的做法。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>因为我们对叶子节点的遍历顺序有一定要求，我们考虑要走到叶子节点一定会走到他的所有祖先。</p>
<p>于是我们可以 DFS 一遍整棵树，给每个节点一个优先级。叶子节点的优先级就是遍历到他的顺序，其他节点的优先级则是它子树内所有叶节点优先级的最小值。特别地，对于没有规定遍历顺序的叶子结点，我们可以直接把它的优先级设为 $n$。</p>
<p>然后我们再 DFS 一遍，这次 DFS 的顺序就是我们要的答案。DFS 的过程中遵循两个原则：</p>
<ol>
<li><p>一旦遍历到某个节点，就要把该节点的子树遍历完。</p>
</li>
<li><p>每次按优先级的顺序遍历一个节点的儿子。</p>
</li>
</ol>
<p>在 DFS 的同时，我们记录一下当前经过叶节点的序是否与题目要求相符，不相符则说明无解。</p>
<h3 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h3><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="meta">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="meta">#define int long long</span></span><br><span class="line"><span class="keyword">using</span> namespace std;</span><br><span class="line"><span class="type">int</span> n,cnt,lst[<span class="number">305</span>],xu[<span class="number">305</span>],tmp,now=<span class="number">1</span>,wt[<span class="number">305</span>];</span><br><span class="line">struct edge&#123;</span><br><span class="line">	<span class="type">int</span> f,t,lst;</span><br><span class="line">	edge(<span class="type">int</span> f=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> lst=<span class="number">0</span>):</span><br><span class="line">		f(f),t(t),lst(lst)&#123;&#125;;</span><br><span class="line">&#125;e[<span class="number">605</span>];</span><br><span class="line"><span class="type">void</span> <span class="keyword">add</span>(<span class="type">int</span> u,<span class="type">int</span> v)&#123;</span><br><span class="line">	e[++cnt]=edge(u,v,lst[u]);lst[u]=cnt;</span><br><span class="line">	e[++cnt]=edge(v,u,lst[v]);lst[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> dfs(<span class="type">int</span> u,<span class="type">int</span> f)&#123;</span><br><span class="line">	<span class="type">int</span> ret=n+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span>(xu[u])ret=xu[u];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==f)<span class="keyword">continue</span>;</span><br><span class="line">		ret=min(ret,dfs(v,u));</span><br><span class="line">	&#125;</span><br><span class="line">	wt[u]=ret;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line">struct node&#123;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt;(node b)const&#123;</span><br><span class="line">		<span class="keyword">return</span> wt[id]&lt;wt[b.id];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">bool</span> dfs2(<span class="type">int</span> u,<span class="type">int</span> f)&#123;</span><br><span class="line">	ans.push_back(u);</span><br><span class="line">	<span class="keyword">if</span>(xu[u]&amp;&amp;xu[u]!=now)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(xu[u])now++;</span><br><span class="line">	vector&lt;node&gt; son;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(v==f)<span class="keyword">continue</span>;</span><br><span class="line">		son.push_back((node)&#123;v&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	sort(son.<span class="keyword">begin</span>(),son.<span class="keyword">end</span>());</span><br><span class="line">	<span class="type">bool</span> ret=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;son.size();i++)&#123;</span><br><span class="line">		ret&amp;=dfs2(son[i].id,u);</span><br><span class="line">		ans.push_back(u);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">		<span class="type">int</span> u,v;</span><br><span class="line">		cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">		<span class="keyword">add</span>(u,v);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> now;</span><br><span class="line">	<span class="keyword">while</span>(cin&gt;&gt;now)&#123;</span><br><span class="line">		xu[now]=++tmp;</span><br><span class="line">	&#125;</span><br><span class="line">	dfs(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span>(!dfs2(<span class="number">1</span>,<span class="number">0</span>))puts(&quot;-1&quot;);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;ans.size();i++)cout&lt;&lt;ans[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF44J  题解</title>
    <url>/2024/08/06/CF44J-solution/</url>
    <content><![CDATA[<p>翻译很清晰，题意就不赘述了。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>这题很关键的一点，就是要抓住<strong>放置在中间的格子必须是黑色</strong>这一要求。</p>
<p>考虑从左到右，从上到下一次遍历每一个点。</p>
<p>对于遍历到的最左上的，没被挖掉的，还没有放置骨牌的点，如果它是黑色，那我们无论如何都不可能满足题意了，直接判无解。如果它是白色的，那么就有横着放和竖着放两种放法。如果能横着放的话，我们一定选择横着放，否则它右边那个白色的位置就没有骨牌能覆盖到了。所以这题直接贪心放就可以了。</p>
<p>另外要求相邻的骨牌字母不同，我们只用比较一个骨牌四周的颜色就可以了。根据著名的四色定理，用四个字母是足够输出了<del>（有兴趣的话可以自己证明一下）</del>。</p>
<h3 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h3><p>因为实在是太丑了，放一下solve函数：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">bool solve()&#123;</span><br><span class="line">	for(int i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		for(int j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line">			if(tu[i][j]==<span class="string">&#x27;.&#x27;</span>)continue;</span><br><span class="line">			if(used[i][j])continue;</span><br><span class="line">			if(tu[i][j]==<span class="string">&#x27;b&#x27;</span>)return <span class="number">0</span>;</span><br><span class="line">			if(tu[i][j+<span class="number">1</span>]==<span class="string">&#x27;b&#x27;</span>&amp;&amp;!used[i][j+<span class="number">1</span>])&#123;</span><br><span class="line">				if(tu[i][j+<span class="number">2</span>]!=<span class="string">&#x27;w&#x27;</span>||used[i][j+<span class="number">2</span>])return <span class="number">0</span>;</span><br><span class="line">				used[i][j+<span class="number">1</span>]=used[i][j+<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">				cl[i][j]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">				int x=i,y=j;</span><br><span class="line">				for(int k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)&#123;</span><br><span class="line">					if(cl[x][y<span class="number">-1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x<span class="number">-1</span>][y]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x<span class="number">-1</span>][y+<span class="number">1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x<span class="number">-1</span>][y+<span class="number">2</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x][y+<span class="number">3</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">1</span>][y]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">1</span>][y+<span class="number">1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">1</span>][y+<span class="number">2</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">				&#125;</span><br><span class="line">				cl[x][y+<span class="number">1</span>]=cl[x][y+<span class="number">2</span>]=cl[x][y];</span><br><span class="line">			&#125;</span><br><span class="line">			else&#123;</span><br><span class="line">				if(tu[i+<span class="number">1</span>][j]!=<span class="string">&#x27;b&#x27;</span>||used[i+<span class="number">1</span>][j]||tu[i+<span class="number">2</span>][j]!=<span class="string">&#x27;w&#x27;</span>||used[i+<span class="number">2</span>][j])return <span class="number">0</span>;</span><br><span class="line">				used[i+<span class="number">1</span>][j]=used[i+<span class="number">2</span>][j]=<span class="number">1</span>;</span><br><span class="line">				int x=i,y=j;</span><br><span class="line">				cl[x][y]=<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">				for(int i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)&#123;</span><br><span class="line">					if(cl[x][y<span class="number">-1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x<span class="number">-1</span>][y]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">1</span>][y<span class="number">-1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">2</span>][y<span class="number">-1</span>]==cl[x][y])cl[x][y]++;	</span><br><span class="line">					if(cl[x][y+<span class="number">1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">3</span>][y]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">1</span>][y+<span class="number">1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">					if(cl[x+<span class="number">2</span>][y+<span class="number">1</span>]==cl[x][y])cl[x][y]++;</span><br><span class="line">				&#125;</span><br><span class="line">				cl[x+<span class="number">1</span>][y]=cl[x+<span class="number">2</span>][y]=cl[x][y];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>贪心</tag>
      </tags>
  </entry>
  <entry>
    <title>CF457F  题解</title>
    <url>/2024/08/06/CF457F-solution/</url>
    <content><![CDATA[<h3 id="大体思路"><a href="#大体思路" class="headerlink" title="大体思路"></a>大体思路</h3><p>由于某个节点的操作取决于子树内的操作次数，我们定义“奇子树”为一个操作完整个子树的次数为奇数的子树，“偶子树“类似。</p>
<p>首先有一个很经典的 trick：采用二分，凡是大于等于判定值的赋为 $1$，否则为 $0$，则问题变成了值只有 $0,1$ 的问题。</p>
<p>如果一棵树是“奇子树”，则先手能进行最后一步操作，此时两个子树中只要有一个 $1$ 先手即可获胜。如果一棵树是“偶子树”的话，后手进行最后一步操作，仅当两个子树均为 $1$ 时先手才能获胜。</p>
<p>最简单的情况是一个节点的两个子树均为“偶子树”。此时如果后手在先手必胜的子树内操作，先手有必胜策略，否则先手随便选即可保证自己的胜利。</p>
<p>但是当一个节点的两个子树均为“奇子树“时，我们发现这个策略不管用了。因为先手无法通过跟着后手选来消耗步数，维持自己的必胜态。此时仅当先手”停一步“后仍能胜利才能获得最终的胜利。</p>
<p>因此采用 DP：$f_{u,(0&#x2F;1),(0&#x2F;1&#x2F;2)}$ 表示在 $u$ 子树内，当前是先&#x2F;后手，两个儿子的状态是两个偶数&#x2F;两个奇数&#x2F;一奇一偶的答案。</p>
<h3 id="分类讨论转移"><a href="#分类讨论转移" class="headerlink" title="分类讨论转移"></a>分类讨论转移</h3><p>接下来到了喜闻乐见的大分讨环节。首先把两个儿子都是叶子的情况特判掉。由于当前为后手的情况完全等同于当前为先手情况的相反操作，我们只考虑当前为先手的情况。</p>
<ul>
<li><p>两个子树均为“偶子树”：先手赢得任意子树即可；</p>
</li>
<li><p>两个子树均为“奇子树”：先手在其中一个子树停一手获胜，并在另一子树获胜；</p>
</li>
<li><p>一个子树为“奇子树”，另一个为“偶子树”：先手赢得奇子树，后手无法赢得偶子树或先手在偶子树“停一手”获胜，后手无法赢得奇子树。</p>
</li>
</ul>
<p>这样这道题就做完了。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>看上去也不是很困难，对吗？放一下 DP 转移的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(sz[rid]&amp;<span class="number">1</span>)<span class="built_in">swap</span>(lid,rid);</span><br><span class="line">   <span class="keyword">if</span>(!(sz[u]&amp;<span class="number">1</span>))&#123;</span><br><span class="line">       f[u][<span class="number">0</span>][<span class="number">0</span>]=(f[lid][<span class="number">0</span>][<span class="number">0</span>]&amp;&amp;f[rid][<span class="number">1</span>][<span class="number">0</span>])||(f[lid][<span class="number">1</span>][<span class="number">1</span>]&amp;&amp;f[rid][<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line">       f[u][<span class="number">1</span>][<span class="number">0</span>]=(f[lid][<span class="number">1</span>][<span class="number">0</span>]||f[rid][<span class="number">0</span>][<span class="number">0</span>])&amp;&amp;(f[lid][<span class="number">0</span>][<span class="number">1</span>]||f[rid][<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">           f[u][<span class="number">0</span>][i]=f[lid][<span class="number">0</span>][(!sz[rid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]||f[rid][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">           f[u][<span class="number">1</span>][i]=f[lid][<span class="number">1</span>][(!sz[rid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]&amp;&amp;f[rid][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">       f[u][<span class="number">0</span>][<span class="number">0</span>]=f[lid][<span class="number">0</span>][sz[lid]&amp;<span class="number">1</span>]||f[rid][<span class="number">0</span>][sz[rid]&amp;<span class="number">1</span>];</span><br><span class="line">       f[u][<span class="number">1</span>][<span class="number">0</span>]=f[lid][<span class="number">1</span>][sz[lid]&amp;<span class="number">1</span>]&amp;&amp;f[rid][<span class="number">1</span>][sz[rid]&amp;<span class="number">1</span>];</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">           f[u][<span class="number">0</span>][i]=f[u][<span class="number">1</span>][<span class="number">0</span>],f[u][<span class="number">1</span>][i]=f[u][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">           <span class="keyword">if</span>(sz[lid]&amp;<span class="number">1</span>)&#123;</span><br><span class="line">               f[u][<span class="number">0</span>][i]|=(f[lid][<span class="number">0</span>][<span class="number">0</span>]&amp;&amp;f[rid][<span class="number">1</span>][(sz[lid]==<span class="number">1</span>&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>])||(f[lid][<span class="number">1</span>][(sz[rid]==<span class="number">1</span>&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]&amp;&amp;f[rid][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">               f[u][<span class="number">1</span>][i]&amp;=(f[lid][<span class="number">1</span>][<span class="number">0</span>]||f[rid][<span class="number">0</span>][(sz[lid]==<span class="number">1</span>&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>])&amp;&amp;(f[lid][<span class="number">0</span>][(sz[rid]==<span class="number">1</span>&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]||f[rid][<span class="number">1</span>][<span class="number">0</span>]);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">if</span>(sz[lid])&#123;</span><br><span class="line">                   f[u][<span class="number">0</span>][i]|=f[lid][<span class="number">0</span>][(!sz[rid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]&amp;&amp;f[rid][<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line">                   f[u][<span class="number">1</span>][i]&amp;=f[lid][<span class="number">1</span>][(!sz[rid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>]||f[rid][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span>(sz[rid])&#123;</span><br><span class="line">                   f[u][<span class="number">0</span>][i]|=f[lid][<span class="number">1</span>][<span class="number">0</span>]&amp;&amp;f[rid][<span class="number">0</span>][(!sz[lid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>];</span><br><span class="line">                   f[u][<span class="number">1</span>][i]&amp;=f[lid][<span class="number">0</span>][<span class="number">0</span>]||f[rid][<span class="number">1</span>][(!sz[lid]&amp;&amp;i==<span class="number">1</span>)?<span class="number">2</span>:<span class="number">1</span>];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<p>对了，实际实现的时候，可以把 $0,1$ 序列的操作直接变成取最小&#x2F;最大值，从而省去一次二分。</p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>CF</tag>
        <tag>DP</tag>
        <tag>博弈论</tag>
      </tags>
  </entry>
  <entry>
    <title>CSP-S2021  廊桥分配  题解</title>
    <url>/2024/08/06/CSP-S2021-T1-solution/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>有 $n$ 个廊桥，要分成两组。</p>
<p>有两组飞机，如果该组有空廊桥就停靠廊桥，否则不管。</p>
<p>求廊桥分配给两组后能停靠廊桥的飞机的最大数目。</p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>首先对飞机按到达顺序排序。</p>
<p>我们先不考虑廊桥的数目，只考虑分配的问题。</p>
<p>显然有以下的贪心：</p>
<ul>
<li><p>如果之前的廊桥有空闲的，那么找到编号最小的廊桥，将这架飞机安排过去；</p>
</li>
<li><p>否则新开一个廊桥，将这架飞机分配给他。</p>
</li>
</ul>
<p>找到每个飞机分配的廊桥后，我们开个桶计算每个廊桥分配了多少架飞机，再前缀和一下就能知道分配 $i$ 个廊桥最多能停靠多少架飞机。</p>
<p>最后把两个区的答案匹配起来取 Max 即可。</p>
<p>那么我们的问题就转变为了对于每一个飞机，如何快速求得他应该分配给哪个廊桥。显然需要数据结构维护。</p>
<p>提供两种思路：</p>
<ul>
<li><p>我们把每架安排好的飞机按离开顺序放进小根堆里，同时再开一个小根堆记录空闲的廊桥。对于当前枚举到的这架飞机，我们先把已经离开的飞机弹出小根堆，同时更新空闲的廊桥；最后把空闲廊桥的堆顶分配给这架飞机。</p>
</li>
<li><p>我们按照廊桥建线段树，每个位置表示该区间最早离开的时间。对于每架飞机，如果左区间的最小值小于该飞机到达的时间就走左区间，否则走右区间，到达叶子直接更新答案即可。</p>
</li>
</ul>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>数据结构</tag>
        <tag>CSP-S</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：背景与边框</title>
    <url>/2024/08/06/CSS_test_backgrounds_and_borders/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Test_your_skills_backgrounds_and_borders">题目链接</a></p>
<h3 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h3><p>题目要求：</p>
<ul>
<li>令这个盒子的边框宽度为 5px，且为黑色实心（solid）的，圆角半径为 10px。</li>
<li>添加背景图片（使用 <code>balloons.jpg</code> URL），调整它的大小，令其覆盖整个盒子。</li>
<li>给予 <code>&lt;h2&gt;</code> 一个半透明的黑色背景颜色，并使文本为白色。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Backgrounds &amp; Borders<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>:<span class="built_in">url</span>(<span class="string">balloons.jpg</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">0</span>/<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h3><p>题目要求：</p>
<ul>
<li>给这个盒子加一个 5px 的淡蓝色（lightblue）边框，设定左上角圆角半径为 20px，右下角圆角半径为 40px。</li>
<li>标题使用 <code>star.png</code> 图像作为背景图像，左边是一颗居中的星星，右边是重复的星星图案。</li>
<li>确保标题文本不覆盖图像，并且居中——你将需要使用在以前的课程中学到的技术来实现这一点。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Backgrounds &amp; Borders<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid lightblue;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">40px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">star.png</span>),<span class="built_in">url</span>(<span class="string">star.png</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: left,right;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat,repeat-y;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">15%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：弹性盒子</title>
    <url>/2024/08/06/CSS_test_flexbox/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Flexbox_skills">题目链接</a></p>
<h3 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h3><p>略</p>
<h3 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h3><p>略</p>
<h3 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h3><p>略</p>
<h3 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h3><p>题目要求：</p>
<p>将列表里的元素分行排布，且每行的元素均匀排列、首尾对齐、间隔相等。</p>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Turnip<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>greens<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>yarrow<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>ricebean<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>rutabaga<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>endive<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>cauliflower<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>sea lettuce<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>kohlrabi<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>amaranth<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: stretch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：一个漂亮的盒子</title>
    <url>/2024/08/06/CSS_test_cool_box/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/A_cool_looking_box">题目链接</a></p>
<p>题目要求：</p>
<ul>
<li>一个对于大按钮来说合理的宽度，200 像素左右。</li>
<li>一个对于大按钮来说合理的高度，并使文本纵向居中。</li>
<li>居中文本。</li>
<li>用 <code>rem</code> 使字体稍大一点，大约 17-18 像素，在注释里说说你的值是怎么算出来的。</li>
<li>给你的设计定一个基础颜色，把它作为盒子的背景颜色。</li>
<li>把字体颜色设为同一个颜色，使用黑色的文字阴影增加可读性。</li>
<li>一个精巧的圆角边框。</li>
<li>一个跟基础颜色相近、1 像素宽的实线边框，颜色要稍深一点。</li>
<li>一个指向右下角的黑色半透明线性渐变，让它在开始的时候完全透明，在 30% 的处渐变到 0.2 的不透明度，然后保持相同颜色到最后。</li>
<li>多个盒阴影：一个标准的盒阴影，使它看起来稍微从页面上浮起来；另外两个是内嵌（inset）的盒阴影，一个是左上角附近的白色半透明阴影和另一个是右下角附近的黑色半透明阴影，让盒子有一个漂亮的 3D 外观。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Cool box<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span>&gt;</span>This is a cool box<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Your CSS below here */</span></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">160px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">1.2rem</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">2px</span> <span class="number">2px</span> <span class="number">2px</span> black;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid orange;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(<span class="number">115deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>) <span class="number">0%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="number">70%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">230</span>, <span class="number">0</span>);</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> black,inset <span class="number">3px</span> <span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgb</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.5</span>),inset -<span class="number">3px</span> -<span class="number">3px</span> <span class="number">3px</span> <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：基本的 CSS 理解</title>
    <url>/2024/08/06/CSS_test_fundamental_comprehension/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Fundamental_CSS_comprehension">题目链接</a></p>
<p>题目要求：</p>
<ul>
<li>首先，在你放 HTML 文件和图像文件的目录下，创建一个新的文件，把它命名为类似<code>style.css</code>。</li>
<li>通过 <code>&lt;link&gt;</code> 元素来将你的 CSS 链接到 HTML 文件中。</li>
<li>我们为你提供的 CSS 资源文本文件中，前两项规则集是我们设置好的，你可以直接使用，所以将他们复制粘贴到你的新 CSS 文件的顶部。同时也可以将这个作为测验，用来确认你是否正确链接了你的 CSS 文件到 HTML 中。</li>
<li>在以上的两条规则中添加一条 CSS 注释，注释中要包含一些文本来表明这是整体页面的一般样式。你可以在 CSS 文件底部添加 3 个或以上的注释，来明确地表明该样式是应用到卡片的容器，应用到标题和页脚的样式，和名片主要内容的样式。从现在开始，随后在样式表添加的样式都应该有组织地放置在合适的地方。</li>
<li>接下来，我们希望你观察四个选择器，并计算每一个的专用性。将它们写在稍后可以找到的地方，例如在 CSS 顶部的注释中。</li>
<li>现在是时候把正确的选择器放在正确的规则集上了！你的 CSS 资源中有四对选择器和规则集需要匹配，现在就开始匹配，并将它们添加到你的 CSS 文件。你需要：<ul>
<li>为整体卡片的容器提供一个固定的宽&#x2F;高，背景颜色，边框，以及边框圆角等等。</li>
<li>为 header 提供一个渐变的背景颜色，从更暗到更亮，加上圆角，配合在卡片容器上设置的圆角。</li>
<li>为 footer 提供一个渐变的背景颜色，从更亮到更暗，加上圆角，配合在卡片容器上设置的圆角。</li>
<li>将图像向右浮动，使其粘贴在名片主要内容的右边，然后把它的 max-height 设置为 100% (一个聪明的技巧，来确保它将放大&#x2F;缩小，与父容器保持同样的高度，不管它变成什么高度。)</li>
</ul>
</li>
</ul>
<ul>
<li>注意！提供的规则集中有两个错误。使用你知道的任何技术找到这些错误并修复，然后再继续。</li>
<li>编写一个同时面向 card head 和 card footer 的规则集，使它们计算的总高度为 50px（包括 30px 的内容高度和 10px 的 padding）但用 <code>em</code> 来表示。</li>
<li>浏览器会为<code>&lt;h2&gt;</code> 和 <code>&lt;p&gt;</code>元素应用默认的 margin，这会影响我们的设计，所以编写一个规则集：margin 设置为 0。</li>
<li>为了阻止图像溢出名片的主要内容 ( <code>&lt;article&gt;</code> 元素)，我们需要给它设置一个明确的高度。设置 <code>&lt;article&gt;</code>的高度为 120px，但是使用 <code>em</code>来表示。还要给它一个半透明黑色的背景颜色，产生一个稍暗一点的阴影，能让红色的背景稍微透过。</li>
<li>编写一个规则集，使 <code>&lt;h2&gt;</code> 有效的字体大小为 20px (使用 <code>em</code>表达) 以及一个适当的行高将其放置在标题的内容框的中央。回想起来，内容框高度应该是 30px，你所有需要的数字都已经给你了，所以可以计算出行高。</li>
<li>为页脚中的 <code>&lt;p&gt;</code> 编写一个规则集，使它的有效字体大小为 15px (使用 <code>em</code>表达) 以及一个适当的行高将其放置在页面的内容框的中央。回想起来，内容框高度应该是 30px，你所有需要的数字都已经给你了，所以可以计算出行高。</li>
<li>最为最后一步，为 <code>&lt;article&gt;</code> 中的段落设置一个合适的 padding 值，让它和 <code>&lt;h2&gt;</code> 以及页脚的段落左边缘对齐，并将其颜色设置得便于阅读。</li>
</ul>
<p>HTML代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fundamental CSS comprehension<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Chris Mills<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;chris.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;A picture of Chris - a man with glasses, a beard, and a silly wooly hat&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>50 My Street<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         The Town<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         Gray Peach<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         UK<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">         ZO50 1MU<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Tel<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: 01234 567 890<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Mail<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>: chris@nothere.com<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Editing, writing, and web development services<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* General Styles */</span></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">&#x27;Helvetica neue&#x27;</span>, Arial, <span class="string">&#x27;sans serif&#x27;</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Card Styles */</span></span><br><span class="line"><span class="selector-class">.card</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">35em</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">22em</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">5em</span> auto;</span><br><span class="line">    <span class="attribute">background-color</span>: red;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">0.2em</span> solid black;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Header and Footer */</span></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">header</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1.5em</span> <span class="number">1.5em</span> <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to bottom,<span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>), <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.1</span>));</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1.5em</span> <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">header</span>,<span class="selector-class">.card</span> <span class="selector-tag">footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3em</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Card Details */</span></span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">article</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">float</span>: right;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">h2</span>, <span class="selector-class">.card</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">article</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">12em</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.5em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">footer</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.5em</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.card</span> <span class="selector-tag">article</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">    <span class="attribute">color</span>: white;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.4em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：网格</title>
    <url>/2024/08/06/CSS_test_grid/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Grid_skills">题目链接</a></p>
<h3 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h3><p>略</p>
<h3 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h3><p>题目要求：</p>
<p>在此例中，我们已经定义好了一个 grid, 请通过修改下面两个子元素的 CSS 规则，导致它们跨过彼此的网格轨道; 第二个 item 应该在第一个 item 之上 (如下图所示).</p>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item1&quot;</span>&gt;</span>One<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">100px</span> <span class="number">100px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item1</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">2</span> / <span class="number">5</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要求第一个 item 在第二个 item 之上，则在 <code>.item1</code> 中加入代码 <code>  z-index: 1;</code> 即可。</p>
<h3 id="任务三"><a href="#任务三" class="headerlink" title="任务三"></a>任务三</h3><p>略</p>
<h3 id="任务四"><a href="#任务四" class="headerlink" title="任务四"></a>任务四</h3><p>题目要求：</p>
<p>此例中，你需要同时使用 Grid Layout 和 Flexbox 来完成下图所示的任务。这个过程中你不需要通过改变 HTML 来完成。</p>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;a single red balloon&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>balloon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>red<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>sky<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>Hot air balloon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;balloons over some houses&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>balloons<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>houses<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>train<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>harborside<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;close-up of balloons inflating&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>balloons<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>inflating<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>green<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>blue<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;a balloon in the sun&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;tags&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>balloon<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>sun<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>sky<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>summer<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>bright<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>,<span class="number">1</span>fr);</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.tags</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：图片和表格元素</title>
    <url>/2024/08/06/CSS_test_images/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Images_tasks">题目链接</a></p>
<h3 id="任务一"><a href="#任务一" class="headerlink" title="任务一"></a>任务一</h3><p>题目要求：</p>
<ul>
<li>在此任务中，你有一张溢出盒子的图像。我们希望图像缩小到适合盒子的大小，而没有多余的空白，并不介意某些图像是否被裁剪。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;balloons.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;balloons&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">object-fit</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="任务二"><a href="#任务二" class="headerlink" title="任务二"></a>任务二</h3><p>题目要求：</p>
<ul>
<li>使用属性选择器定位 <code>.myform</code> 中的**搜索 (search)**字段和按钮。</li>
<li>使表单字段和按钮使用与表单其余部分相同的文本大小。</li>
<li>给表单字段和按钮设置 10 像素的内边距。</li>
<li>为按钮提供紫色背景，白色前景，无边框和 5px 的圆角。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;myform&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;fldSearch&quot;</span>&gt;</span>Keywords<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;search&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fldSearch&quot;</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;btnSubmit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Search&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.myform</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myform</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;search&quot;</span>]</span>,</span><br><span class="line"><span class="selector-class">.myform</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: inherit;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.myform</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">background-color</span>: rebeccapurple;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：基本布局理解</title>
    <url>/2024/08/06/CSS_test_layout_comprehension/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/CSS_layout/Fundamental_Layout_Comprehension">题目链接</a></p>
<p>题目要求：</p>
<ol>
<li>在一行中显示导航选项，并且选项之间拥有相同的空间。</li>
<li>导航条应随着内容一起滚动并且在触碰到视口顶部之后于顶部固定。</li>
<li>文章内的图片应该被文本包围。</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article"><code>article</code></a> 与 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside"><code>aside</code></a> 元素应该为双列布局。它们的列尺寸应该是弹性的，以便在浏览器窗口收缩得更小的时候能够变窄。</li>
<li>照片应显示为两列网格，图像之间有 1 像素的间隙。</li>
</ol>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Layout Task<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">    My exciting website!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>About us<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Our history<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Contacts<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">&quot;grid&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">        An Exciting Blog Post</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq6.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span> <span class="attr">class</span>=<span class="string">&quot;feature&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon</span><br><span class="line">        azuki bean garlic.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens</span><br><span class="line">        dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Turnip greens yarrow ricebean rutabaga endive cauliflower sea lettuce kohlrabi amaranth water spinach avocado daikon</span><br><span class="line">        napa cabbage asparagus winter purslane kale. Celery potato scallion desert raisin horseradish spinach carrot soko.</span><br><span class="line">        Lotus root water spinach fennel kombu maize bamboo shoot green bean swiss chard seakale pumpkin onion chickpea gram</span><br><span class="line">        corn pea. Brussels sprout coriander water chestnut gourd swiss chard wakame kohlrabi beetroot carrot watercress.</span><br><span class="line">        Corn amaranth salsify bunya nuts nori azuki bean chickweed potato bell pepper artichoke.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Nori grape silver beet broccoli kombu beet greens fava bean potato quandong celery. Bunya nuts black-eyed pea prairie</span><br><span class="line">        turnip leek lentil turnip greens parsnip. Sea lettuce lettuce water chestnut eggplant winter purslane fennel azuki</span><br><span class="line">        bean earthnut pea sierra leone bologi leek soko chicory celtuce parsley jícama salsify.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Celery quandong swiss chard chicory earthnut pea potato. Salsify taro catsear garlic gram celery bitterleaf wattle</span><br><span class="line">        seed collard greens nori. Grape wattle seed kombu beetroot horseradish carrot squash brussels sprout chard.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span></span><br><span class="line">        Photography</span><br><span class="line">      <span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;photos&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq2.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq3.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq4.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/balloon-sq5.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;placeholder&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">1.2em</span> / <span class="number">1.2</span> Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">200%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">50px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">980px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">max-width</span>: <span class="number">980px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span>;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: wrap;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">nav</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">5em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.photos</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.feature</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.grid</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">2</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">40px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.photos</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：创建精美的信纸</title>
    <url>/2024/08/06/CSS_test_letterheaded_paper/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Creating_fancy_letterheaded_paper">题目链接</a></p>
<p>题目要求：</p>
<ul>
<li><p>把 CSS 链接到 HTML 文档里。</p>
</li>
<li><p>给信纸添加这样一个背景：    </p>
<ul>
<li><p>把之前下载的顶部图片固定到信纸顶部。</p>
</li>
<li><p>把之前下载的底部图片固定到信纸底部。</p>
</li>
<li><p>为了给信纸一点纹理，在前面背景的基础上添加一个半透明的渐变，使其在顶部和底部附近稍微变暗，但中间的大部分完全透明。</p>
</li>
</ul>
</li>
<li><p>多添加一个<code>background</code>声明，仅添加顶部图片到信纸顶部，以此作为不支持之前那种声明方式的浏览器的后备方案。</p>
</li>
<li><p>给信纸添加一个白色的背景颜色。</p>
</li>
<li><p>给信纸添加一个 1mm 的上下实线边框，选一个符合信纸的颜色主题的边框颜色。</p>
</li>
</ul>
<ul>
<li>把之前下载的标志图片添加为 <code>&lt;h1&gt;</code> 的背景图片。</li>
<li>给标志添加一个过滤器，使它有一个隐隐约约的阴影。</li>
<li>现在把添加的过滤器注释掉，尝试用其他（更跨浏览器兼容）的方式实现一个相同的阴影，阴影需要同样符合圆形图片的形状。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-US&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Fancy letterheaded paper<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Awesome<span class="tag">&lt;<span class="name">br</span>&gt;</span>Company<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>The Awesome Company<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>102-112 Frail Bend Bridge<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        The Dwindlings<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Little Hornet<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        HX3 9ZQ<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        UK<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">article</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">210mm</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">297mm</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">20px</span> auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">top-image.png</span>),<span class="built_in">url</span>(<span class="string">bottom-image.png</span>),</span><br><span class="line">  <span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="number">0%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="number">20%</span>, <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>) <span class="number">80%</span>, <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0.2</span>) <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background-position</span>: top,bottom,center;</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1mm</span> solid red;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1mm</span> solid red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">8mm</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">20mm</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">12mm</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20mm</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">128px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">letter-spacing</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">44px</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> black;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">logo.png</span>);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">drop-shadow</span>(<span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> black);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：响应式设计与媒体查询</title>
    <url>/2024/08/06/CSS_test_rwd/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/rwd_skills">题目链接</a></p>
<p>题目要求：用响应式设计为移动端网站设计一个桌面端的界面。</p>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Responsive Web Design Task: Task<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;../styles.css&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>My Website<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Link 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Link 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>Link 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is the main heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Veggies es bonus vobis, proinde vos postulo essum magis kohlrabi welsh</span><br><span class="line">          onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot</span><br><span class="line">          courgette tatsoi pea sprouts fava bean collard greens dandelion okra</span><br><span class="line">          wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;cards&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card One<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                Turnip greens yarrow ricebean rutabaga endive cauliflower sea</span><br><span class="line">                lettuce kohlrabi amaranth water spinach avocado.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card Two<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                Daikon napa cabbage asparagus winter purslane kale. Celery</span><br><span class="line">                potato scallion desert raisin horseradish spinach carrot soko.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card Three<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                Lotus root water spinach fennel kombu maize bamboo shoot green</span><br><span class="line">                bean swiss chard seakale pumpkin onion chickpea gram corn pea.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card Four<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                Lotus root water spinach fennel kombu maize bamboo shoot green</span><br><span class="line">                bean swiss chard seakale pumpkin onion chickpea gram corn pea.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Card Five<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">                Nori grape silver beet broccoli kombu beet greens fava bean</span><br><span class="line">                potato quandong celery. Bunya nuts black-eyed pea prairie turnip</span><br><span class="line">                leek lentil turnip greens parsnip.</span><br><span class="line">              <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">&quot;sidebar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          Have you discovered all of the other excellent content on this</span><br><span class="line">          website?</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>:</span><br><span class="line">    <span class="number">1.2em</span>/<span class="number">1.4</span> Arial,</span><br><span class="line">    Helvetica,</span><br><span class="line">    sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">ul</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">border-top</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">header</span> <span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">150%</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: italic;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">main</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">gap</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(auto-fill, <span class="built_in">minmax</span>(<span class="number">250px</span>, <span class="number">1</span>fr));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-tag">h2</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.cards</span> <span class="selector-class">.inner</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.5em</span> <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="selector-tag">header</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">header</span> <span class="selector-tag">nav</span> <span class="selector-tag">ul</span></span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">flex-direction</span>: row;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">20%</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">header</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">      <span class="attribute">border</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-tag">main</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: grid;</span><br><span class="line">      <span class="attribute">grid-template-columns</span>: <span class="number">3</span>fr <span class="number">1</span>fr;</span><br><span class="line">      <span class="attribute">grid-gap</span>: <span class="number">20px</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS 技能测试：选择器</title>
    <url>/2024/08/06/CSS_test_selectors/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/CSS/Building_blocks/Selectors/Selectors_Tasks">题目链接</a></p>
<h3 id="选择器一"><a href="#选择器一" class="headerlink" title="选择器一"></a>选择器一</h3><p>（略）</p>
<h3 id="选择器二"><a href="#选择器二" class="headerlink" title="选择器二"></a>选择器二</h3><p>题目要求：</p>
<ul>
<li>让 id 为 <code>special</code> 的元素有一个黄色背景</li>
<li>让使用类 <code>alert</code> 的元素有一个 1px 的灰色边框。</li>
<li>如果一个元素使用了 <code>alert</code> 类还有 <code>stop</code> 类，让它的背景变为红色。</li>
<li>如果一个元素使用 <code>alert</code> 类还有 <code>go</code> 类，让它的背景变为绿色。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Veggies es <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;alert&quot;</span>&gt;</span>bonus vobis<span class="tag">&lt;/<span class="name">span</span>&gt;</span>, proinde vos postulo <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;alert stop&quot;</span>&gt;</span>essum magis<span class="tag">&lt;/<span class="name">span</span>&gt;</span> kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;special&quot;</span>&gt;</span>A level 2 heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Gumbo beet greens corn soko endive gumbo gourd.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Another level 2 heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;alert go&quot;</span>&gt;</span>Parsley shallot<span class="tag">&lt;/<span class="name">span</span>&gt;</span> courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-id">#special</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span>&#123;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">1px</span> solid grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span><span class="selector-class">.stop</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.alert</span><span class="selector-class">.go</span>&#123;</span><br><span class="line">  <span class="attribute">background-color</span>:green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器三"><a href="#选择器三" class="headerlink" title="选择器三"></a>选择器三</h3><p>题目要求：</p>
<ul>
<li>链接文本的样式：使链接为橘色，被访问后变为绿色，当被 hover 时，移除链接文本的下划线。</li>
<li>让容器里的第一个元素的字体大小为:150%，并且让这个元素的第一行是红色的。</li>
<li>让表格中每隔一行条带化，分别给它们一个颜色为#333 的背景和一个白色前景。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Veggies es <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com&quot;</span>&gt;</span>bonus vobis<span class="tag">&lt;/<span class="name">a</span>&gt;</span>, proinde vos postulo essum magis kohlrabi welsh onion daikon amaranth tatsoi tomatillo melon azuki bean garlic.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Gumbo beet greens corn soko endive gumbo gourd. Parsley shallot courgette tatsoi pea sprouts fava bean collard greens dandelion okra wakame tomato. Dandelion cucumber earthnut pea peanut soko zucchini.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Fruits<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>Vegetables<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Apple<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Potato<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Orange<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Carrot<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Tomato<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Parsnip<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Kiwi<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Onion<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Banana<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>Beet<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child&#123;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">150%</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.container</span> <span class="selector-tag">p</span><span class="selector-pseudo">:first</span>-child<span class="selector-pseudo">::first-line</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>n+<span class="number">2</span>)&#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#333</span>;</span><br><span class="line">  <span class="attribute">color</span>:white</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器四"><a href="#选择器四" class="headerlink" title="选择器四"></a>选择器四</h3><p>题目要求：</p>
<ul>
<li>让任何直接跟随二级标题的段落颜色为红色。</li>
<li>移除使用了 list 类的无序列表的子元素前面的圆点，并给他们添加一个 1px 的灰色下边框。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph comes after the heading.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the second paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Another heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>This paragraph comes after the heading.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>One<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Two</span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Three<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h2</span> + <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.list</span> &gt; <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid lightgrey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器五"><a href="#选择器五" class="headerlink" title="选择器五"></a>选择器五</h3><p>题目要求：</p>
<ul>
<li>选择带有 <code>title</code> 属性的 <code>&lt;a&gt;</code> 元素，将其边框颜色设置为粉色（<code>border-color: pink</code>）。</li>
<li>选择带有 <code>href</code> 属性且属性值中包含 <code>contact</code> 的 <code>&lt;a&gt;</code> 元素，将其边框颜色设置为橙色（<code>border-color: orange</code>）。</li>
<li>选择 <code>href</code> 属性值以 <code>https</code> 开头的 <code>&lt;a&gt;</code> 元素，将其边框颜色设置为绿色（<code>border-color: green</code>）。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span>&gt;</span>Link 1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://example.com&quot;</span> <span class="attr">title</span>=<span class="string">&quot;Visit example.com&quot;</span>&gt;</span>Link 2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/contact&quot;</span>&gt;</span>Link 3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;../contact/index.html&quot;</span>&gt;</span>Link 4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid grey;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;contact&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">border-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;https&quot;</span>]</span> &#123;</span><br><span class="line"><span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 技能测试：图片库</title>
    <url>/2024/08/06/JS_test_image_gallery/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Building_blocks/Image_gallery">题目链接</a></p>
<p>题目要求：</p>
<ul>
<li>声明一个 <code>const</code> 数组，用于列出每张图像的文件名，例如 <code>&#39;pic1.jpg&#39;</code>。</li>
<li>迭代数组中的文件名，为每一个文件名创建一个 <code>&lt;img&gt;</code> 元素，并将其插入到 <code>thumb-bar &lt;div&gt;</code> 中，这样图片就会嵌入页面。</li>
<li>为 <code>thumb-bar &lt;div&gt;</code> 里的每个 <code>&lt;img&gt;</code> 元素添加一个 click 事件监听器，在图片被点击时相应的图片将被显示到 <code>displayed-img &lt;img&gt;</code> 元素上。</li>
<li>给 <code>&lt;button&gt;</code> 元素添加一个 click 事件监听器，当按钮被点击时，将全尺寸图片变暗，再次点击时取消。</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en-us&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Image gallery<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Image gallery example<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;full-img&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;displayed-img&quot;</span> <span class="attr">src</span>=<span class="string">&quot;images/pic1.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Closeup of a human eye&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;overlay&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;dark&quot;</span>&gt;</span>Darken<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;thumb-bar&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: helvetica, arial, sans-serif;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.full-img</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.overlay</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">640px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">480px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">0.6</span>);</span><br><span class="line">  <span class="attribute">text-shadow</span>: <span class="number">1px</span> <span class="number">1px</span> <span class="number">1px</span> white;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.thumb-bar</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20%</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> displayedImage = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.displayed-img&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> thumbBar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.thumb-bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> overlay = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.overlay&#x27;</span>);</span><br><span class="line"><span class="comment">/* Declaring the array of image filenames */</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">    <span class="keyword">const</span> newImage = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;img&#x27;</span>);</span><br><span class="line">    newImage.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>, <span class="string">`images/pic<span class="subst">$&#123;i&#125;</span>.jpg`</span>);</span><br><span class="line">    <span class="comment">//newImage.setAttribute(&#x27;alt&#x27;, xxx);</span></span><br><span class="line">    newImage.<span class="property">onclick</span> = <span class="function">()=&gt;</span>&#123;displayedImage.<span class="title function_">setAttribute</span>(<span class="string">&#x27;src&#x27;</span>,newImage.<span class="property">src</span>);&#125;;</span><br><span class="line">    thumbBar.<span class="title function_">appendChild</span>(newImage);    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Declaring the alternative text for each image file */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Looping through images */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(btn.<span class="title function_">getAttribute</span>(<span class="string">&#x27;class&#x27;</span>)===<span class="string">&#x27;dark&#x27;</span>)&#123;</span><br><span class="line">        btn.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;light&#x27;</span>);</span><br><span class="line">        btn.<span class="property">textContent</span> = <span class="string">&#x27;Lighten&#x27;</span>;</span><br><span class="line">        overlay.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">`rgba(0,0,0,0.5)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        btn.<span class="title function_">setAttribute</span>(<span class="string">&#x27;class&#x27;</span>,<span class="string">&#x27;dark&#x27;</span>);</span><br><span class="line">        btn.<span class="property">textContent</span> = <span class="string">&#x27;dark&#x27;</span>;</span><br><span class="line">        overlay.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">`rgba(0,0,0,0)`</span>;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = updateColor;</span><br><span class="line"><span class="comment">/* Wiring up the Darken/Lighten button */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS 技能测试：笑话生成器</title>
    <url>/2024/08/06/JS_test_story_generator/</url>
    <content><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Silly_story_generator">题目链接</a></p>
<p>题目要求：</p>
<ul>
<li>点击“随机生成笑话”按钮时生成一则笑话。</li>
<li>若“生成”按钮按下之前，你在“输入自定义的名字”文字框中输入了一个自定义名字，那么生成的笑话中原有的名字（李雷 &#x2F; Bob）将被取代。</li>
<li>通过选择国家名称的单选按钮来确定界面语言以及笑话中温度和重量的制式。</li>
<li>点一次按钮，生成一个新故事。点一次生成一个……</li>
</ul>
<p>HTML 代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>笑话机<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;style.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span> <span class="attr">defer</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;customname&quot;</span>&gt;</span>输入自定义名字：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;customname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;李雷&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;metric&quot;</span>&gt;</span>公制<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;metric&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;measure&quot;</span> <span class="attr">value</span>=<span class="string">&quot;metric&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;american&quot;</span>&gt;</span>美制<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;american&quot;</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;measure&quot;</span> <span class="attr">value</span>=<span class="string">&quot;american&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;randomize&quot;</span>&gt;</span>生成随机笑话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 鸣谢：Willy Aguirre 提供的测试代码 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;story&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>CSS 代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: sans-serif;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">padding-bottom</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFC125</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#5E2612</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>JS 代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> customName = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;customname&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> randomize = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.randomize&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> story = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.story&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomValueFromArray</span>(<span class="params">array</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> array[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * array.<span class="property">length</span>)];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> storyText = <span class="string">&#x27;今天气温 34 摄氏度，:inserta:出去遛弯。当走到:insertb:门前时，突然就:insertc:。人们都惊呆了，李雷全程目睹但并没有慌，因为:inserta:是一个 130 公斤的胖子，天气又辣么热。&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> insertX = [<span class="string">&#x27;怪兽威利&#x27;</span>,<span class="string">&#x27;大老爹&#x27;</span>,<span class="string">&#x27;圣诞老人&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> insertY = [<span class="string">&#x27;肯德基&#x27;</span>,<span class="string">&#x27;迪士尼乐园&#x27;</span>,<span class="string">&#x27;白宫&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> insertZ = [<span class="string">&#x27;自燃了&#x27;</span>,<span class="string">&#x27;在人行道化成了一坨泥&#x27;</span>,<span class="string">&#x27;变成一条鼻涕虫爬走了&#x27;</span>];</span><br><span class="line"></span><br><span class="line">randomize.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, result);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">result</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newStory = storyText;</span><br><span class="line">  <span class="keyword">let</span> xItem = <span class="title function_">randomValueFromArray</span>(insertX);</span><br><span class="line">  <span class="keyword">let</span> yItem = <span class="title function_">randomValueFromArray</span>(insertY);</span><br><span class="line">  <span class="keyword">let</span> zItem = <span class="title function_">randomValueFromArray</span>(insertZ);</span><br><span class="line">  newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;:inserta:&#x27;</span>,xItem);</span><br><span class="line">  newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;:insertb:&#x27;</span>,yItem);</span><br><span class="line">  newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;:insertc:&#x27;</span>,zItem);</span><br><span class="line">  newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;:inserta:&#x27;</span>,xItem);</span><br><span class="line">  <span class="keyword">if</span>(customName.<span class="property">value</span> !== <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> name = customName.<span class="property">value</span>;</span><br><span class="line">    newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;李雷&#x27;</span>,name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;american&quot;</span>).<span class="property">checked</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> weight = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">300</span>);</span><br><span class="line">    <span class="keyword">let</span> temperature = <span class="title class_">Math</span>.<span class="title function_">round</span>(<span class="number">94</span>);</span><br><span class="line">    newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;34 摄氏度&#x27;</span>,<span class="string">`<span class="subst">$&#123;temperature&#125;</span> 华氏度`</span>);</span><br><span class="line">    newStory = newStory.<span class="title function_">replace</span>(<span class="string">&#x27;130 公斤&#x27;</span>,<span class="string">`<span class="subst">$&#123;weight&#125;</span> 磅`</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  story.<span class="property">textContent</span> = newStory;</span><br><span class="line">  story.<span class="property">style</span>.<span class="property">visibility</span> = <span class="string">&#x27;visible&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>K-D 树  学习笔记</title>
    <url>/2024/08/06/K-D_tree/</url>
    <content><![CDATA[<blockquote>
<p>k-D Tree(KDT , k-Dimension Tree) 是一种可以 <strong>高效处理 $k$ 维空间信息</strong> 的数据结构。</p>
</blockquote>
<h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>K-D树具有二叉搜索树的形态。因此可看做是替罪羊树扩展到 $k$ 维后的形态。</p>
<p>与一维的信息不同，K-D树的第 $i$ 层需要用第 $i%k$ 维的信息进行比较。为了保证复杂度，建树时选取第 $i%k$ 维中 $[l,r]$ 的中位数作为当前的根。修改的时候通过暴力重构保证树的深度在可以接受的范围内。</p>
<p>下面详细阐述几个操作。</p>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><h4 id="重构树"><a href="#重构树" class="headerlink" title="重构树"></a>重构树</h4><p>如果当前节点的左或右子树的大小比上当前子树的大小已经超过了某个阙值（可设为 $0.75$），那么我们需要重构树。</p>
<p>首先我们 DFS 一遍整棵子树，把所有的节点信息存入一个数组。然后进行重构。每次利用 nth_element 函数找到当前维信息的中位数并将其作为根，小于当前信息的放入左子树，否则放入右子树。递归下去即可。</p>
<p>代码如下（两个函数）：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	nd[++cqt]=tr[id].p;</span><br><span class="line">	lint[++cnt]=id;</span><br><span class="line">	<span class="keyword">if</span>(lid)<span class="built_in">clear</span>(lid);</span><br><span class="line">	<span class="keyword">if</span>(rid)<span class="built_in">clear</span>(rid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;id=<span class="built_in">newnode</span>();</span><br><span class="line">	<span class="built_in">nth_element</span>(nd+l,nd+mid,nd+r+<span class="number">1</span>,d?cmp1:cmp0);</span><br><span class="line">	tr[id].p=nd[mid];</span><br><span class="line">	lid=<span class="built_in">rebuild</span>(lid,l,mid<span class="number">-1</span>,d^<span class="number">1</span>);</span><br><span class="line">	rid=<span class="built_in">rebuild</span>(rid,mid+<span class="number">1</span>,r,d^<span class="number">1</span>);</span><br><span class="line">	<span class="built_in">push_up</span>(id);</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入节点"><a href="#插入节点" class="headerlink" title="插入节点"></a>插入节点</h4><p>插入的方式与普通二叉搜索树相同，只不过每层比较的信息不同。插入完成后需要判断是否需要重构。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> d)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[lid].sz&gt;tr[id].sz*rate||tr[rid].sz&gt;tr[id].sz*rate)&#123;</span><br><span class="line">		cqt=<span class="number">0</span>;</span><br><span class="line">		<span class="built_in">clear</span>(id);</span><br><span class="line">		id=<span class="built_in">rebuild</span>(id,<span class="number">1</span>,tr[id].sz,d);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> d,node u)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!id)&#123;</span><br><span class="line">		id=<span class="built_in">newnode</span>();</span><br><span class="line">		lid=rid=<span class="number">0</span>,tr[id].p=u;</span><br><span class="line">		<span class="built_in">push_up</span>(id);</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(u.loc[d]&lt;=tr[id].p.loc[d])lid=<span class="built_in">insert</span>(lid,d^<span class="number">1</span>,u);</span><br><span class="line">	<span class="keyword">else</span> rid=<span class="built_in">insert</span>(rid,d^<span class="number">1</span>,u);</span><br><span class="line">	<span class="built_in">push_up</span>(id);</span><br><span class="line">	id=<span class="built_in">push_down</span>(id,d);</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h4><p>不同的 K-D 树需要在树上存储不同的信息。这里只是提供一种思想。</p>
<p>我们可以在树上存子树内各维的范围，如果查询的东西完全包含该子树（在所有维度上），则返回该当前子树的答案。否则递归处理。注意需要判断每次的根节点是否要纳入答案中。个人感觉这挺像线段树的。</p>
<p>放一个 2-D 树内存储矩阵信息的代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x1,<span class="type">int</span> y1,<span class="type">int</span> x2,<span class="type">int</span> y2)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!id)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">in</span>(tr[id].minm[<span class="number">0</span>],tr[id].minm[<span class="number">1</span>],tr[id].maxm[<span class="number">0</span>],tr[id].maxm[<span class="number">1</span>],x1,y1,x2,y2))<span class="keyword">return</span> tr[id].sum;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">out</span>(tr[id].minm[<span class="number">0</span>],tr[id].minm[<span class="number">1</span>],tr[id].maxm[<span class="number">0</span>],tr[id].maxm[<span class="number">1</span>],x1,y1,x2,y2))<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> ret=<span class="built_in">query</span>(lid,x1,y1,x2,y2)+<span class="built_in">query</span>(rid,x1,y1,x2,y2);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">in</span>(tr[id].p.loc[<span class="number">0</span>],tr[id].p.loc[<span class="number">1</span>],tr[id].p.loc[<span class="number">0</span>],tr[id].p.loc[<span class="number">1</span>],x1,y1,x2,y2))ret+=tr[id].p.val;</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时空复杂度"><a href="#时空复杂度" class="headerlink" title="时空复杂度"></a>时空复杂度</h3><p>空间复杂度显然是 $O(n)$ 的，不过需要注意利用好已经被删除的点！可以拿一个数组存下被删除的点，每次加新节点的时候从数组里面拿就行了。</p>
<p>时间复杂度较为复杂。</p>
<ul>
<li>对于建树、插入、删除操作，单次操作复杂度为均摊 $O(\log n)$，因为树高是这么高的。</li>
<li>对于查询操作，最坏情况是 $O(n^{1-\frac{1}{k}})$ 的。特别地，2-D 树的最坏复杂度是 $O(\sqrt n)$。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>在处理高维问题上，K-D 树不失为一种强有力的工具；但由于其复杂度的局限性，在处理二维问题时，K-D树往往只是在想不出正解的时候的一种巧妙的暴力。综上，掌握好 K-D 树对我们来说是十分必要的。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>NOIP2022  喵了个喵  题解</title>
    <url>/2024/08/06/NOIP2022-T2-solution/</url>
    <content><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h3><p>这是一个有趣的问题。考场上死磕这个题 $2$ 小时，爆砍 $20$ 分，连第一档部分分都没拿到，只拿了爆搜的分。</p>
<p>考后看了信友队的<a href="https://mp.weixin.qq.com/s/O1IKU0jwTLI6LtsXN5ZSEg">录播讲评</a>，又参考了魏老师的<a href="https://www.luogu.com.cn/blog/AlexWei/noip2022-ti-jie">博客</a>，总算把这个题写过了。这里分享一下。</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>自己看吧，阅读 NOIP 原题题面有助于提高阅读理解能力。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先发现 $k&#x3D;2n-2$ 或 $k&#x3D;2n-1$，就不难想到我们每个栈里面只放两个元素。</p>
<p>对于 $k&#x3D;2n-2$ 的情况，一定能使得有一个栈是空栈。因此对于每一个已经在栈里面的元素，如果在栈顶就直接消掉，否则放在空栈里和栈底直接消掉。</p>
<p>对于 $k&#x3D;2n-1$ 的情况就要复杂得多了。我们很有可能出现一种可怕的情况：前面 $n-1$ 个栈里面已经存放了 $2n-2$ 个元素，这时出现了第 $2n-1$ 个元素！这时怎么办呢？</p>
<p>显然，这个新元素要么占掉我们仅有的那一个空栈，要么堆在某个已经放了两个元素的栈上面。</p>
<p>这时我们注意到一个东西：如果这个元素堆在一个已经放了两个元素的栈（令栈顶为 $a$，栈底为 $b$）上面，然后这个元素后面又紧跟了栈底元素 $b$ 的话，我们会立刻把后面的 $b$，放在空栈里，然后消掉，最后的效果是当前元素所在的栈只有两个元素，而我们依旧有一个空栈。也就是说，我们保持了之前需要的性质。</p>
<p>可是如果当前元素后面跟着的不是栈底元素 $b$，而是栈顶元素 $a$，那这个 $a$ 不就消不掉了吗？</p>
<p>这引导我们根据出现在当前元素后面的第一个栈底元素 $b$ 之前的 $a$ 的个数的奇偶性进行分类讨论。若出现了偶数个 $a$，那就让这偶数个 $a$ 自己消掉，不需要利用栈顶那个 $a$。此时显然可以按照前面的思路，把当前元素放在加入这个栈。若出现了奇数个 $a$，则必须要把栈顶的那个 $a$ 消掉。此时我们不得不将当前元素放入空栈。</p>
<p>什么？把当前元素放入空栈？那要是需要消掉栈底元素怎么办呢？别担心，我们之前的 $a,b$ 所在的栈是有所讲究的。我们要考虑的栈一定是 $b$ 出现的最早的栈，即我们找到当前元素之后第一个出现在栈底的元素进行处理。这时我们注意到 $b$ 上面是没有东西的，因此我们可以直接把 $b$ 给消掉，从而又恢复到最早的那个状态。由于 $b$ 的选择，我们在空栈出现之前是不会需要消掉栈底元素的，也就不需要空栈了。</p>
<p>放张图便于理解：</p>
<img src="https://cdn.luogu.com.cn/upload/image_hosting/i2q70vdv.png" style="zoom: 67%;" />

<p>在这个图中，我们假设 $5$ 后面第一个出现的栈底元素是 $3$，这时我们根据出现在 $3$ 之前的 $4$ 的个数的奇偶性分类讨论。如果有偶数个，我们一定能到达状态 $B_1$，然后又返回状态 $A$；如果有奇数个，我们一定能到达状态 $B_2$，然后又返回状态 $A$。</p>
<p>还有一种情况，就是当前元素后面出现栈底元素之前又出现了一个当前元素。那我们可以直接把当前元素甩进空栈，与上面同理，是可以在需要空栈之前把当前元素消掉的。</p>
<p>通过这种方法，我们对每个出现在奇数位的元素都匹配了它的下一个出现在偶数位的元素，因此我们一定能找到一个解完成构造。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>要模拟上述过程并不难，就是细节比较多。魏老师说实现的精细可以做到 $O(n+m)$，我实现的不精细，因此是 $O(m\log n)$ 的复杂度。我用了一个 set 存储可以放元素的栈，用类似廊桥分配的做法维护；再开一些变量分别记录留空的栈，当前的状态 $A&#x2F;B$。放一下核心部分的代码，变量名清奇不喜勿喷~</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>(),k=<span class="built_in">read</span>(),top=<span class="number">0</span>,empty_stack=n;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)num[i]=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,yes=<span class="number">0</span>,full=<span class="number">0</span>;</span><br><span class="line">set&lt;<span class="type">int</span>&gt; st;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)st.<span class="built_in">insert</span>(i);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(now&amp;&amp;num[i]==full)&#123;<span class="comment">//状态B1，当前出现状态B1原来那个栈的栈顶a，全部堆到空栈里让他们自己消掉</span></span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=empty_stack;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(now&amp;&amp;num[i]==yes)&#123;<span class="comment">//状态B1，当前出现状态B1原来那个栈的栈底b，放进空栈利用栈底消掉</span></span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=empty_stack;</span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">2</span>,ans[top][<span class="number">1</span>]=now,ans[top][<span class="number">2</span>]=empty_stack;</span><br><span class="line">		now=<span class="number">0</span>,yes=<span class="number">0</span>,full=<span class="number">0</span>;<span class="comment">//返回状态A</span></span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(bel[num[i]])&#123;<span class="comment">//当前元素在某个栈内</span></span><br><span class="line">		<span class="keyword">if</span>(up[bel[num[i]]]==num[i])&#123;<span class="comment">//在某个栈顶</span></span><br><span class="line">			ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=bel[num[i]];</span><br><span class="line">			<span class="keyword">if</span>(sz[bel[num[i]]]==<span class="number">1</span>)&#123;</span><br><span class="line">				up[bel[num[i]]]=dow[bel[num[i]]]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				up[bel[num[i]]]=dow[bel[num[i]]];</span><br><span class="line">				<span class="keyword">if</span>(bel[num[i]]!=empty_stack)st.<span class="built_in">insert</span>(bel[num[i]]);<span class="comment">//可能从状态B2转移回状态A，空栈要预留一个</span></span><br><span class="line">			&#125;</span><br><span class="line">			sz[bel[num[i]]]--,bel[num[i]]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;<span class="comment">//在某个栈底</span></span><br><span class="line">			ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=empty_stack;</span><br><span class="line">			ans[++top][<span class="number">0</span>]=<span class="number">2</span>,ans[top][<span class="number">1</span>]=bel[num[i]],ans[top][<span class="number">2</span>]=empty_stack;</span><br><span class="line">			<span class="keyword">if</span>(sz[bel[num[i]]]==<span class="number">1</span>)&#123;</span><br><span class="line">				up[bel[num[i]]]=dow[bel[num[i]]]=<span class="number">0</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> dow[bel[num[i]]]=up[bel[num[i]]],st.<span class="built_in">insert</span>(bel[num[i]]);</span><br><span class="line">			sz[bel[num[i]]]--,bel[num[i]]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(!st.<span class="built_in">empty</span>())&#123;<span class="comment">//在保留一个空栈的前提下能放进某个栈内</span></span><br><span class="line">		<span class="type">int</span> u=*st.<span class="built_in">begin</span>();</span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=u,bel[num[i]]=u;</span><br><span class="line">		<span class="keyword">if</span>(sz[u])&#123;</span><br><span class="line">			up[u]=num[i],st.<span class="built_in">erase</span>(st.<span class="built_in">begin</span>());</span><br><span class="line">		&#125; </span><br><span class="line">		<span class="keyword">else</span> up[u]=dow[u]=num[i];</span><br><span class="line">		sz[u]++;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> u=i+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(bel[num[u]]&amp;&amp;up[bel[num[u]]]==num[u])u++;<span class="comment">//找到后面第一个在栈底的元素</span></span><br><span class="line">	<span class="keyword">if</span>(num[u]==num[i])&#123;<span class="comment">//找到的是当前元素</span></span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=empty_stack;</span><br><span class="line">		bel[num[i]]=empty_stack;</span><br><span class="line">		up[empty_stack]=dow[empty_stack]=num[i],sz[empty_stack]=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;u;j++)<span class="keyword">if</span>(num[j]==up[bel[num[u]]])cnt++;</span><br><span class="line">	<span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)&#123;<span class="comment">//有奇数个栈顶元素</span></span><br><span class="line">		ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=empty_stack,st.<span class="built_in">insert</span>(empty_stack);</span><br><span class="line">		bel[num[i]]=empty_stack;</span><br><span class="line">		up[empty_stack]=dow[empty_stack]=num[i],sz[empty_stack]=<span class="number">1</span>;</span><br><span class="line">		empty_stack=bel[num[u]];<span class="comment">//注意要在这里更新空栈信息</span></span><br><span class="line">		<span class="keyword">continue</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;<span class="comment">//有偶数个栈顶元素</span></span><br><span class="line">		now=bel[num[u]],ans[++top][<span class="number">0</span>]=<span class="number">1</span>,ans[top][<span class="number">1</span>]=bel[num[u]],yes=num[u];</span><br><span class="line">		dow[bel[num[u]]]=full=up[bel[num[u]]],up[bel[num[u]]]=num[i];</span><br><span class="line">		bel[num[i]]=bel[num[u]],bel[num[u]]=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">write</span>(top),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line">	<span class="built_in">write</span>(ans[i][<span class="number">0</span>]),<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(ans[i][<span class="number">0</span>]==<span class="number">1</span>)<span class="built_in">write</span>(ans[i][<span class="number">1</span>]),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">else</span> <span class="built_in">write</span>(ans[i][<span class="number">1</span>]),<span class="built_in">putchar</span>(<span class="string">&#x27; &#x27;</span>),<span class="built_in">write</span>(ans[i][<span class="number">2</span>]),<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>题解</tag>
        <tag>构造</tag>
        <tag>NOIP</tag>
      </tags>
  </entry>
  <entry>
    <title>P1264  K-联赛  题解</title>
    <url>/2024/08/06/P1264-solution/</url>
    <content><![CDATA[<h3 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h3><p>已知每支队伍的胜场和待比赛的情况，求可能成为胜场最多的队伍个数（并列也算最多）。</p>
<h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><p>贪心：对于每支队伍，要想胜场最多，显然未参与的所有比赛都应获胜。</p>
<p>判断：枚举每支队伍，判断其他队伍的胜场能否不超过该队伍。</p>
<h3 id="建图"><a href="#建图" class="headerlink" title="建图"></a>建图</h3><p>考虑对比赛和队伍分别建点。</p>
<p>因为要保证所有其他队伍的胜场不超过当前枚举的队伍 $i$，所以从其他队伍向汇点连一条容量为该队伍还能获胜的最多场次，即 $W_i-w_j$ 的边（其中 $W_i$ 为队伍 $i$ 赢得所有比赛获得的胜场数，预处理出来）。</p>
<p>同时，对于每场比赛，向参与比赛的两支队伍分别连上容量为比赛场数，即 $a_{ij}$ 的边，再从源点向每场比赛连上相同容量的边。</p>
<p>此时的网络最大流表示在所有队伍胜场不超过队伍 $i$ 的前提下，能匹配的比赛场数。因此将网络最大流与队伍 $i$ <strong>不</strong>参与的比赛场数进行比较，若相等则说明队伍 $i$ 可能获胜，输出即可。</p>
<h3 id="处理细节"><a href="#处理细节" class="headerlink" title="处理细节"></a>处理细节</h3><ul>
<li><p>建点连边时，要跳过当前枚举的队伍及其参加的比赛。</p>
</li>
<li><p>连边时，每两个队伍间的比赛只连一条边。</p>
</li>
<li><p>对于一支队伍 $i$，若存在另一支队伍 $j$ 使得 $w_j&gt;W_i$，则显然队伍 $i$ 不可能成为胜场最多的队伍，此时不用跑网络流。</p>
</li>
<li><p>若两支队伍之间已经没有比赛，则不需要连边。</p>
</li>
<li><p>每次枚举要初始化。</p>
</li>
</ul>
<h3 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,sh[<span class="number">30</span>],fu[<span class="number">30</span>],maxm[<span class="number">30</span>],sai[<span class="number">30</span>][<span class="number">30</span>],cnt=<span class="number">1</span>,lst[<span class="number">100005</span>],s,t,sum,pre,mid,dep[<span class="number">100005</span>],now[<span class="number">100005</span>],inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">edge</span>&#123;</span><br><span class="line">	<span class="type">int</span> f,t,val,lst;</span><br><span class="line">	<span class="built_in">edge</span>(<span class="type">int</span> f=<span class="number">0</span>,<span class="type">int</span> t=<span class="number">0</span>,<span class="type">int</span> val=<span class="number">0</span>,<span class="type">int</span> lst=<span class="number">0</span>):</span><br><span class="line">		<span class="built_in">f</span>(f),<span class="built_in">t</span>(t),<span class="built_in">val</span>(val),<span class="built_in">lst</span>(lst)&#123;&#125;;</span><br><span class="line">&#125;e[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">	e[++cnt]=<span class="built_in">edge</span>(u,v,val,lst[u]);</span><br><span class="line">	lst[u]=cnt;</span><br><span class="line">	e[++cnt]=<span class="built_in">edge</span>(v,u,<span class="number">0</span>,lst[v]);</span><br><span class="line">	lst[v]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">bfs</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dep,<span class="number">-1</span>,<span class="built_in">sizeof</span>(dep));</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(s),dep[s]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		now[u]=lst[u];</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">			<span class="type">int</span> v=e[i].t;</span><br><span class="line">			<span class="keyword">if</span>(e[i].val&amp;&amp;dep[v]==<span class="number">-1</span>)&#123;</span><br><span class="line">				dep[v]=dep[u]+<span class="number">1</span>;</span><br><span class="line">				q.<span class="built_in">push</span>(v);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> dep[t]!=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> in)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(u==t)<span class="keyword">return</span> in;</span><br><span class="line">	<span class="type">int</span> out=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=now[u];i;i=e[i].lst)&#123;</span><br><span class="line">		now[u]=i;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(e[i].val&amp;&amp;dep[v]==dep[u]+<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">int</span> go=<span class="built_in">dfs</span>(v,<span class="built_in">min</span>(in,e[i].val));</span><br><span class="line">			e[i].val-=go;</span><br><span class="line">			e[i^<span class="number">1</span>].val+=go;</span><br><span class="line">			in-=go,out+=go;</span><br><span class="line">			<span class="keyword">if</span>(go==<span class="number">0</span>)dep[v]=<span class="number">-1</span>;</span><br><span class="line">			<span class="keyword">if</span>(in==<span class="number">0</span>)<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(out==<span class="number">0</span>)dep[u]=<span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">return</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;sh[i]&gt;&gt;fu[i];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		maxm[i]=sh[i];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			cin&gt;&gt;sai[i][j];</span><br><span class="line">			maxm[i]+=sai[i][j];</span><br><span class="line">			sum+=sai[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="type">bool</span> fl=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="keyword">if</span>(sh[j]&gt;maxm[i])&#123;</span><br><span class="line">				fl=<span class="number">1</span>;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(fl)<span class="keyword">continue</span>;</span><br><span class="line">		s=<span class="number">0</span>,t=(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>+n+<span class="number">1</span>,mid=(n<span class="number">-1</span>)*(n<span class="number">-2</span>)/<span class="number">2</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=cnt;j++)e[j].f=e[j].t=e[j].val=lst[j]=e[j].lst=<span class="number">0</span>;</span><br><span class="line">		cnt=<span class="number">1</span>,pre=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line">			<span class="built_in">add</span>(mid+j,t,maxm[i]-sh[j]);</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=j+<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(k==i)<span class="keyword">continue</span>;</span><br><span class="line">				<span class="built_in">add</span>(<span class="number">0</span>,++pre,sai[j][k]);</span><br><span class="line">				<span class="built_in">add</span>(pre,mid+j,inf);</span><br><span class="line">				<span class="built_in">add</span>(pre,mid+k,inf);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">while</span>(<span class="built_in">bfs</span>())&#123;</span><br><span class="line">			ans+=<span class="built_in">dfs</span>(s,inf);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(ans==sum/<span class="number">2</span>-maxm[i]+sh[i])cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>最大流</tag>
      </tags>
  </entry>
  <entry>
    <title>P1852  跳跳棋  题解</title>
    <url>/2024/08/06/P1852-solution/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P1852">题目链接</a></p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>棋盘上有3颗棋子，分别在 $a$，$b$，$c$ 这三个位置。我们要通过最少的跳动把他们的位置移动成 $x$，$y$，$z$。</p>
<p>跳动的规则：任意选一颗棋子，对一颗中轴棋子跳动。跳动后两颗棋子距离不变。一次只允许跳过1颗棋子。</p>
<h2 id="先研究一下跳动"><a href="#先研究一下跳动" class="headerlink" title="先研究一下跳动"></a>先研究一下跳动</h2><p>我们发现，对于每组确定的位置，跳动只有以下3种情况：</p>
<ul>
<li><p>中间的往两边跳，分别是 $(x,y,z)-&gt;(x,2x-y,z)$ 和 $(x,y,z)-&gt;(x,2z-y,z)$；</p>
</li>
<li><p>两边的往中间跳，是 $(x,y,z)-&gt;(2y-x,y,z)$ 和 $(x,y,z)-&gt;(x,y,2y-z)$ 中的一个。</p>
</li>
</ul>
<p>任何时候都可以有3种情况吗？</p>
<p>并不是！我们发现当两边的棋子与中间的棋子距离相等时，是不能往中间跳的。这时只有中间往两边跳的情况。</p>
<p>而且容易证明，对于一组初始位置，满足两边的棋子与中间的棋子距离相等的目标位置是唯一的。</p>
<p>那么判断能否完成跳动就比较简单了，只需把 $(a,b,c)$ 与 $(x,y,z)$ 都移动到唯一的目标位置，若相同就是可以完成的。<del>（个人觉得和最小表示法的思想有那么一点点类似）</del></p>
<h2 id="再研究一下跳动"><a href="#再研究一下跳动" class="headerlink" title="再研究一下跳动"></a>再研究一下跳动</h2><p>注意到本题的数据范围是1e9，我们没办法每次暴力地把两边的棋子往中间移动。</p>
<p>但是注意这种情况：<img src="http://r.photo.store.qq.com/psb?/V14VFGnz2yFhuP/dwcwnI2QjuJN7xxJdXgrbPEkq*MUMxAAOMUOYcG.uKQ!/r/dDABAAAAAAAA"></p>
<p>有没有感觉其实和跳动的次数并没有太大关系，我们只关心模数！</p>
<p>我们令 $d_1,d_2$ 分别表示左边两个数之间的距离与右边两个数之间的距离。</p>
<p>我们钦定 $d_1&lt;d_2$，大于的情况同理。</p>
<p>发现每次可以跳过 $d_1$ 的距离，最多能跳 $d_2-1$ 的距离。令$k&#x3D;(d_2-1)&#x2F;d_1$，因此由 $(x,y,z)$ 可以跳到 $(x+k\times d_1,y+k\times d_1,z)$。</p>
<p>这样我们就得到了一种快速跳跃的方法。</p>
<p>注意到这里所说的跳跃，其实不一定非要跳跃到无法再跳，我们可以在实现的过程中钦定跳跃的步数，同样能 $O(1)$ 的完成跳跃。</p>
<h2 id="然后研究一下状态集合"><a href="#然后研究一下状态集合" class="headerlink" title="然后研究一下状态集合"></a>然后研究一下状态集合</h2><p>前文提到，对于每个状态集合，有唯一的状态使得它只能向两种状态转移，其余的状态都可以向三种状态转移。如果把每个状态抽象成一个点，那么状态之间的关系将构成一颗<strong>二叉树</strong>！</p>
<p>那我们要解决的问题就变成了求树上两个点的LCA。</p>
<p>常用的倍增求LCA肯定是不行的，因为状态过多存不下。</p>
<p>我们考虑改进这个方法。求LCA需要求出深度，在这个问题中也就是从根节点跳跃成当前状态需要跳的步数。我们在把初始状态跳到根判断是否在同一棵树上时可以顺便处理深度。倍增的第一步是将两个点移动到同一深度，这一步显然应当保留。</p>
<p>第二步是找到同一深度两个点的LCA。倍增虽然无法处理，但是我们都知道两个点的公共祖先满足单调性！于是我们可以二分答案，再判断是否跳到同一个点上。这个过程很容易实现。</p>
<h4 id="于是这道题就完美的做完啦！"><a href="#于是这道题就完美的做完啦！" class="headerlink" title="于是这道题就完美的做完啦！"></a>于是这道题就完美的做完啦！</h4><h2 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h2><p>每次跳跃的复杂度最坏为 $O(logn)$，外面套一个二分是 $O(logn)$，因此最终的复杂度应该为 $O(log^2n)$。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;bits/stdc++.h&gt;</span></span><br><span class="line"><span class="comment">#define int long long</span></span><br><span class="line">using namespace std;</span><br><span class="line">struct dot&#123;</span><br><span class="line">	int x,y,z,dep;</span><br><span class="line">&#125;A,B;</span><br><span class="line">int a[5],ans,b[5];</span><br><span class="line">void jump(dot &amp;a,int stp)&#123;</span><br><span class="line">	<span class="keyword">while</span>(stp)&#123;</span><br><span class="line">		int <span class="attribute">d1</span>=a.y-a.x,d2=a.z-a.y;</span><br><span class="line">		<span class="keyword">if</span>(<span class="attribute">d1</span>==d2)break;</span><br><span class="line">		<span class="keyword">if</span>(d1&lt;d2)&#123;</span><br><span class="line">			int <span class="attribute">d3</span>=min(stp,(d2-1)/d1);</span><br><span class="line">			<span class="attribute">stp-</span>=d3;</span><br><span class="line">			a.x+=d3<span class="number">*d1</span>,a.y+=d3<span class="number">*d1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			int <span class="attribute">d3</span>=min(stp,(d1-1)/d2);</span><br><span class="line">			<span class="attribute">stp-</span>=d3;</span><br><span class="line">			a.<span class="attribute">z-</span>=d3*d2,a.y-=d3*d2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">dot dfs(int x,int y,int z)&#123;</span><br><span class="line">	int <span class="attribute">dp</span>=0;</span><br><span class="line">	<span class="keyword">while</span>(1)&#123;</span><br><span class="line">		int <span class="attribute">d1</span>=y-x,d2=z-y;</span><br><span class="line">		<span class="keyword">if</span>(<span class="attribute">d1</span>==d2)break;</span><br><span class="line">		<span class="keyword">if</span>(d1&lt;d2)&#123;</span><br><span class="line">			int d3=(d2-1)/d1;</span><br><span class="line">			dp+=d3;</span><br><span class="line">			x+=d3<span class="number">*d1</span>,y+=d3<span class="number">*d1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			int d3=(d1-1)/d2;</span><br><span class="line">			dp+=d3;</span><br><span class="line">			<span class="attribute">z-</span>=d3*d2,y-=d3*d2;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	dot ret=(dot)&#123;x,y,z,dp&#125;;</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">	<span class="keyword">for</span>(int <span class="attribute">i</span>=1;i&lt;=3;i++)cin&gt;&gt;a[i];</span><br><span class="line">	sort(a+1,a+4);</span><br><span class="line">	<span class="attribute">A</span>=dfs(a[1],a[2],a[3]);</span><br><span class="line">	<span class="keyword">for</span>(int <span class="attribute">i</span>=1;i&lt;=3;i++)cin&gt;&gt;b[i];</span><br><span class="line">	sort(b+1,b+4);</span><br><span class="line">	<span class="attribute">B</span>=dfs(b[1],b[2],b[3]);</span><br><span class="line">	<span class="keyword">if</span>(A.x!=B.x||A.y!=B.y||A.z!=B.z)&#123;</span><br><span class="line">		puts(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	A.<span class="attribute">x</span>=a[1],A.<span class="attribute">y</span>=a[2],A.<span class="attribute">z</span>=a[3];</span><br><span class="line">	B.<span class="attribute">x</span>=b[1],B.<span class="attribute">y</span>=b[2],B.<span class="attribute">z</span>=b[3];</span><br><span class="line">	<span class="keyword">if</span>(A.dep&lt;B.dep)swap(A,B);</span><br><span class="line">	<span class="attribute">ans</span>=A.dep-B.dep;</span><br><span class="line">	jump(A,A.dep-B.dep);</span><br><span class="line">	int <span class="attribute">l</span>=0,r=A.dep;</span><br><span class="line">	<span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">		int mid=(l+r)&gt;&gt;1;</span><br><span class="line">		dot <span class="attribute">NA</span>=A,NB=B;</span><br><span class="line">		jump(NA,mid),jump(NB,mid);</span><br><span class="line">		<span class="keyword">if</span>(NA.<span class="attribute">x</span>==NB.x&amp;&amp;NA.y==NB.y&amp;&amp;NA.z==NB.z)r=mid;</span><br><span class="line">		<span class="keyword">else</span> <span class="attribute">l</span>=mid+1;</span><br><span class="line">	&#125;</span><br><span class="line">	ans+=l<span class="number">*2</span>;</span><br><span class="line">	puts(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>该题题解区的前三排题解。</p>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>LCA</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P3297  题解</title>
    <url>/2024/08/06/P3297-solution/</url>
    <content><![CDATA[<p>感觉思维挺小清新的，除了有个神秘的 $n&#x3D;0$ 的数据以外也不怎么毒瘤(?)</p>
<p>容易发现每两个点的分界线就是他们的中垂线。</p>
<p>于是就有以下思路：</p>
<p>1.对于每个点，枚举第二个点得到一条中垂线。这些中垂线的半平面交就是该点的势力范围。然后可以找到范围相邻的点。</p>
<p>2.相邻的点连边跑弗洛伊德最短路就行。</p>
<p>实现上有点小细节：监视点可能在矩形边界外。我们可以在求半平面交的时候发现没有势力范围直接跳过即可。</p>
<p>除了计算几何的板子以外的代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> dis[<span class="number">605</span>][<span class="number">605</span>],ed[<span class="number">605</span>],inf=<span class="number">0x3f3f3f3f</span>,stnode;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> zc)</span></span>&#123;<span class="comment">//求半平面交与加边</span></span><br><span class="line">	<span class="built_in">sort</span>(sg+<span class="number">1</span>,sg+cnt+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="type">int</span> hd=<span class="number">1</span>,tl=<span class="number">0</span>;</span><br><span class="line">	que[++tl]=sg[<span class="number">1</span>];</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=cnt;i++)&#123;</span><br><span class="line">		<span class="keyword">while</span>(hd&lt;tl&amp;&amp;((sg[i].t-sg[i].s)^(jd[tl<span class="number">-1</span>]-sg[i].s))&lt;=<span class="number">0</span>)tl--;</span><br><span class="line">		<span class="keyword">while</span>(hd&lt;tl&amp;&amp;((sg[i].t-sg[i].s)^(jd[hd]-sg[i].s))&lt;=<span class="number">0</span>)hd++;</span><br><span class="line">		que[++tl]=sg[i];</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">fabs</span>((que[tl].t-que[tl].s)^(que[tl<span class="number">-1</span>].t-que[tl<span class="number">-1</span>].s))&lt;eps)&#123;</span><br><span class="line">			tl--;</span><br><span class="line">			<span class="keyword">if</span>(((que[tl].t-que[tl].s)^(sg[i].t-que[tl].s))&gt;=<span class="number">0</span>)que[tl]=sg[i];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(hd&lt;tl)jd[tl<span class="number">-1</span>]=<span class="built_in">get_jd</span>(que[tl],que[tl<span class="number">-1</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(hd&lt;tl&amp;&amp;((que[hd].t-que[hd].s)^(jd[tl<span class="number">-1</span>]-que[hd].s))&lt;=<span class="number">0</span>)tl--;</span><br><span class="line">	<span class="keyword">if</span>(hd+<span class="number">1</span>&gt;=tl)<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">if</span>(hd+<span class="number">1</span>&lt;tl)jd[tl]=<span class="built_in">get_jd</span>(que[hd],que[tl]);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=hd;i&lt;=tl;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(que[i].id!=<span class="number">-1</span>)&#123;</span><br><span class="line">			dis[zc][que[i].id]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> ed[zc]=<span class="number">1</span>;<span class="comment">//该点可以作为终点，打上标记</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">bool</span> chk=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=hd;i&lt;=tl;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(((que[i].t-que[i].s)^(st-que[i].s))&lt;<span class="number">0</span>)&#123;</span><br><span class="line">			chk=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(chk)stnode=zc;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">double</span> topx,topy;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		cin&gt;&gt;n;</span><br><span class="line">		cin&gt;&gt;topx&gt;&gt;topy&gt;&gt;st.x&gt;&gt;st.y;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			cin&gt;&gt;jsd[i].x&gt;&gt;jsd[i].y;</span><br><span class="line">			ed[i]=<span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(!n)&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">memset</span>(dis,inf,<span class="built_in">sizeof</span>(dis));</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			cnt=<span class="number">0</span>,dis[i][i]=<span class="number">0</span>;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;<span class="comment">//枚举周围的点加边，注意直线是有向的！</span></span><br><span class="line">				<span class="keyword">if</span>(i==j)<span class="keyword">continue</span>;</span><br><span class="line">				cnt++;</span><br><span class="line">				sg[cnt].s=<span class="built_in">rotate</span>(jsd[i],<span class="built_in">mid</span>(jsd[i],jsd[j]),pi/<span class="number">2</span>);</span><br><span class="line">				sg[cnt].t=<span class="built_in">rotate</span>(jsd[j],<span class="built_in">mid</span>(jsd[i],jsd[j]),pi/<span class="number">2</span>);</span><br><span class="line">				sg[cnt].id=j;</span><br><span class="line">			&#125;</span><br><span class="line">			sg[++cnt].s=node&#123;<span class="number">0</span>,topy&#125;,sg[cnt].t=node&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,sg[cnt].id=<span class="number">-1</span>;</span><br><span class="line">			sg[++cnt].s=node&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,sg[cnt].t=node&#123;topx,<span class="number">0</span>&#125;,sg[cnt].id=<span class="number">-1</span>;</span><br><span class="line">			sg[++cnt].s=node&#123;topx,topy&#125;,sg[cnt].t=node&#123;<span class="number">0</span>,topy&#125;,sg[cnt].id=<span class="number">-1</span>;</span><br><span class="line">			sg[++cnt].s=node&#123;topx,<span class="number">0</span>&#125;,sg[cnt].t=node&#123;topx,topy&#125;,sg[cnt].id=<span class="number">-1</span>;</span><br><span class="line">			<span class="built_in">solve</span>(i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">1</span>;k&lt;=n;k++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">					dis[i][j]=<span class="built_in">min</span>(dis[i][j],dis[i][k]+dis[k][j]);<span class="comment">//Floyd最短路</span></span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="type">int</span> ans=inf;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(ed[i])ans=<span class="built_in">min</span>(ans,dis[stnode][i]+<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		cout&lt;&lt;ans&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>题解</tag>
        <tag>计算几何</tag>
      </tags>
  </entry>
  <entry>
    <title>P4422  题解</title>
    <url>/2024/08/06/P4422-solution/</url>
    <content><![CDATA[<p><a href="https://www.luogu.com.cn/problem/P4422">题目</a></p>
<p>提供一种奇妙的平衡树做法。</p>
<p>以年龄为值建Treap。</p>
<p>由询问中年龄大于等于 $B$ 且最年轻的人，想到其实是查询 $B$ 的后继。</p>
<p>但注意到我们还需要保证这个人在第 $Y$ 站之前下车。</p>
<p>题目中有这样一句话：<strong>给出 $X$ 的顺序是随机的</strong>。</p>
<p>那我们为何不将下车的车站作为Treap中堆的优先级呢？</p>
<p>这样我们查询时就可以保证同时满足两个条件了。</p>
<p>放代码：</p>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">#include &lt;bits/stdc++.h&gt;</span><br><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">int son[<span class="number">200005</span>][<span class="number">2</span>],fa[<span class="number">200005</span>],sz[<span class="number">200005</span>],num[<span class="number">200005</span>],val[<span class="number">200005</span>],pri[<span class="number">200005</span>],cnt,inf=<span class="number">0x3f3f3f3f</span>,root;</span><br><span class="line">void update(int x)&#123;</span><br><span class="line">	sz[x]=num[x];</span><br><span class="line">	if(son[x][<span class="number">0</span>])sz[x]+=sz[son[x][<span class="number">0</span>]];</span><br><span class="line">	if(son[x][<span class="number">1</span>])sz[x]+=sz[son[x][<span class="number">1</span>]];</span><br><span class="line">&#125;</span><br><span class="line">void zig(int x)&#123;</span><br><span class="line">	int s=son[x][<span class="number">0</span>],ss=son[fa[x]][<span class="number">1</span>]==x;</span><br><span class="line">	if(x==root)root=s;</span><br><span class="line">	son[x][<span class="number">0</span>]=son[s][<span class="number">1</span>];</span><br><span class="line">	fa[son[s][<span class="number">1</span>]]=x;</span><br><span class="line">	son[s][<span class="number">1</span>]=x;</span><br><span class="line">	fa[s]=fa[x];</span><br><span class="line">	son[fa[x]][ss]=s;</span><br><span class="line">	fa[x]=s;</span><br><span class="line">	update(x);</span><br><span class="line">	update(s);</span><br><span class="line">&#125;</span><br><span class="line">void zag(int x)&#123;</span><br><span class="line">	int s=son[x][<span class="number">1</span>],ss=son[fa[x]][<span class="number">1</span>]==x;</span><br><span class="line">	if(x==root)root=s;</span><br><span class="line">	son[x][<span class="number">1</span>]=son[s][<span class="number">0</span>];</span><br><span class="line">	fa[son[s][<span class="number">0</span>]]=x;</span><br><span class="line">	son[s][<span class="number">0</span>]=x;</span><br><span class="line">	fa[s]=fa[x];</span><br><span class="line">	son[fa[x]][ss]=s;</span><br><span class="line">	fa[x]=s;</span><br><span class="line">	update(x);</span><br><span class="line">	update(s);</span><br><span class="line">&#125;</span><br><span class="line">void insert(int &amp;x,int key,int loc,int f)&#123;</span><br><span class="line">	if(!x)&#123;</span><br><span class="line">		x=++cnt;</span><br><span class="line">		val[x]=key;</span><br><span class="line">		pri[x]=loc;</span><br><span class="line">		num[x]=sz[x]=<span class="number">1</span>;</span><br><span class="line">		fa[x]=f;</span><br><span class="line">		if(!f)root=x;</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	else sz[x]++;</span><br><span class="line">	if(val[x]==key)num[x]++;</span><br><span class="line">	else if(val[x]&gt;key)&#123;</span><br><span class="line">		insert(son[x][<span class="number">0</span>],key,loc,x);</span><br><span class="line">		if(pri[son[x][<span class="number">0</span>]]&lt;pri[x])zig(x);</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		insert(son[x][<span class="number">1</span>],key,loc,x);</span><br><span class="line">		if(pri[son[x][<span class="number">1</span>]]&lt;pri[x])zag(x);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">int query(int x,int key,int loc)&#123;</span><br><span class="line">	if(pri[x]&gt;loc)return inf;</span><br><span class="line">	int ret=inf;</span><br><span class="line">	if(val[x]&gt;=key)ret=val[x];</span><br><span class="line">	if(son[x][<span class="number">0</span>]&amp;&amp;val[x]&gt;=key)ret=min(ret,query(son[x][<span class="number">0</span>],key,loc));</span><br><span class="line">	if(son[x][<span class="number">1</span>]&amp;&amp;val[x]&lt;key)ret=min(ret,query(son[x][<span class="number">1</span>],key,loc));</span><br><span class="line">	return ret;</span><br><span class="line">&#125;</span><br><span class="line">int read()&#123;</span><br><span class="line">	int num=<span class="number">0</span>,fh=<span class="number">1</span>;</span><br><span class="line">	char c=getchar();</span><br><span class="line">	while(c&gt;<span class="string">&#x27;9&#x27;</span>||c&lt;<span class="string">&#x27;0&#x27;</span>)&#123;</span><br><span class="line">		if(c==<span class="string">&#x27;-&#x27;</span>)fh=<span class="number">-1</span>;</span><br><span class="line">		c=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	while(c&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;c&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">		num=(num&lt;&lt;<span class="number">3</span>)+(num&lt;&lt;<span class="number">1</span>)+c-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">		c=getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	return num*fh;</span><br><span class="line">&#125;</span><br><span class="line">void write(int x)&#123;</span><br><span class="line">	if(x&lt;<span class="number">0</span>)putchar(<span class="string">&#x27;-&#x27;</span>),x=-x;</span><br><span class="line">	if(x&gt;<span class="number">9</span>)write(x/<span class="number">10</span>);</span><br><span class="line">	putchar(x<span class="comment">%10+&#x27;0&#x27;);</span></span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">	int n,q;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;q;</span><br><span class="line">	while(q--)&#123;</span><br><span class="line">		char op;</span><br><span class="line">		int a,b;</span><br><span class="line">		do op=getchar();while(op!=<span class="string">&#x27;M&#x27;</span>&amp;&amp;op!=<span class="string">&#x27;D&#x27;</span>);</span><br><span class="line">		a=read(),b=read();</span><br><span class="line">		if(op==<span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">			insert(root,b,a,<span class="number">0</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		else &#123;</span><br><span class="line">			int ans=query(root,b,a);</span><br><span class="line">			if(ans==inf)printf(<span class="string">&quot;-1\n&quot;</span>);</span><br><span class="line">			else write(ans),putchar(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>数据结构</tag>
        <tag>平衡树</tag>
      </tags>
  </entry>
  <entry>
    <title>P6219  题解</title>
    <url>/2024/08/06/P6219-solution/</url>
    <content><![CDATA[<h3 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h3><p>将图分为若干层，$1$ 号节点在第一层，$N$ 号节点在最后一层，除 $1$ 号节点外只有相邻的两层之间有边。</p>
<p>手玩一下前两个Subtask，我们可以推断，当我们在新的一层加入 $M$ 个节点时，我们会把所有 $tns(1,x)$ 的总和乘上 $-(M-1)$。 同时，很显然的可以知道， $tns(1,N)&#x3D;-\sum_{i&#x3D;1}^{n-1}tns(1,i)$。如果我们把 $K$ 进行二进制拆分，那么我们只要每次在新的一层加入 $3$ 个节点，我们就能使 $tns(1,x)$ 的总和乘上 $-2$，所有我们一定能用至多 $3+(i-1)\times9$ 个点算出 $K$。如果我们的符号反了，我们只需要在新的一层加入两个节点就可以使总的结果乘上 $-1$。</p>
<p>现在的问题只剩下如何在某一个二进制位加上 $1$ 了。如果这个问题解决了，我们就可以用若干次乘二和加一的操作表示出 $K$ 的二进制拆分，也就是得到答案。如果当前的总和是负的，我们只用在当前层新建一个节点并从 $1$ 号节点向他连边。类似的，如果当前的总和是正的，先将其变为负的，再执行上面的操作。也就是说，我们新开一层，新建 $2$ 个节点，并从上一层的每个节点向他们连边，从而使答案变成负的同时加上 $1$。</p>
<p>该算法能用少于 $16\times log_2(K)$ 的边得到答案。</p>
<p>以上内容由本人翻译自官方题解，并加入了一些自己的理解。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><ul>
<li>从高到低枚举二进制位的时候，要从最高的<strong>第二位</strong>开始枚举。</li>
<li>正数的 $+1$ 操作是放在<strong>新的一层</strong>，该层有 $3$ 个节点（变号有两个，加一有一个），该层需要向下一层建边。</li>
<li>用于判断符号的计数器要初始化为 $-1$。</li>
</ul>
<h3 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h3><figure class="highlight stan"><table><tr><td class="code"><pre><span class="line"><span class="type">vector</span>&lt;<span class="type">int</span>&gt; nd[<span class="number">205</span>];<span class="comment">//存每一层的结点</span></span><br><span class="line"><span class="type">void</span> get(<span class="type">int</span> x)&#123;<span class="comment">//二进制拆分</span></span><br><span class="line">	x=<span class="built_in">abs</span>(x);</span><br><span class="line">	<span class="keyword">while</span>(x)&#123;</span><br><span class="line">		num[wei++]=x&amp;1ll;</span><br><span class="line">		x&gt;&gt;=1ll;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> id(<span class="type">int</span> x,<span class="type">int</span> y)&#123;<span class="comment">//该函数没用</span></span><br><span class="line">	<span class="keyword">return</span> (x-<span class="number">1</span>)*<span class="number">3</span>+y+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> add(<span class="type">int</span> x,<span class="type">int</span> y)&#123;<span class="comment">//记录答案</span></span><br><span class="line">	ax[++tot]=x,ay[tot]=y;</span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">	cin&gt;&gt;k;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">0</span>)&#123;</span><br><span class="line">		printf(<span class="string">&quot;3 2\n1 2\n2 3&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(k==<span class="number">1</span>)&#123;</span><br><span class="line">		printf(<span class="string">&quot;1 0&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	get(k);</span><br><span class="line">	<span class="keyword">if</span>(k&lt;<span class="number">0</span>)k=-k,fh=<span class="number">1</span>;</span><br><span class="line">	nd[wei-<span class="number">1</span>].push_back(++cnt);<span class="comment">//第一层一个结点</span></span><br><span class="line">	pre=wei-<span class="number">1</span>,ce=wei-<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=wei-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">3</span>;j++)&#123;</span><br><span class="line">			++cnt,nd[i].push_back(cnt);<span class="comment">//执行乘操作</span></span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;nd[pre].<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">				add(nd[pre][k],cnt);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		pre=i;</span><br><span class="line">		<span class="keyword">if</span>((k&gt;&gt;i)&amp;1ll)&#123;<span class="comment">//需要加一操作</span></span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">sum</span>&lt;<span class="number">0</span>)&#123;<span class="comment">//当前符号是负的</span></span><br><span class="line">				add(<span class="number">1</span>,++cnt);</span><br><span class="line">				nd[i].push_back(cnt);</span><br><span class="line">				<span class="built_in">sum</span>--;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;<span class="comment">//当前符号是正的</span></span><br><span class="line">				++cnt,ce++,nd[ce].push_back(cnt);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nd[pre].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">					add(nd[pre][j],cnt);</span><br><span class="line">				&#125;</span><br><span class="line">				++cnt,nd[ce].push_back(cnt);</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;nd[pre].<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">					add(nd[pre][j],cnt);</span><br><span class="line">				&#125;<span class="comment">//先变为负的</span></span><br><span class="line">				add(<span class="number">1</span>,++cnt),nd[ce].push_back(cnt);<span class="comment">//再执行加一</span></span><br><span class="line">				pre=ce;</span><br><span class="line">				<span class="built_in">sum</span>++;</span><br><span class="line">				<span class="built_in">sum</span>*=-<span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">sum</span>*=-<span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//cout&lt;&lt;sum&lt;&lt;endl;</span></span><br><span class="line">	<span class="keyword">if</span>((<span class="built_in">sum</span>&gt;<span class="number">0</span>&amp;&amp;fh)||(<span class="built_in">sum</span>&lt;<span class="number">0</span>&amp;&amp;!fh))&#123;<span class="comment">//需要变号</span></span><br><span class="line">		++cnt,nd[wei+<span class="number">1</span>].push_back(cnt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nd[pre].<span class="built_in">size</span>();i++)add(nd[pre][i],cnt);</span><br><span class="line">		++cnt,nd[wei+<span class="number">1</span>].push_back(cnt);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nd[pre].<span class="built_in">size</span>();i++)add(nd[pre][i],cnt);</span><br><span class="line">		++cnt;</span><br><span class="line">		add(cnt-<span class="number">2</span>,cnt),add(cnt-<span class="number">1</span>,cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		++cnt;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nd[pre].<span class="built_in">size</span>();i++)add(nd[pre][i],cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;cnt&lt;&lt;&#x27; &#x27;&lt;&lt;tot&lt;&lt;endl;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=tot;i++)printf(<span class="string">&quot;%lld %lld\n&quot;</span>,ax[i],ay[i]);</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P6648  题解</title>
    <url>/2024/08/06/P6648-solution/</url>
    <content><![CDATA[<p>提供一种不用倒三角形也不用单调队列的做法。</p>
<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>给定一个等边三角形的数字阵，求所有边长为给定值的子三角形的最大值之和。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>看到这题，很容易想到用一个类似 ST 表的东西来做。对于每个点，我们维护以该点为三角形上顶点的子三角形的最大值。参考 ST 表的做法，我们只用维护边长为 $2$ 的次方的子三角形，然后用某种方法拼出查询所需要的三角形就可以了。</p>
<p>怎么拼呢？设查询的三角形边长为 $h$，也就是题目中输入的 $k$，那么显然我们需要用边长为 $2^{\log_2 k}$ 的三角形来拼它。首先需要下图中的三个：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/pzpawrpz.png"></p>
<p>然后我们发现一个严重的问题：中间可能会有一个小三角形没有被覆盖到！</p>
<p>于是我们可以在底部正中间再放一个同样大小的三角形：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/qljylfrr.png"></p>
<p>可是问题并没有完全解决，图中灰色的两块仍然没有被覆盖到啊……</p>
<p>于是我们发扬人类智慧：放一个不行，就放三个！</p>
<p>就有了下面这个：</p>
<p><img src="https://cdn.luogu.com.cn/upload/image_hosting/lgr8ec2x.png"></p>
<p>容易证明，这样一定可以把中间的部分覆盖完（考虑红色三角形边长恰好是大三角形边长一半的情况）。</p>
<h3 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h3><p>想到这些，我兴致勃勃的写完交了一发：MLE。然后发现被毒瘤出题人卡空间了。注意到这题的询问子三角形大小是固定的，因此我们的 ST 表可以滚动起来，保留 $\log_2 k$ 的值就可以了。另外位运算什么的细节也比较多，比较考验仔细程度。</p>
<h3 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,h,val[<span class="number">3005</span>][<span class="number">3005</span>],st[<span class="number">3005</span>][<span class="number">3005</span>][<span class="number">2</span>],lg[<span class="number">3005</span>],k;</span><br><span class="line"><span class="type">long</span> <span class="type">long</span> ans;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=x+h<span class="number">-1</span>,r=y+h<span class="number">-1</span>; </span><br><span class="line">	<span class="type">int</span> u=k&amp;<span class="number">1</span>;</span><br><span class="line">	<span class="type">int</span> ans=<span class="built_in">max</span>(st[x][y][u],<span class="built_in">max</span>(st[l-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][y][u],st[l-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][r-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][u]));</span><br><span class="line">	<span class="keyword">if</span>(k&lt;=<span class="number">1</span>)<span class="keyword">return</span> ans;</span><br><span class="line">	<span class="type">int</span> cha=(h-(<span class="number">1</span>&lt;&lt;k))&gt;&gt;<span class="number">1</span>;</span><br><span class="line">	ans=<span class="built_in">max</span>(<span class="built_in">max</span>(ans,st[l-(<span class="number">1</span>&lt;&lt;k)+<span class="number">1</span>][y+cha][u]),<span class="built_in">max</span>(st[x+cha][y][u],st[x+cha][y+cha][u]));</span><br><span class="line">	<span class="keyword">return</span> ans; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;star.in&quot;</span>,<span class="string">&quot;r&quot;</span>,stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;star.out&quot;</span>,<span class="string">&quot;w&quot;</span>,stdout);</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;h;</span><br><span class="line">	k=<span class="built_in">log2</span>(h);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;val[i][j]);</span><br><span class="line">			st[i][j][<span class="number">0</span>]=val[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> t=<span class="number">1</span>;t&lt;=k;t++)&#123;</span><br><span class="line">		<span class="type">int</span> u=t&amp;<span class="number">1</span>,v=u^<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+(<span class="number">1</span>&lt;&lt;t)<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">				st[i][j][u]=<span class="built_in">max</span>(<span class="built_in">max</span>(st[i][j][v],st[i+(<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>)][j][v]),st[i+(<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>)][j+(<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>)][v]);</span><br><span class="line">				<span class="keyword">if</span>(t&gt;<span class="number">1</span>)&#123;</span><br><span class="line">					st[i][j][u]=<span class="built_in">max</span>(<span class="built_in">max</span>(st[i][j][u],st[i+(<span class="number">1</span>&lt;&lt;t<span class="number">-1</span>)][j+(<span class="number">1</span>&lt;&lt;t<span class="number">-2</span>)][v]),<span class="built_in">max</span>(st[i+(<span class="number">1</span>&lt;&lt;t<span class="number">-2</span>)][j][v],st[i+(<span class="number">1</span>&lt;&lt;t<span class="number">-2</span>)][j+(<span class="number">1</span>&lt;&lt;t<span class="number">-2</span>)][v]));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n-h+<span class="number">1</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">			ans+=<span class="built_in">query</span>(i,j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;ans;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>ST表</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P7231  题解</title>
    <url>/2024/08/06/P7231-solution/</url>
    <content><![CDATA[<p>写了一下午……终于过了。是我太菜了吧……</p>
<h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>在 $N\times N$ 的正方形中放 $k$ 个 $1\times2$ 的骨牌，不能重叠，使得覆盖的数字和最大。</p>
<h2 id="暴力思路"><a href="#暴力思路" class="headerlink" title="暴力思路"></a>暴力思路</h2><p>很容易想到，用费用流来跑。</p>
<p>首先从源点向零号点连一条容量为 $k$ 的边，限制骨牌个数。</p>
<p>对于横纵坐标之和为奇数的点，从零号点向该点连容量为1费用为权值的边；对于横纵坐标之和为偶数的点，从该点向汇点连容量为1费用为权值的边。</p>
<p>对于每个横纵坐标之和为奇数的点，向四周连容量为1费用为0的边。</p>
<p>可是这样建图有一个问题：点数是平方级，边数大概在32000000左右，于时间空间都不可行。</p>
<h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>考虑到有很多边其实根本没有存在的必要，我们其实不用建那么多边。</p>
<p>首先我们预处理出每个点放一块横着的骨牌或竖着的骨牌所能覆盖的两个点的权值和。</p>
<p>然后我们选出权值和最大的50组点集，显然在放置8块以内的骨牌时一定会选择的是这50组最大的点集。</p>
<p>然后在这50组点集中建图跑费用流即可。</p>
<h2 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h2><pre><code class="#include">#define ll long long
#define int long long
using namespace std;
int n,k,s,t,cnt=1,lst[4000005],sum[2005][2005],flow[4000005],dis[4000005],fa[4000005],bian[4000005],inf=0x3f3f3f3f,dl;
ll su,xf;
int x[205],y[205],dian,donex[205],chk[205],tp[205];
bool fl[4000005];
struct edge&#123;
    int f,t,val,cst,lst;
    edge(int f=0,int t=0,int val=0,int cst=0,int lst=0):
        f(f),t(t),val(val),cst(cst),lst(lst)&#123;&#125;;
&#125;e[8000005];
struct node&#123;
    int x,y,val,id;
    bool operator&lt;(node b)const&#123;
        return val&lt;b.val; 
    &#125;
&#125;;
priority_queue&lt;node&gt; q;
void add(int u,int v,int val,int cst)&#123;
    e[++cnt]=edge(u,v,val,cst,lst[u]);
    lst[u]=cnt;
    e[++cnt]=edge(v,u,0,-cst,lst[v]);
    lst[v]=cnt; 
&#125;
bool spfa()&#123;
    memset(dis,inf,sizeof(dis));
    memset(flow,inf,sizeof(flow));
    memset(fl,0,sizeof(fl));
    queue&lt;int&gt; q;
    q.push(s),dis[s]=0,fa[t]=-1;
    while(!q.empty())&#123;
        int u=q.front();
        q.pop(),fl[u]=0;
        for(int i=lst[u];i;i=e[i].lst)&#123;
            int v=e[i].t;
            if(e[i].val&amp;&amp;dis[v]&gt;dis[u]+e[i].cst)&#123;
                dis[v]=dis[u]+e[i].cst;
                fa[v]=u;
                bian[v]=i;
                flow[v]=min(flow[u],e[i].val);
                if(!fl[v])&#123;
                    fl[v]=1;
                    q.push(v);
                &#125;
            &#125;
        &#125;
    &#125;
    return fa[t]!=-1;
&#125;
void MCMF()&#123;
    while(spfa())&#123;
        xf+=dis[t]*flow[t];
        dl+=flow[t];
        int now=t;
        while(now!=s)&#123;
            e[bian[now]].val-=flow[t];
            e[bian[now]^1].val+=flow[t];
            now=fa[now];
        &#125;
    &#125;
&#125;
map&lt;pair&lt;int,int&gt;,int&gt; mp;
signed main()&#123;
    cin&gt;&gt;n&gt;&gt;k;
    s=n*n+1,t=n*n+2;
    add(s,0,k,0);
    for(int i=1;i&lt;=n;i++)&#123;
        for(int j=1;j&lt;=n;j++)&#123;
            cin&gt;&gt;sum[i][j];
            su+=sum[i][j];
        &#125;
    &#125;
    for(int i=1;i&lt;=n;i++)&#123;
        for(int j=1;j&lt;=n;j++)&#123;
            if(i&lt;n)&#123;
                int val=sum[i][j]+sum[i+1][j];
                for(int r=1;r&lt;=50;r++)&#123;
                    if(val&gt;chk[r])&#123;
                        for(int c=50;c&gt;r;c--)&#123;
                            chk[c]=chk[c-1];
                            x[c]=x[c-1],y[c]=y[c-1],tp[c]=tp[c-1];
                        &#125;
                        chk[r]=val,x[r]=i,y[r]=j,tp[r]=0;
                        break;
                    &#125;
                &#125;		
            &#125;
            if(j&lt;n)&#123;
                int val=sum[i][j]+sum[i][j+1];
                for(int r=1;r&lt;=50;r++)&#123;
                    if(val&gt;chk[r])&#123;
                        for(int c=50;c&gt;r;c--)&#123;
                            chk[c]=chk[c-1];
                            x[c]=x[c-1],y[c]=y[c-1],tp[c]=tp[c-1];
                        &#125;
                        chk[r]=val,x[r]=i,y[r]=j,tp[r]=1;
                        break;
                    &#125;
                &#125;
            &#125;
        &#125;
    &#125;
    for(int i=1;i&lt;=50;i++)&#123;
        if(!chk[i])break;
        int i1=x[i],j1=y[i];
        if(tp[i])&#123;
            int i2=x[i],j2=y[i]+1;
            if(!((i1+j1)&amp;1))swap(i1,i2),swap(j1,j2);
            add((i1-1)*n+j1,(i2-1)*n+j2,1,0);
            if(!mp[&#123;i1,j1&#125;])&#123;
                add(0,(i1-1)*n+j1,1,-sum[i1][j1]);
                mp[&#123;i1,j1&#125;]=1;
            &#125;
            if(!mp[&#123;i2,j2&#125;])&#123;
                add((i2-1)*n+j2,t,1,-sum[i2][j2]);
                mp[&#123;i2,j2&#125;]=1;
            &#125;
        &#125;
        else&#123;
            int i2=x[i]+1,j2=y[i];
            if(!((i1+j1)&amp;1))swap(i1,i2),swap(j1,j2);
            add((i1-1)*n+j1,(i2-1)*n+j2,1,0);
            if(!mp[&#123;i1,j1&#125;])&#123;
                add(0,(i1-1)*n+j1,1,-sum[i1][j1]);
                mp[&#123;i1,j1&#125;]=1;
            &#125;
            if(!mp[&#123;i2,j2&#125;])&#123;
                add((i2-1)*n+j2,t,1,-sum[i2][j2]);
                mp[&#123;i2,j2&#125;]=1;
            &#125;	
        &#125;
    &#125;
    MCMF();
    cout&lt;&lt;su+xf;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>费用流</tag>
      </tags>
  </entry>
  <entry>
    <title>P7382  题解</title>
    <url>/2024/08/06/P7382-solution/</url>
    <content><![CDATA[<p>感觉挺奇妙的一道题，思路很巧。</p>
<p>先构造一个数组是给出两个数组的差，再排序，这一点不用多说。</p>
<p>然后我们考虑，要从其中选出 $K$ 个元素修改，那这 $K$ 个元素一定是排序后的数组中两端的元素。</p>
<p>既然这样，那剩下的 $n-K$ 个元素一定是新数组中连续的一段。</p>
<p>于是问题就变成了，在一段数中选择一个数 $x$，使得<br>$$<br>\sum_{i&#x3D;1}^N |A_i-x|$$</p>
<p>最小。由小学奥数得知，这个数应该是这组数的中位数。</p>
<p>至于知道了中位数如何 $O(1)$ 的计算答案，另一篇题解已经讲的很清楚了。</p>
<p>放代码：</p>
<pre><code>#include &lt;bits/stdc++.h&gt;
#define int long long
using namespace std;
int a[100005],b[100005],cha[100005],n,k,sum[100005],ans,inf=0x3f3f3f3f3f3f3f3f;
signed main()&#123;
    cin&gt;&gt;n&gt;&gt;k;
    for(int i=1;i&lt;=n;i++)cin&gt;&gt;a[i];
    for(int i=1;i&lt;=n;i++)cin&gt;&gt;b[i],cha[i]=a[i]-b[i];
    sort(cha+1,cha+n+1);
    for(int i=1;i&lt;=n;i++)sum[i]=sum[i-1]+cha[i];
    k=n-k,ans=inf;
    for(int i=1;i+k-1&lt;=n;i++)&#123;
        int r=i+k-1;
        int mid=(i+r)&gt;&gt;1;
        int now=cha[mid]*(mid-i+1)-(sum[mid]-sum[i-1])+(sum[r]-sum[mid])-cha[mid]*(r-mid);
        ans=min(ans,now);
    &#125;
    cout&lt;&lt;ans;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>构造</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P8048  题解</title>
    <url>/2024/08/06/P8048-solution/</url>
    <content><![CDATA[<p>仔细读题，会发现，向右的变色龙在碰撞前后是没有改变颜色的。</p>
<p>抓住这一点，产生了本题的做法：</p>
<h2 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h2><p>对于每一只向右的变色龙，只需要在该颜色中加上这只变色龙走的路程。</p>
<p>对于每一只向左的变色龙，我们枚举在它左边的向右的变色龙，然后依次更新答案、更新颜色。</p>
<p>这样做复杂度是 $O(n^2)$ 的。</p>
<p>代码如下：</p>
<figure class="highlight plaintext"><figcaption><span><bits/stdc++.h></span></figcaption><table><tr><td class="code"><pre><span class="line">#define int long long</span><br><span class="line">using namespace std;</span><br><span class="line">int n,k,l,cnt;</span><br><span class="line">double ans[45];</span><br><span class="line">struct monola&#123;</span><br><span class="line">	int st,cl;</span><br><span class="line">	char tp;</span><br><span class="line">&#125;ml[100005],yml[100005];</span><br><span class="line">bool cmp(monola x,monola y)&#123;</span><br><span class="line">	return x.st&gt;y.st;</span><br><span class="line">&#125;</span><br><span class="line">signed main()&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;k&gt;&gt;l;</span><br><span class="line">	for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		scanf(&quot;%lld%lld%s&quot;,&amp;ml[i].st,&amp;ml[i].cl,&amp;ml[i].tp);</span><br><span class="line">		if(ml[i].tp==&#x27;D&#x27;)&#123;</span><br><span class="line">			ans[ml[i].cl]+=l-ml[i].st;</span><br><span class="line">			yml[++cnt]=ml[i];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	sort(yml+1,yml+cnt+1,cmp);</span><br><span class="line">	for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(ml[i].tp==&#x27;D&#x27;)continue;</span><br><span class="line">		double pre=ml[i].st,nxt;</span><br><span class="line">		int nowcl=ml[i].cl;</span><br><span class="line">		for(int j=1;j&lt;=cnt;j++)&#123;</span><br><span class="line">			if(ml[i].st&lt;yml[j].st)continue;</span><br><span class="line">			nxt=(ml[i].st+yml[j].st)*1.0/2;</span><br><span class="line">			ans[nowcl]+=pre-nxt;</span><br><span class="line">			pre=nxt;</span><br><span class="line">			nowcl=(nowcl+yml[j].cl)%k;</span><br><span class="line">		&#125;</span><br><span class="line">		ans[nowcl]+=pre;</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=0;i&lt;k;i++)&#123;</span><br><span class="line">		printf(&quot;%.1lf\n&quot;,ans[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h2><p>这样做的瓶颈在于，我们每一只向左的变色龙都需要枚举。然而我们其实并不关心到底是哪只变色龙贡献的答案，因此我们可以用计数器记下当前位置每种颜色向左的变色龙的数目。</p>
<p>具体地说，我们从右往左枚举每一只向右的变色龙，若两只向右的变色龙中间的距离为 $dis$，则每种颜色的答案应该加上 $dis&#x2F;2\times num_i$，其中 $num_i$ 为颜色 $i$ 的向左的变色龙初始位置在当前枚举的向右的变色龙右边的数目。然后我们不断更新 $num_i$。</p>
<p>由于每只向左的变色龙只会被加进计数器一次，所以总的复杂度降到了 $O(n\times k)$ 。</p>
<h2 id="实现细节"><a href="#实现细节" class="headerlink" title="实现细节"></a>实现细节</h2><p>注意每只向左的变色龙在遇到最左边的向右变色龙后还要走到木板左端，此时需要加上这部分的答案。可以预处理出每只向左的变色龙最后的颜色进行计算。</p>
<h2 id="丑陋的代码"><a href="#丑陋的代码" class="headerlink" title="丑陋的代码"></a>丑陋的代码</h2><pre><code class="#include">#define int long long
using namespace std;
int n,k,l,cnt,cmt,num[45],lint[45],newcl,lastcl[100005];
double ans[45];
struct monola&#123;
    int st,cl;
    char tp;
&#125;ml[100005],yml[100005],zml[100005];
bool cmp(monola x,monola y)&#123;
    return x.st&gt;y.st;
&#125;
signed main()&#123;
//	freopen(&quot;1.in&quot;,&quot;r&quot;,stdin);
//	freopen(&quot;1.out&quot;,&quot;w&quot;,stdout);
    cin&gt;&gt;n&gt;&gt;k&gt;&gt;l;
    for(int i=1;i&lt;=n;i++)&#123;
        scanf(&quot;%lld%lld%s&quot;,&amp;ml[i].st,&amp;ml[i].cl,&amp;ml[i].tp);
        if(ml[i].tp==&#39;D&#39;)&#123;
            ans[ml[i].cl]+=l-ml[i].st;
            yml[++cnt]=ml[i];
            newcl=(newcl+ml[i].cl)%k;
        &#125;
        else &#123;
            zml[++cmt]=ml[i];
            if(cnt)ans[(ml[i].cl+newcl)%k]+=(ml[i].st+yml[1].st)*1.0/2;
            else ans[ml[i].cl]+=ml[i].st;
        &#125;
    &#125;
    sort(yml+1,yml+cnt+1,cmp);
    sort(zml+1,zml+cmt+1,cmp);
    int i=1;
    while(i&lt;=cmt&amp;&amp;zml[i].st&gt;yml[1].st)&#123;
        ans[zml[i].cl]+=(zml[i].st-yml[1].st)*1.0/2;
        num[(zml[i].cl+yml[1].cl)%k]++;
        i++;
    &#125;
    for(int j=2;j&lt;=cnt;j++)&#123;
        for(int r=0;r&lt;k;r++)&#123;
            ans[r]+=num[r]*(yml[j-1].st-yml[j].st)*1.0/2;
        &#125;
        while(i&lt;=cmt&amp;&amp;zml[i].st&gt;yml[j].st)&#123;
            ans[zml[i].cl]+=(zml[i].st-yml[j].st)*1.0/2;
            num[zml[i].cl]++;
            i++;
        &#125;
        for(int r=0;r&lt;k;r++)&#123;
            lint[(r+yml[j].cl)%k]=num[r];
        &#125;
        for(int r=0;r&lt;k;r++)num[r]=lint[r];
    &#125;
    
    for(int i=0;i&lt;k;i++)&#123;
        printf(&quot;%.1lf\n&quot;,ans[i]);
    &#125;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>题解</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P8299  题解</title>
    <url>/2024/08/06/P8299-solution/</url>
    <content><![CDATA[<h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>你需要构造一个 $1∼N$ 的排列，满足 $M$ 个要求，要求形式是给出 $l,r$ 中的最大值或最小值。</p>
<h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>不难看出，这是一个二分图匹配问题。我们要给每个位置匹配一个数。那么怎么建边呢？我们发现根据题目给出的要求，好像不是很好直接看出每个位置能匹配哪些数。不过正难则反，题目给出的要求是很容易看出每个位置不能匹配哪些数的。显然如果题目给出 $[l,r]$ 中最小的数是 $x$，那么这些位置不能与任何小于 $x$ 的数匹配。大于同理。</p>
<p>这样就够了吗？其实是有问题的。我们这样无法保证 $x$ 这个数一定被分配到 $[l,r]$ 这个区间里。所以我们还有让所有不在 $[l,r]$ 的数都不能匹配到 $x$，这样就保证满足题目条件了。</p>
<p>至于二分图匹配部分，可以用匈牙利，当然我用的 Dinic。</p>
<h3 id="丑陋的代码（跑得贼慢）"><a href="#丑陋的代码（跑得贼慢）" class="headerlink" title="丑陋的代码（跑得贼慢）"></a>丑陋的代码（跑得贼慢）</h3><pre><code>#include &lt;bits/stdc++.h&gt;
#define int long long
using namespace std;
bool ok[205][205];
int n,m,cnt=1,lst[415],s,t,inf=0x3f3f3f3f,now[415],dep[415],flow,seat[415]; 
struct edge&#123;
    int f,t,val,lst;
    edge(int f=0,int t=0,int val=0,int lst=0):
        f(f),t(t),val(val),lst(lst)&#123;&#125;; 
&#125;e[400005];
void add(int u,int v,int w)&#123;
    e[++cnt]=edge(u,v,w,lst[u]);lst[u]=cnt;
    e[++cnt]=edge(v,u,0,lst[v]);lst[v]=cnt;
&#125;
bool bfs()&#123;
    memset(dep,-1,sizeof(dep));
    dep[s]=0;
    queue&lt;int&gt; q;
    q.push(s);
    while(!q.empty())&#123;
        int u=q.front();
        q.pop();
        now[u]=lst[u];
        for(int i=lst[u];i;i=e[i].lst)&#123;
            int v=e[i].t;
            if(dep[v]==-1&amp;&amp;e[i].val)&#123;
                dep[v]=dep[u]+1;
                q.push(v);
            &#125;
        &#125;
    &#125; 
    return dep[t]!=-1;
&#125;
int dfs(int u,int in)&#123;
    if(u==t)return in;
    int out=0;
    for(int i=now[u];i;i=e[i].lst)&#123;
        now[u]=i;
        int v=e[i].t;
        if(dep[v]==dep[u]+1&amp;&amp;e[i].val)&#123;
            int go=dfs(v,min(in,e[i].val));
            in-=go,out+=go;
            e[i].val-=go,e[i^1].val+=go;
            if(!in)break;
        &#125;
    &#125;
    if(!out)dep[u]=-1;
    return out;
&#125;
signed main()&#123;
    cin&gt;&gt;n&gt;&gt;m;
    for(int i=1;i&lt;=m;i++)&#123;
        int op,u,v,x;
        cin&gt;&gt;op&gt;&gt;u&gt;&gt;v&gt;&gt;x;
        if(op==1)&#123;
            for(int j=u;j&lt;=v;j++)&#123;
                for(int k=x+1;k&lt;=n;k++)&#123;
                    ok[j][k]=1;
                &#125;
            &#125;
            for(int j=1;j&lt;u;j++)&#123;
                ok[j][x]=1;
            &#125;
            for(int j=v+1;j&lt;=n;j++)&#123;
                ok[j][x]=1;
            &#125;
        &#125;
        else&#123;
            for(int j=u;j&lt;=v;j++)&#123;
                for(int k=1;k&lt;x;k++)&#123;
                    ok[j][k]=1;
                &#125;
            &#125;
            for(int j=1;j&lt;u;j++)&#123;
                ok[j][x]=1;
            &#125;
            for(int j=v+1;j&lt;=n;j++)&#123;
                ok[j][x]=1;
            &#125;
        &#125;
    &#125;
    s=0,t=n*2+1;
    for(int i=1;i&lt;=n;i++)&#123;
        add(s,i,1);
        add(i+n,t,1);
        for(int j=1;j&lt;=n;j++)&#123;
            if(!ok[i][j])add(i,j+n,1);
        &#125;
    &#125;
    while(bfs())&#123;
        flow+=dfs(s,inf);
    &#125;
    if(flow!=n)puts(&quot;-1&quot;);
    else&#123;
        for(int i=2;i&lt;=cnt;i++)&#123;
            if(!e[i].val&amp;&amp;e[i^1].val&amp;&amp;e[i].f&lt;=n&amp;&amp;e[i].f&amp;&amp;e[i].t&gt;n&amp;&amp;e[i].t!=t)&#123;
                seat[e[i].f]=e[i].t;
            &#125;
        &#125;
        for(int i=1;i&lt;=n;i++)cout&lt;&lt;seat[i]-n&lt;&lt;&#39; &#39;;
    &#125;
    return 0;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>题解</tag>
        <tag>二分图</tag>
      </tags>
  </entry>
  <entry>
    <title>洛谷P8300  题解</title>
    <url>/2024/08/06/P8300-solution/</url>
    <content><![CDATA[<p>分块题。由于笔者对于维护凸包之类的东西掌握的不是特别好，而李超树在解决斜率相关的问题时又几乎是万能<del>（不用推式子）</del>的，因此本题解采用分块 + 李超树的做法。</p>
<p>思路是很简单的：单点修改的时候，暴力重构一个块内的李超树；区间查询时散块暴力，整块直接在李超树上查询就好了。不过这个东西的复杂度是 $O(n\sqrt n\log {\sqrt n}) $ 的，可能没有那么优秀。</p>
<p>这样这题细节就很少了。但要注意输入中可能有 $A&gt;B$  的情况要交换。</p>
<p>代码（开 O2 通过）：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lid (tr[id].lson)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rid (tr[id].rson)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mid ((L+R)&gt;&gt;1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n,m,yu=<span class="number">336</span>,rt[<span class="number">300036</span>],tng[<span class="number">3000005</span>],top,cqt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> t,k,b;</span><br><span class="line">&#125;nd[<span class="number">100005</span>];</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">f</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1ll</span>*nd[id].k*x+nd[id].b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">tree</span>&#123;</span><br><span class="line">	<span class="type">int</span> id,flg,lson,rson;</span><br><span class="line">&#125;tr[<span class="number">3000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	tng[++top]=id;</span><br><span class="line">	<span class="keyword">if</span>(lid)<span class="built_in">clear</span>(lid);</span><br><span class="line">	<span class="keyword">if</span>(rid)<span class="built_in">clear</span>(rid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">newnode</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(top)&#123;</span><br><span class="line">		tr[tng[top]]=tr[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">return</span> tng[top--];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ++cqt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> t,<span class="type">int</span> L=<span class="number">1</span>,<span class="type">int</span> R=<span class="number">1e6</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!id)&#123;</span><br><span class="line">		id=<span class="built_in">newnode</span>();</span><br><span class="line">		tr[id].id=t;</span><br><span class="line">		<span class="keyword">return</span> id;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">f</span>(t,mid)&gt;<span class="built_in">f</span>(tr[id].id,mid))<span class="built_in">swap</span>(t,tr[id].id);</span><br><span class="line">	<span class="keyword">if</span>(L==R)<span class="keyword">return</span> id;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">f</span>(t,L)&gt;<span class="built_in">f</span>(tr[id].id,L))lid=<span class="built_in">modify</span>(lid,t,L,mid);</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">f</span>(t,R)&gt;<span class="built_in">f</span>(tr[id].id,R))rid=<span class="built_in">modify</span>(rid,t,mid+<span class="number">1</span>,R);</span><br><span class="line">	<span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> pos,<span class="type">int</span> L=<span class="number">1</span>,<span class="type">int</span> R=<span class="number">1e6</span>)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!id)<span class="keyword">return</span> <span class="number">-1e18</span>;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> ret=<span class="built_in">f</span>(tr[id].id,pos);</span><br><span class="line">	<span class="keyword">if</span>(L==R)<span class="keyword">return</span> ret;</span><br><span class="line">	<span class="keyword">if</span>(pos&lt;=mid)<span class="keyword">return</span> <span class="built_in">max</span>(ret,<span class="built_in">query</span>(lid,pos,L,mid));</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">max</span>(ret,<span class="built_in">query</span>(rid,pos,mid+<span class="number">1</span>,R)); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">rebuild</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> l=<span class="built_in">max</span>(<span class="number">1ll</span>,id*yu),r=<span class="built_in">min</span>(n,(id+<span class="number">1</span>)*yu<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">if</span>(rt[id])<span class="built_in">clear</span>(rt[id]);rt[id]=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(nd[i].t)rt[id]=<span class="built_in">modify</span>(rt[id],i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">		<span class="type">int</span> op;<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;op);</span><br><span class="line">		<span class="keyword">if</span>(op==<span class="number">1</span>)&#123;</span><br><span class="line">			<span class="type">int</span> t,k,z,s;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;t,&amp;k,&amp;z,&amp;s);</span><br><span class="line">			nd[k].t=t,nd[k].k=z,nd[k].b=s-z*t;</span><br><span class="line">			<span class="built_in">rebuild</span>(k/yu);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="type">int</span> t,a,b;<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;t,&amp;a,&amp;b);</span><br><span class="line">			<span class="type">int</span> bl=a/yu,br=b/yu;<span class="type">long</span> <span class="type">long</span> ans=<span class="number">-1e18</span>;<span class="keyword">if</span>(a&gt;b)<span class="built_in">swap</span>(a,b),<span class="built_in">swap</span>(bl,br);</span><br><span class="line">			<span class="keyword">if</span>(bl==br)&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;=b;i++)<span class="keyword">if</span>(nd[i].t)ans=<span class="built_in">max</span>(ans,<span class="built_in">f</span>(i,t));</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=a;i&lt;(bl+<span class="number">1</span>)*yu;i++)<span class="keyword">if</span>(nd[i].t)ans=<span class="built_in">max</span>(ans,<span class="built_in">f</span>(i,t));</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=br*yu;i&lt;=b;i++)<span class="keyword">if</span>(nd[i].t)ans=<span class="built_in">max</span>(ans,<span class="built_in">f</span>(i,t));</span><br><span class="line">				<span class="keyword">for</span>(<span class="type">int</span> i=bl+<span class="number">1</span>;i&lt;br;i++)&#123;</span><br><span class="line">					ans=<span class="built_in">max</span>(ans,<span class="built_in">query</span>(rt[i],t));</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span>(ans&gt;<span class="number">-1e18</span>)<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,ans);</span><br><span class="line">			<span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;nema&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>题解</tag>
        <tag>李超树</tag>
      </tags>
  </entry>
  <entry>
    <title>从 0 开始到 PPO</title>
    <url>/2025/05/19/PPO/</url>
    <content><![CDATA[<h3 id="一、问题定义与基本概念"><a href="#一、问题定义与基本概念" class="headerlink" title="一、问题定义与基本概念"></a>一、问题定义与基本概念</h3><p>马尔科夫决策过程 (MDP)：状态 $s$，行为 $a$，奖励函数 $r$​，转移算子 $t&#x3D;p(s’|s,a)$。</p>
<p>策略：给定当前状态 $s$ 和参数 $\theta$，策略是一种概率分布 $\pi_\theta(a|s)$​。</p>
<p>目标：$\theta^\star&#x3D;\arg\max_\theta E[\sum_t r(s_t,a_t)]&#x3D;\arg\max J(\theta)$​。</p>
<p>Q 函数：$Q(s_t,a_t)&#x3D;\sum <em>{t’&#x3D;t}^TE</em>{\pi_\theta}[r(s_{t’},a_{t’})|s_t,a_t]$，即在状态 $s_t$ 采取动作 $a_t$ 的奖励期望</p>
<p>V 函数：$V(s_t)&#x3D;\sum <em>{t’&#x3D;t}^TE</em>{\pi_\theta}[r(s_{t’},a_{t’})|s_t]&#x3D;E_{a_t\sim \pi_\theta(a_t|s_t)}[Q(s_t,a_t)]$，即在状态 $s_t$ 的奖励期望</p>
<p>A 函数：$A(s_t,a_t)&#x3D;Q(s_t,a_t)-V(s_t)$，即某个动作比平均好多少</p>
<h3 id="二、Value-based-方法与-Policy-based-方法"><a href="#二、Value-based-方法与-Policy-based-方法" class="headerlink" title="二、Value-based 方法与 Policy-based 方法"></a>二、Value-based 方法与 Policy-based 方法</h3><h5 id="Value-based"><a href="#Value-based" class="headerlink" title="Value-based"></a>Value-based</h5><p>在这种方法中，我们尝试估计 $Q(s_t,a_t)$，并采用某种固定的策略（例如，每次选择 $Q$ 估值最高的行动，或以 $\varepsilon$ 的概率选择 $Q$ 估值最高的行动，以 $1-\varepsilon$ 的概率随机行动 ）采样来更新我们的估计。</p>
<p>具体的，当我们获得一条新轨迹时，我们用 $Q_{n+1}&#x3D;Q_n+\alpha[R_n-Q_n]$ 来更新 $Q$​。这里的采样是 Off-Policy 的，即任意的策略均可更新 $Q$ 值表。</p>
<p>在推理时，只需采取 $Q$​ 值最大的行动即可。这里的最优化问题有多种解法，如梯度下降、二次函数先验假设、网络学习等等。</p>
<h5 id="Policy-based"><a href="#Policy-based" class="headerlink" title="Policy-based"></a>Policy-based</h5><p>在这种方法中，我们（暂时）不考虑 $Q$，转而优化 $\pi_\theta(a_t|s_t)$。对目标函数 $J(\theta)$ 求导得：<br>$$<br>\nabla_\theta J(\theta)&#x3D;E[(\sum _{t&#x3D;1}^T\nabla_\theta \log\pi_\theta(a_t|s_t))(\sum _{t&#x3D;1}^Tr(s_t,a_t))]<br>$$<br>直接更新 $\theta’&#x3D;\theta+\alpha \nabla_\theta J(\theta)$​ 的算法称为 REINFORCE 算法，由于期望的获取依赖采样，因此该算法具有低偏差、高方差的特点。</p>
<p>改进一（Causality）：将来不能影响过去，因此在时刻 $t$ 只需考虑 $t$ 之后的奖励。即 $\nabla_\theta J(\theta)&#x3D;\frac1N\sum <em>{i&#x3D;1}^N\sum <em>{t&#x3D;1}^T\nabla_\theta\log\pi_\theta(a</em>{i,t}|s</em>{i,t})(\sum <em>{t’&#x3D;t}^T r(s</em>{i,t’},a_{i,t’}))$。</p>
<p>改进二（Baseline）：当 Reward 统一减去某个 $b$ 值时，策略偏差应该不变。</p>
<h3 id="三、Actor-Critic-方法"><a href="#三、Actor-Critic-方法" class="headerlink" title="三、Actor-Critic 方法"></a>三、Actor-Critic 方法</h3><p>在上面的基线改进中，如果令 $b&#x3D;V(s_t)$，那么策略梯度为<br>$$<br>\nabla_\theta J(\theta)&#x3D;\frac1N \sum <em>{i&#x3D;1}^n\sum</em>{t&#x3D;1}^T\nabla_\theta\log \pi_\theta(a_{i,t}|s_{i,t})(\sum <em>{t’&#x3D;t}^T A(s</em>{i,t’},a_{i,t’}))<br>$$<br>如果我们能对 $V(s_t)$ 得到一个好的估计，那么问题可以得到解决。估计 $V(s_t)$ 或 $Q(s_t,a_t)$ 的模型称为评论家（Critic），而根据评论家的估计调整策略的模型称为演员（Actor）。可以看出，Actor-Critic 方法是把 Value-based 的方法和 Policy-based 的方法结合起来。</p>
<p>评论家模型可以通过蒙特卡洛的方法采样 $N$ 条轨迹，近似为<br>$$<br>V(s_t)&#x3D;\frac1N\sum <em>{i&#x3D;1}^N\sum <em>{t’&#x3D;t}^Tr(s</em>{t’},a</em>{t’})<br>$$<br>也可以使用神经网络学习的方法：利用预测的 $V(s_{t+1})$ 作为目标，优化 $||V(s_t)-(r(s_t,a_t)+V(s_{t+1}))||_2$。该方法称为自举（左脚踩右脚螺旋升天）。 </p>
<p>以下是标准的 Actor-Critic 算法（带衰减因子）的流程：</p>
<ol>
<li>从 $\pi_\theta(a|s)$ 中采样若干轨迹 $(s_i,a_i)$</li>
<li>用得到的奖励更新评论家网络 $V(s_t)$</li>
<li>估计优势函数 $A(s_i,a_i)&#x3D;r(s_i,a_i)+\gamma V(s_i’)-V(s_i)$</li>
<li>计算策略梯度 $\nabla_\theta J(\theta)&#x3D;\sum \nabla_\theta \log\pi_\theta(a_i|s_i)A(s_i,a_i)$</li>
<li>更新策略 $\theta &#x3D;\theta+\alpha \nabla_\theta J(\theta)$</li>
</ol>
<p>在网络设计中，可以让演员和评论家共享一部分网络层级，从而节省计算开销。</p>
<p>优势函数的改进：回顾标准的蒙特卡洛策略梯度算法，若将 $V(s_t)$ 作为基线，则优势函数应为 $\sum <em>{t’&#x3D;t}^T\gamma^{t’-t}r(s</em>{i,t’},a_{i,t’})-V(s_t)$，具有无偏、高方差的特点；而在 Actor-Critic 算法中，采用 $r(s_i,a_i)+\gamma V(s_i’)-V(s_i)$ 作为优势函数（TD），具有有偏差、低方差的特点。若将二者融合，则可平衡偏差与方差：令 $\delta_t&#x3D;r(s_t,a_t)+\gamma V(s_{t+1})-V(s_t)$，则 $A_{GAE}(s_t,a_t)&#x3D;\sum <em>{t’&#x3D;t}^T(\gamma\lambda)^{t’-t}\delta</em>{t’}$，其中 $\lambda&#x3D;0$ 时该方法退化到 TD，$\lambda&#x3D;1$ 时该方法退化到蒙特卡洛。</p>
<h3 id="四、PPO-算法"><a href="#四、PPO-算法" class="headerlink" title="四、PPO 算法"></a>四、PPO 算法</h3><p>标准的策略梯度算法是同策略（On-policy）的，也就意味着每次策略更新以后，之前采样的所有轨迹 $(s_t,a_t)$ 全部作废，必须重新采样。而与此同时，价值函数的估计是异策略（Off-policy）的，也就意味着不同策略的采样都可以用来更新评论家网络。显然异策略的模型数据使用更充分，如何改进 Actor-Critic 算法使其称为异策略的学习？</p>
<p>经过数学推导，异策略的策略梯度应写作：<br>$$<br>\nabla_{\theta’}J(\theta’)&#x3D;E[\sum <em>{t&#x3D;1}^T\nabla</em>{\theta’}\log\pi_{\theta’}(a_t|s_t)(\prod_{t’&#x3D;1}^t\frac{\pi <em>{\theta’}(a</em>{t’}|s_{t’})}{\pi_\theta(a_{t’}|s_{t’})})(\sum <em>{t’&#x3D;t}^Tr(s</em>{t’},a_{t’})(\prod_{t’’&#x3D;t}^{t’}\frac{\pi_{\theta’}(a_{t’’}|s_{t’’})}{\pi_\theta(a_{t’’}|s_{t’’})}))]<br>$$<br>如果忽略掉末项，可以简写为 $J(\theta)&#x3D;E_t[\frac{\pi_\theta(a_t|s_t)}{\pi_{\theta_{old}}(a_t|s_t)}A_t]$。如果 $\frac{\pi_\theta}{\pi_{\theta_{old}}}$ 比值过大，则轨迹无效。</p>
<p>TRPO 算法：在 $E_t[KL[\pi_{\theta_{old}}(\cdot|s_t),\pi_\theta(\cdot|s_t)]]\le \delta$ 的硬约束下，求解 $J(\theta)$ 的最优化问题。</p>
<p>PPO 算法：通过截断函数与自适应 KL 惩罚项的软约束求解 $J(\theta)$ 的最优化问题。</p>
<h5 id="截断函数"><a href="#截断函数" class="headerlink" title="截断函数"></a>截断函数</h5><p>令 $r_t(\theta)&#x3D;\frac{\pi_\theta(a_t|s_t)}{\pi_{\theta_{old}}(a_t|s_t)}$，则带截断的目标函数为<br>$$<br>L(\theta)&#x3D;E_t[\min(r_t(\theta)A_t,clip(r_t(\theta),1-\varepsilon,1+\varepsilon)A_t)]<br>$$<br>其含义为：当两个策略的分布差距很大，也即 $r_t(\theta)&gt;1+\varepsilon$ 或 $r_t(\theta)&lt;1-\varepsilon$ 时，超出项会被抹平，从而在求策略梯度时梯度为零，不会对策略更新产生影响。</p>
<h5 id="自适应-KL-惩罚项"><a href="#自适应-KL-惩罚项" class="headerlink" title="自适应 KL 惩罚项"></a>自适应 KL 惩罚项</h5><p>$$<br>L(\theta)&#x3D;E_t[r_t(\theta)A_t-\beta KL[\pi_{\theta_{old}}(\cdot|s_t),\pi_{\theta}(\cdot|s_t)]]<br>$$</p>
<p>其中，$\beta$ 随着相邻两次策略的 KL 散度值自适应变化。当相邻两次的 KL 散度值较小时，$\beta$ 相应减小；反之 $\beta$ 增大。</p>
]]></content>
      <tags>
        <tag>RL</tag>
      </tags>
  </entry>
  <entry>
    <title>后缀数组与后缀自动机</title>
    <url>/2024/08/06/SA_SAM/</url>
    <content><![CDATA[<h2 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h2><h4 id="基础模板"><a href="#基础模板" class="headerlink" title="基础模板"></a>基础模板</h4><p>后缀数组 $sa[i]$：将一个字符串的每个后缀排序后第 $i$ 小的后缀的编号。</p>
<p>辅助数组 $rank[i]$：后缀 $i$ 的排名</p>
<p>对于一个字符串，我们可以在 $O(n\log n)$ 的时间里得到其后缀数组。主要思想是倍增与基数排序。模板如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">char</span> c;</span><br><span class="line">	<span class="type">int</span> id;</span><br><span class="line">&#125;nd[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> x.c&lt;y.c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cm</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">return</span> rk[sa[x]]==rk[sa[y]]&amp;&amp;rk[sa[x]+len]==rk[sa[y]+len];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SA</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)nd[i].c=str[i],nd[i].id=i;</span><br><span class="line"><span class="comment">//	for(int i=2;i&lt;=n;i++)lg2[i]=lg2[i/2]+1;</span></span><br><span class="line">	<span class="built_in">sort</span>(nd+<span class="number">1</span>,nd+n+<span class="number">1</span>,cmp);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		sa[i]=nd[i].id;</span><br><span class="line">		<span class="keyword">if</span>(nd[i].c==nd[i<span class="number">-1</span>].c)rk[nd[i].id]=cnt;</span><br><span class="line">		<span class="keyword">else</span> rk[nd[i].id]=++cnt;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,m=<span class="number">128</span>;<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>&lt;=n;i++,m=cnt)&#123;</span><br><span class="line">		len=<span class="number">1</span>&lt;&lt;i<span class="number">-1</span>,cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=n;j&gt;n-len;j--)id[++cnt]=j;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(sa[j]&gt;len)id[++cnt]=sa[j]-len;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)tng[j]=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			tng[id1[j]=rk[id[j]]]++;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=m;j++)tng[j]+=tng[j<span class="number">-1</span>];</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=n;j;j--)sa[tng[id1[j]]--]=id[j];</span><br><span class="line">		cnt=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">cm</span>(j,j<span class="number">-1</span>))tmp[sa[j]]=cnt;</span><br><span class="line">			<span class="keyword">else</span> tmp[sa[j]]=++cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)rk[j]=tmp[j];</span><br><span class="line">		<span class="keyword">if</span>(cnt==n)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=n;j++)sa[rk[j]]=j;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>基于后缀数组，我们可以得到一个非常有用的的东西：Height 数组。</p>
<p>$Height[i]$：排名为 $i$ 的后缀与排名为 $i-1$ 的后缀的最长公共前缀。</p>
<p>容易知道，$Height[rank[i]]\ge Height[rank[i-1]]-1$。</p>
<p>根据这一定理，我们可以线性地求出 Height 数组。</p>
<p>代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>,k=<span class="number">0</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(!rk[i])<span class="keyword">continue</span>;</span><br><span class="line">	<span class="keyword">if</span>(k)k--;</span><br><span class="line">	<span class="keyword">while</span>(str[i+k]==str[sa[rk[i]<span class="number">-1</span>]+k])k++;</span><br><span class="line">	ht[rk[i]]=k;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Height-数组的灵活运用"><a href="#Height-数组的灵活运用" class="headerlink" title="Height 数组的灵活运用"></a>Height 数组的灵活运用</h4><p>以上内容都是非常基础、模板化的，后缀数组的核心在于灵活地运用 Height 数组，从而解决各种与子串相关的问题。</p>
<p>这其中最重要的定理就是：两个后缀 $l,r$ 的最长公共前缀等于 $\min\limits_{i&#x3D;rank[l]+1}^{rank[j]} Height_i$。</p>
<p>有了这个定理，我们只要预处理出 ST 表，就可以 $O(1)$ 的查询两个后缀的 LCP 了！（顺便提一句，用哈希+二分可以在 $O(log n)$ 的时间内达成同样的目的）。</p>
<p>与之相关的有若干经典问题，包括<strong>不同子串的数目</strong>，<strong>出现至少 k 次的子串的最大长度</strong>，<strong>连续的若干个相同子串</strong>等等，因为较为简单，可以在<a href="https://oi-wiki.org/string/sa/#height-%E6%95%B0%E7%BB%84">OI-Wiki</a>上自行查阅，不再赘述。</p>
<p>这部分的例题有：<a href="https://www.luogu.com.cn/problem/P1117">NOI2016优秀的拆分</a>，<a href="https://www.luogu.com.cn/problem/P2178">NOI2015品酒大会</a>，<a href="https://www.luogu.com.cn/problem/P4248">AHOI2013差异</a>等。</p>
<p>通过这些题目，我们可以总结出后缀数组求解子串问题的主要思路：</p>
<ul>
<li>构建出后缀数组，得到 Height 数组；</li>
<li>根据后缀数组的性质，按照某种顺序统计相邻元素的贡献进行求解：<ul>
<li>按照排序的顺序，利用 ST 表求解。这一方法多用于统计与长度相关的<strong>多个</strong>子串问题。</li>
<li>按照 Height 数组的顺序，利用并查集求解。这一方法多用于统计与长度相关的<strong>两个</strong>子串问题。</li>
</ul>
</li>
</ul>
<p>当然，很多题目在已经求出 Height 数组之后会变成其他经典问题，要注意识别。</p>
<h5 id="几个相关的小练习"><a href="#几个相关的小练习" class="headerlink" title="几个相关的小练习"></a>几个相关的小练习</h5><h6 id="SDOI2016-生成魔咒"><a href="#SDOI2016-生成魔咒" class="headerlink" title="SDOI2016  生成魔咒"></a>SDOI2016  生成魔咒</h6><p>题意：每次增加一个字符，求当前字符串的本质不同子串个数。</p>
<p>考虑在末尾加字符对后缀改变太大，我们将串翻转。变成在开头加字符后，我们要统计当前字符开头的与之前不同的子串个数。我们每次把已经统计的串扔进 set，则只用统计与当前的排名相邻的串的贡献（相邻两个一定是重复的最多的）。则每次的答案是之前的答案加上当前的子串总数减去与排名前后的重复子串个数加上排名前后的贡献（之前减掉了，现在加回来）。</p>
<h6 id="TJOI2019-甲苯先生和大中锋的字符串"><a href="#TJOI2019-甲苯先生和大中锋的字符串" class="headerlink" title="TJOI2019  甲苯先生和大中锋的字符串"></a>TJOI2019  甲苯先生和大中锋的字符串</h6><p>题意：将字符串中恰好出现 $k$ 次的子串按照长度分类，求数量最多的那类的长度（相同取最大）。</p>
<p>我们按后缀顺序枚举每个后缀，看这个后缀的哪些前缀可能构成贡献。对于后缀 $[i,i+k-1]$，他们可能构成贡献的上界应该是这个区间内 Height 数组的最小值。下界呢？为了确保子串只在这几个后缀的前缀中出现，我们需要让子串的长度大于 $\max(height_i,height_k)+1$。如果不满足的话那么 $i-1$ 或者 $k$ 开头的前缀也会出现，就不合法了。找到上下界后利用差分计算答案即可。</p>
<h4 id="更加深入地理解后缀数组"><a href="#更加深入地理解后缀数组" class="headerlink" title="更加深入地理解后缀数组"></a>更加深入地理解后缀数组</h4><p>给定一个字符串，构建其后缀数组是很容易的。那么我们如何根据一个排列构建一个后缀数组是该排列的字符串呢？</p>
<p>对于后缀数组中两个相邻的元素，显然有 $str_{p_i}\le str_{p_{i+1}}$。什么时候不能取等呢？不难发现，这与 $p_i+1$ 和 $p_{i+1}+1$ 的位置关系有个。若 $p_i+1$ 在 $p_{i+1}+1$ 的后面，则 $str_{p_i}&lt; str_{p_{i+1}}$ 一定成立；否则可以取等。</p>
<p>因此，所有的字符按照后缀的顺序一定会构成一条不等式链，形如 $str_{p_1}\otimes str_{p_2}\otimes str_{p_3}\otimes…\otimes str_{p_n}$，其中 $\otimes\in \left{&lt;,\le\right}$。  这样，如果要构造任意一个原串是很容易的，如果要构造一个字符集最小的原串也是可以贪心做到的。</p>
<p>有了上面的基础，我们看一看这道题：</p>
<h6 id="CTSC2016-萨菲克斯·阿瑞"><a href="#CTSC2016-萨菲克斯·阿瑞" class="headerlink" title="CTSC2016  萨菲克斯·阿瑞"></a>CTSC2016  萨菲克斯·阿瑞</h6><p>题意：求由 $m$ 种字符组成，其中第 $i$ 种字符出现次数不超过 $c_i$，且长度为 $n$ 的字符串，共有多少种不同的后缀数组。</p>
<p>声明：以下内容参考自 NOI 捧杯爷虞皓翔的<a href="https://yhx-12243.github.io/OI-transit/records/lydsy4549%3Blg5417%3Buoj199%3Bloj2988.html">题解</a>，膜拜%%%</p>
<p>对于上面的每一条链，我们称其有 $k$ 段当它由恰好 $k-1$ 个小于号连接。既然要统计字符集为 $m$ 的后缀数组数量，我们不妨先求出有 $m$ 段的后缀数组个数。</p>
<h2 id="观察-m-3-的情况。设有-A-个备选的-a-，-B-个备选的-b-，-C-个备选的-c-，则根据多重组合数（可重排列），我们知道小于等于-3-段的后缀数组有-begin-pmatrix-A-B-C-A-B-C-end-pmatrix-个。但我们要减掉小于等于-2-的那些，不难发现，这是一个容斥的过程。也就是说，最后的答案应该是：-begin-pmatrix-A-B-C-A-B-C-end-pmatrix"><a href="#观察-m-3-的情况。设有-A-个备选的-a-，-B-个备选的-b-，-C-个备选的-c-，则根据多重组合数（可重排列），我们知道小于等于-3-段的后缀数组有-begin-pmatrix-A-B-C-A-B-C-end-pmatrix-个。但我们要减掉小于等于-2-的那些，不难发现，这是一个容斥的过程。也就是说，最后的答案应该是：-begin-pmatrix-A-B-C-A-B-C-end-pmatrix" class="headerlink" title="观察 $m&#x3D;3$ 的情况。设有 $A$ 个备选的 $a$，$B$ 个备选的 $b$，$C$ 个备选的 $c$，则根据多重组合数（可重排列），我们知道小于等于 $3$ 段的后缀数组有 $\begin{pmatrix} A+B+C \ A,B,C \end{pmatrix}$ 个。但我们要减掉小于等于 $2$ 的那些，不难发现，这是一个容斥的过程。也就是说，最后的答案应该是：$$\begin{pmatrix}A+B+C \A,B,C\end{pmatrix}"></a>观察 $m&#x3D;3$ 的情况。设有 $A$ 个备选的 $a$，$B$ 个备选的 $b$，$C$ 个备选的 $c$，则根据多重组合数（可重排列），我们知道小于等于 $3$ 段的后缀数组有 $\begin{pmatrix} A+B+C \ A,B,C \end{pmatrix}$ 个。但我们要减掉小于等于 $2$ 的那些，不难发现，这是一个容斥的过程。也就是说，最后的答案应该是：<br>$$<br>\begin{pmatrix}<br>A+B+C \<br>A,B,C<br>\end{pmatrix}</h2><h2 id="begin-pmatrix-A-B-C-A-B-C-end-pmatrix"><a href="#begin-pmatrix-A-B-C-A-B-C-end-pmatrix" class="headerlink" title="\begin{pmatrix}A+B+C \A+B,C\end{pmatrix}"></a>\begin{pmatrix}<br>A+B+C \<br>A+B,C<br>\end{pmatrix}</h2><p>\begin{pmatrix}<br>A+B+C \<br>A,B+C<br>\end{pmatrix}<br>+<br>\begin{pmatrix}<br>A+B+C \<br>A+B+C<br>\end{pmatrix}<br>$$<br>对于更大的情况，只需要推广这个容斥即可。</p>
<p>但是等等，我们要求的是字符集为 $m$ 的答案！我们知道，每个排列有唯一的段数。因此我们只需要在统计该段数的时候把这个排列统计进去即可。</p>
<p>还有一个小问题，即完全贪心填出来的字符串可能不符合出现次数 $c_i$ 的限制。不过没关系，我们直接把后面的字符当做当前字符来填即可。只有确保当前字符是用完了的就是正确的！</p>
<p>最后的问题在于如何计算上面那个容斥。我们可以采用一个简单的 DP 来求得容斥系数。定义状态 $f_{i,j,k}$ 表示用了 $i$ 个字符填完 $j$ 个位置，且最后一个段用了 $k$ 个字符的答案。DP的转移不难，也超出了后缀数组的范畴，故不展开阐述。请参见上面的链接。</p>
<h4 id="后缀数组与区间操作"><a href="#后缀数组与区间操作" class="headerlink" title="后缀数组与区间操作"></a>后缀数组与区间操作</h4><p>在 Height 数组的部分，我们了解到，对于排序后的数组，我们很多时候只用统计相邻两个元素的贡献，就能得到全局的贡献。其实，利用后缀数组，我们也可以快速对给定的若干子串排序，从而进行区间操作。</p>
<h6 id="十二省联考2019-字符串问题"><a href="#十二省联考2019-字符串问题" class="headerlink" title="十二省联考2019  字符串问题"></a>十二省联考2019  字符串问题</h6><p>题意：给定一个字符串和两类子串，给出若干 $A$ 类串支配 $B$ 类串的支配关系，我们能把两个 $A$ 类串拼接当且仅当第一个 $A$ 类串支配的某个 $B$ 类串是第二个 $A$ 类串的前缀。每个串拼接的次数不限，求能拼接的最长串长或判断无限长。</p>
<p>首先抽象出问题：把所有的 $A,B$ 串看做点，有若干 $A\rightarrow B$ 的有向边，$B\rightarrow A$ 存在有向边当且仅当 $B$ 是 $A$ 的前缀，求最长路。</p>
<p>如果直接枚举每对 $A,B$，时空复杂度都是平方级，显然不能通过。这时考虑先将原串进行后缀排序。利用排序的后缀，我们可以快速对 $A$ 串也进行排序（若两个串左端点的 LCP 大于任意串长，比较串长；否则按左端点的后缀序）。这时，我们发现，每个 $B$ 串所能连边的 $A$ 串一定是排完序后一段连续的区间。考虑用数据结构优化。</p>
<p>将排序后的 $A$ 串建一棵线段树，父亲向儿子连边。这样以后 $B$ 串只用像区间修改的方式去连刚好包含的点即可。还剩一个问题：边权怎么办？因为只有 $A$ 串的长度对答案有贡献，所以我们可以将每个 $A$ 串拆成入点和出点，这两个点之间的边权就是 $A$ 串的长度，其他边赋值为 $0$ 即可。</p>
<p>建完边后只需要用 Tarjan 判一下有没有环，再在 DAG 上进行 DP 即可。</p>
<h4 id="多个字符串的拼接-结合主席树"><a href="#多个字符串的拼接-结合主席树" class="headerlink" title="多个字符串的拼接&amp;结合主席树"></a>多个字符串的拼接&amp;结合主席树</h4><p>对于多个字符串的子串相关问题，有时需要将多个字符串拼接到一起求后缀数组。这时我们可以根据需要在两个字符串之间插入一个字典序最小&#x2F;最大的字符，以起到分隔的作用。而这种多个字符串的问题有时也会涉及只在某一区间内的字符串的统计。这样我们就会有两组限制：ID 的 $[l,r]$ 和 SA 的 $[L,R]$。这时我们既可以转化成二维数点问题，用树状数组完成，也可以用值域主席树来做。</p>
<h6 id="CF1037H"><a href="#CF1037H" class="headerlink" title="CF1037H"></a>CF1037H</h6><p>题意：给出一个字符串，有若干询问，每次给出 $l,r$ 和另一个字符串，找出原字符串在 $l,r$ 中的子串中字典序大于给出字符串的字典序最小的子串。</p>
<p>为了将子串问题转化成后缀问题，我们枚举找到字符串与给出字符串的 LCP。由于字典序要严格大于，我们再枚举找到子串的下一个字符。问题转化为在原串的后缀中找到与某个串完全相同的前缀。后缀排序后显然答案在一个连续的区间内。但如何判断答案是否在 $l,r$ 的限制内呢？这时就需要用到主席树。在主席树中插入每个后缀的排名，然后查询就很简单了。</p>
<p>注意到每次的区间是严格包含下一层的区间的，因此我们可以用倍增或二分快速地找到新的区间。</p>
<h4 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h4><p><a href="https://codeforces.com/problemset/problem/452/E">CF452E</a>，与品酒大会方法类似</p>
<p><a href="https://codeforces.com/problemset/problem/204/E">CF204E</a>，简单数据结构维护</p>
<p><a href="https://codeforces.com/problemset/problem/873/F">CF873F</a>，Height 数组的运用</p>
<p><a href="https://loj.ac/p/2720">NOI2018你的名字</a>，二分+结合主席树</p>
<p><a href="https://loj.ac/p/2059">TJOI&#x2F;HEOI2016字符串</a>，二分+结合主席树</p>
<h2 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h2><h4 id="基础模板-1"><a href="#基础模板-1" class="headerlink" title="基础模板"></a>基础模板</h4><p>自动机的每个节点对于一个状态，需要存储：$fa,nxt[字符集],len$。</p>
<p>插入过程即从上一个节点找到一个合适的位置插入。具体有三种情况，建议理解性默写代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">	<span class="type">int</span> len,fa,nxt[<span class="number">26</span>];</span><br><span class="line">&#125;nd[<span class="number">1000005</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> p=pre;</span><br><span class="line">	<span class="type">int</span> u=++tot;pre=u;</span><br><span class="line">	f[u]=<span class="number">1</span>;</span><br><span class="line">	nd[u].len=nd[p].len+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(p&amp;&amp;!nd[p].nxt[c])nd[p].nxt[c]=u,p=nd[p].fa;</span><br><span class="line">	<span class="keyword">if</span>(!p)&#123;</span><br><span class="line">		nd[u].fa=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> v=nd[p].nxt[c];</span><br><span class="line">	<span class="keyword">if</span>(nd[v].len==nd[p].len+<span class="number">1</span>)&#123;</span><br><span class="line">		nd[u].fa=v;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> nv=++tot;nd[nv]=nd[v];</span><br><span class="line">	nd[nv].len=nd[p].len+<span class="number">1</span>,nd[u].fa=nd[v].fa=nv;</span><br><span class="line">	<span class="keyword">while</span>(p&amp;&amp;nd[p].nxt[c]==v)nd[p].nxt[c]=nv,p=nd[p].fa;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不难发现，如果将每个点与父亲连边，将会构成一棵树，称为 Parent Tree。这棵树与原 SAM 有如下关系：每个节点的终点集合等于其 <strong>子树</strong> 内所有终点节点对应的终点的集合。而每个状态对应的子串数量为 $len_i-len_{fa_i}$。</p>
<h4 id="SAM与parent-tree的灵活运用"><a href="#SAM与parent-tree的灵活运用" class="headerlink" title="SAM与parent tree的灵活运用"></a>SAM与parent tree的灵活运用</h4><p>因为 SAM 构成一张 DAG，所以很多统计问题可以转化为 DAG 上的 DP 来完成。如：</p>
<h5 id="不同子串个数"><a href="#不同子串个数" class="headerlink" title="不同子串个数"></a>不同子串个数</h5><p>令 $f_i$ 表示 $i$ 这个节点开始的字符串数量，则 $f_i&#x3D;1+\sum\limits_{j\in nxt_i}f_j$，拓扑排序即可。当然也可以用上面的结论直接把每个节点的子串数量加起来。</p>
<h5 id="不同子串的总长度"><a href="#不同子串的总长度" class="headerlink" title="不同子串的总长度"></a>不同子串的总长度</h5><p>与上面的 DP 十分类似。</p>
<h5 id="字典序第-k-大子串"><a href="#字典序第-k-大子串" class="headerlink" title="字典序第 $k$ 大子串"></a>字典序第 $k$ 大子串</h5><p>先用上面的方法处理出每个点开始的字符串数量，再模仿依次枚举字符求解。</p>
<p><strong>注意</strong>：有些时候 DP 要放在 Parent Tree 上而非 SAM 上，这时统计的东西是<strong>相同子串</strong>的相关答案（如出现次数）。例如上面的问题，统计本质不同子串与位置不同子串需要区分开来。</p>
<h5 id="两个字符串的最长公共子串"><a href="#两个字符串的最长公共子串" class="headerlink" title="两个字符串的最长公共子串"></a>两个字符串的最长公共子串</h5><p>对第一个串建立后缀自动机，第二个串如果可以匹配就顺着匹配，否则暴力跳 $fa$。感觉和 AC 自动机的某些操作类似。</p>
<h4 id="SAM的区间操作：线段树合并"><a href="#SAM的区间操作：线段树合并" class="headerlink" title="SAM的区间操作：线段树合并"></a>SAM的区间操作：线段树合并</h4><p>有时我们希望多次询问与原串的某个子串相关的信息，这时需要用到线段树合并。我们在 SAM 的每个节点上存一棵动态开点权值线段树，值域为 $[1,n]$ 表示是否存在长度为该区间的以当前节点结尾的子串。一开始只有插入节点时在当前长度赋值。然后我们 DFS Parent Tree，每次将儿子的信息合并到父亲上。这样查询就变成了线段树上是否有某个区间的值。还是以前面用过的一道题为例：</p>
<h6 id="CF1037H-1"><a href="#CF1037H-1" class="headerlink" title="CF1037H"></a>CF1037H</h6><p>题意：给出一个字符串，有若干询问，每次给出 $l,r$ 和另一个字符串，找出原字符串在 $l,r$ 中的子串中字典序大于给出字符串的字典序最小的子串。</p>
<p>首先套路地建好 SAM 并完成线段树合并操作，然后以递归地形式判断是否合法。向下递归时移动自动机的节点，每次枚举新字符判断是否有在查询区间的子串。</p>
<p>上述做法无论是思维难度还是代码难度都远小于后缀数组的做法。</p>
<h6 id="NOI2018-你的名字"><a href="#NOI2018-你的名字" class="headerlink" title="NOI2018  你的名字"></a>NOI2018  你的名字</h6><p>题意：给定一个模式串，每次询问给出文本串，求文本串有多少本质不同子串在模式串中没有出现过。</p>
<p>首先套路地建好 SAM 并完成线段树合并操作，然后考虑贡献。我们枚举文本串的每个节点作为终止节点，尝试找出在模式串中出现过的最长后缀。这可以利用前一次的答案，如果不合法则减小长度，如果长度与父亲相同就往父亲跳来解决。注意一个问题：这个终止节点的限制是作用于以其结尾的所有节点的，因此标记要打在序列上。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>初赛的坑</title>
    <url>/2024/08/06/basic_knowledge/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a0079df132de8e355a697d7d2ff44ac05b17fd4398f4a3890f5e467b7a798937"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>组合数学  学习笔记</title>
    <url>/2024/08/06/combinatorics/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="385a5d9b3cf85572efb67bbf9cbaab6b6ce7ec3464defcaf5135dca36c539fcc">05cd41db3361879aefb4267e575d7f2d1949322503b48f7d8edebb52667df1350e86c45fa0e45aa3de7d4ab4c81bcb118af603dd2f3b85a1b53a8548bbc8757de811f4b2e507cb5ccdd11b0f04283f8931ac4818f1398625a906a95fe2082c1c57c29decfd861619c293f4430b9c92ae89a6b8f18f850a08841222cc5b7a9ae47b44b60391304e528295b987f5b370fe9a82310fda9eace4d7e6165026ae9da9fffebab2d7f17d5cb1fe05800ef1f4485a89379c20c3273a2bd5d3a1449c8acb3d6d8247397610ac58f16df442186a1e7cfd3007014e23ca0aca4cc1414249b24ae3f728f856643b0c9f0fe6927d4e41653a4ae675d9945e94212da932027d8af401e1bdf17624794c837e64f8fc2f78b2923b11a0d31a385bdbd08980fe16b2401000941dc8a715151c64db486a00bdee8ee7a5b2beb3c5d69530044f9a0d0ef0445b391a7eeb644bc9173bf7fcf20893e1495b0205914e7bbca10949fedf9e58ef558f7348d4f686f27d8bddca1fc3aa0805e52d357e728a3f95e22fdfcbc6f764a70152c1a02b25f1534e7c7bdb593550b8be1783c93ecb04f4899be2ef6212c202fa02db1e9abbe3d520be7947685cc07642b58f452734ab83e580386ac7ba633caf95ddf2775cebea834ae3ce4f25de2d2161c2aff04a7778f53d055292b3e4ecb564a78acf6be41ab237564e3f929b1c0d16380c281adc0557f0c02761944b8c220d35111a70c77276b9027d34813d042c2f90f9bfed67068ff6ca8f65ba293c1b82c5bb1187ba0dc0c817565168d73aa5dd6d5f2823d5ccd6a236fc8d0e34ffdfc59f12b2c97f487f68500c67aae020a85af272b727ef3c633aefc0042c84e967517861b766811cd9f7232a6af919c4655ea3c94fe991b17a9c469f95f473d84848a39ea8da7fa2689241fb7a9f1735260630ce042866be15cf79d370769643713a037bba05115c10a121821c82738ad0753052f0dfbbcae8084cbcbd33279380a30d4afee51f635c6501b9b2328645ab9f6235b1748175d675ae87527c041aaf0cfe778e31e9917952a1202b4e0b846a397b6986913fd14916b9a754bb19ab10180406fca770ce946f9127003aed577ea218b5bc3331a1cdfd04e8362b74cfe6e945bd44b5c926d7a8cea9340cb505eb4e08cbe6da4a76278f28ced0c096ab8a5cf705cf6a4a8dd8752a4870402acbce2a8a4292de9fab8c121f329e6c253128f8eab2354c98ffb9894a9cacc808cc6b1134ff751c43a39915dc38a7fdf9507d54795eaf50eaab5bc71a331cc61b6b268aa3304a5df0908c24b513410504bf2b28742359936d4e1ec5ae5634f9df3b6d012ac2ca75b71ac4cf0941b7d8904842c5b12a259268e1b490d4df0be576a173e8b2c47e22612a46339873054959089dcdf86b1649be134892d1308dd92cd110cabefb0a940d33f8a7287450d8ef4c1a7439cfa6817fb1643d052a7325f399276484937b51dbf67c88f1db5e285c31ebe50592f5db9ded903d67bbf0f777b0e214d9138f817c3078922e9edd489ebdc2b89b3360040de29c75de15d53512abd38c602a652ccdb4b178625acdb3e7c1776ffa52e55e5235e85fc95c2990007420e8f57bbba4f8c79213ea38ac43cf1e2e731c65a4f1bc21591d29145a52faffc43608764cb394246daf8941ea568229aea9c2ac57775ab1ebca503c38a4a95624339653c6ebe228092e6a53a4f5b5b1c34cf82ffb5a1c20dd74e2aa4663b25206348d25923549811fb91ab5ab6cdcd7bedbdc2dda782d9f4e0ebc06df13721d2b9d34fd5b13b9dc5c9cd683085c69e8e4001aeac0e34c544a5573bd072e6ef29f2fe498de234c2ef17e5af1b7d10f0b6b86f3f8001ce79a09d23ebfdd9471f2f5a6be90854f6bc8837c3b23e8bbd74e96a1b8da9ec5881fa54463e4df5bf6625eb19be7f2349242936082861ed227d37a9b0d76ef80daee4e16b5499ab6637d26817ec1dd9e9036081592e0afcffe9ff6b93917c1b9f570d97694516e79819263f035746d46a4c4e87358f2bcafc150e29df79710bc7cd99ceb9e99c15d8a981e2744201a77a7e95028eb2cfd8189d3e12b5573abb02102affc6a21ba331e89ed8f2c4136a43458f0c51d0a47f3f8c15e79bec0d43390c34629d2f2b881355f04d5d67b177a6e1b9c76c50a6d6baddfe0af4124726b09f8977c8ccfd9f8d52da45c245d083c73b103fcbcf8a80e19c840f288553995bb7872bfaaefbcca246cf3831dfd1bf6e9a98514ad55dc1cc8e4be3587fa40d763eda766d96a1449c4e2e947970b1cc7288c2984f8d29e28ba8f7c677a29cbc28517f6b96f31cd28e9b0a2cace4bdf5b219a48be4dcef4bb458b80f39661044eca8dc72e60dea3a1b1253be7f86d5562754c29840050f8756d7398893d27535f874e2c998b9c819cbc800b43e2d321f28008feac2a0c01d036b20eb07200e9a651831159c908f8727f8dc0fcb2694d9b14bf32d65a65b155d708c6d4bc78355cac3ba9f45f359e5f2c85bd44ee7cb1b2b6a2857642aa47604c7dbd227980825ade6bbc725960b573b012e42943519c323f111c694f597bd8e73517bd730c53f4044bee181d5173f4790fb03dc9cf4966040e058d2c212e59c6f531ad014831cfce38b4393001dcb2d9cfa57afbfbe9785aa0697fd815aaa9f9fb09a9dd3b9e50bea1b26176682e9391bfb1e94760508572417539dffd9ec60e855760e41496c3849432c7c09636b85ea9bb762352d376d437798f87022019a1c43f6b67b9d755fd12b33354ec6c83a12c0f9289bee2791264d5e21bfd544e0fd359b58b624f8901b613e73a4949084b45566f72e7cd2f834015e720a3624a8818d86718e538ddeb590770a437f8856b6c7cf86f14e9a07bb89b2511729696c8b6c0b544f29fcfa0f7de26448b4779ca591b2b2be3cbdb8e14226ea25eebbc2f100675e07c1fa9b25939b4d7debecf01684bf1e135b8d8a66450239b6e2099324d8f650b6e04d794f638bae4893b7eb052e493c62e6e1953c77696dd615a5f89824133aa87ad2f59e9c5ed0a1f59599e734b4492b0bce28d376a51b57a334c036a317bced03107d11f4dca7bc65d658253e1b433ac039a9ee016d0eaf9ab67220df30b002eeb8e00f4dbdea16e73140648a2f6d3565649fe51bf6a0c26777104c7632ffa7e9754907078025ad023fadb0ea053ae963f7f6b75cf03df03605c25f0f9bdd8db2d4350c260a379ab0f0d74ea985deb8dde3ca83832c70c4cc9ddd38d758d147d2741e1f873028e15e88ed517e60314fec37e2bfe0d8aa7868aad9d8f10ddfda391f37e7299f8141c9aae30af0796c508ce17bbfbb7ea89afec867e9cf44b1d1dbe217b6eb5d314e40b</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>斜率优化  学习笔记</title>
    <url>/2024/08/06/convex-hull-optimisation/</url>
    <content><![CDATA[<h2 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h2><p>斜率优化适用于转移方程中有 $i,j$ 相关的相乘的量出现。</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>决策单调性，可参考单调队列优化。</p>
<h2 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h2><ol>
<li><p>正确地写出状态转移方程式。</p>
</li>
<li><p>令当前状态为 $i$，则“任取 $i&gt;j&gt;k&gt;0$ 中的 $j$ 和 $k$”，分别写出转移方程式。</p>
</li>
<li><p>将二者相减，得到通过 $j$ 转移比通过 $i$ 转移更优所需满足的不等式组。</p>
</li>
<li><p>将 $i$ 有关的视作主元，分开一次项与常数项。</p>
</li>
<li><p>得到斜率。</p>
</li>
<li><p>根据斜率单调性维护单调队列（同普通单调队列优化）</p>
</li>
</ol>
<p>以<a href="https://www.luogu.com.cn/problem/P2900">此题</a>为例：</p>
<ol>
<li><p>$$f_i&#x3D;min,{,f_j+w_{j+1}×l_i,}(0≤j&lt;i)$$</p>
</li>
<li><p>$$f_i&#x3D;min,{,f_j+w_{j+1}×l_i,}(0≤j&lt;i)$$</p>
</li>
</ol>
<p>$$f_i&#x3D;min,{,f_k+w_{k+1}×l_i,}(0≤k&lt;j)$$</p>
<p>3~5.<br>$$ f_j-f_k\le (w_{k+1}-w_{j+1})×l_i$$<br>$$\text{即斜率为} \frac{f_j-f_k}{w_{k+1}-w_{j+1}}$$</p>
<ol start="6">
<li><figure class="highlight perl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;++i) &#123;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r&amp;&amp;slope(<span class="string">q[l]</span>,<span class="string">q[l+1]</span>)&lt;=a[i].y) ++l;</span><br><span class="line">		f[i]=f[<span class="string">q[l]</span>]+a[<span class="string">q[l]</span>+<span class="number">1</span>].x*a[i].y;</span><br><span class="line">		<span class="keyword">while</span>(l&lt;r&amp;&amp;slope(<span class="string">q[r-1]</span>,<span class="string">q[r]</span>)&gt;=slope(<span class="string">q[r]</span>,i)) --r;</span><br><span class="line">		<span class="string">q[++r]</span>=i;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>割点和桥  学习笔记</title>
    <url>/2024/08/06/cut-and-bridge/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>以下内容均适用于无向图。</p>
<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>割点：删去后原图不连通的点。</p>
<p>桥：删去后原图不连通的边。</p>
<p>点双连通图：删去任意一点仍连通的图。</p>
<p>边双连通图：删去任意一边仍连通的图。</p>
<p>双连通分量：图的极大双连通子图。</p>
<h2 id="求割点与桥：Tarjan算法"><a href="#求割点与桥：Tarjan算法" class="headerlink" title="求割点与桥：Tarjan算法"></a>求割点与桥：Tarjan算法</h2><h4 id="割点判定法则"><a href="#割点判定法则" class="headerlink" title="割点判定法则"></a>割点判定法则</h4><p>一个顶点是割点的充要条件为以下两个之一：</p>
<ul>
<li><p>该点是<strong>树根</strong>，且该点有多于一个子树。</p>
</li>
<li><p>该点 $u$ 不是树根，且满足存在一个儿子 $v$ 使得 $DFN(u) \le Low(v)$。</p>
</li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void dfs(int u,int fa)&#123;</span><br><span class="line">	dfn<span class="comment">[u]</span>=low<span class="comment">[u]</span>=++tim;</span><br><span class="line">	fl<span class="comment">[u]</span>=1;</span><br><span class="line">	int sz=0;</span><br><span class="line">	for(int i=lst<span class="comment">[u]</span>;i;i=e<span class="comment">[i]</span>.lst)&#123;</span><br><span class="line">		int v=e<span class="comment">[i]</span>.t;</span><br><span class="line">		if(!fl<span class="comment">[v]</span>)&#123;</span><br><span class="line">			dfs(v,u);</span><br><span class="line">			sz++;</span><br><span class="line">			if(u==root&amp;&amp;sz&gt;1)cut<span class="comment">[u]</span>=1;</span><br><span class="line">			low<span class="comment">[u]</span>=min(low<span class="comment">[u]</span>,low<span class="comment">[v]</span>);</span><br><span class="line">			if(u!=root&amp;&amp;dfn<span class="comment">[u]</span>&lt;=low<span class="comment">[v]</span>)cut<span class="comment">[u]</span>=1;</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			low<span class="comment">[u]</span>=min(low<span class="comment">[u]</span>,dfn<span class="comment">[v]</span>);//无向图，不用栈</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	if(cut<span class="comment">[u]</span>)tot++;</span><br><span class="line">&#125;</span><br><span class="line">void tarj()&#123;</span><br><span class="line">	for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(!fl<span class="comment">[i]</span>)root=i,dfs(i,0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="桥判定法则"><a href="#桥判定法则" class="headerlink" title="桥判定法则"></a>桥判定法则</h4><p>一条边是桥的充要条件是：</p>
<ul>
<li>搜索树上存在 $u$ 的一个儿子 $v$ 满足 $DFN(u) &lt; Low(v)$。</li>
</ul>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void dfs(int u,int pre)&#123;</span><br><span class="line">	dfn<span class="comment">[u]</span>=low<span class="comment">[u]</span>=++tim;</span><br><span class="line">	fl<span class="comment">[u]</span>=1;</span><br><span class="line">	for(int i=lst<span class="comment">[u]</span>;i;i=e<span class="comment">[i]</span>.lst)&#123;</span><br><span class="line">		int v=e<span class="comment">[i]</span>.t;</span><br><span class="line">		if(!fl<span class="comment">[v]</span>)&#123;</span><br><span class="line">			dfs(v,i);</span><br><span class="line">			low<span class="comment">[u]</span>=min(low<span class="comment">[u]</span>,low<span class="comment">[v]</span>);</span><br><span class="line">			if(dfn<span class="comment">[u]</span>&lt;low<span class="comment">[v]</span>)&#123;</span><br><span class="line">				e<span class="comment">[i]</span>.bridge=e<span class="comment">[i^1]</span>.bridge=1;</span><br><span class="line">				tot++;</span><br><span class="line">				fe<span class="comment">[tot]</span>=e<span class="comment">[i]</span>;</span><br><span class="line">				if(fe<span class="comment">[tot]</span>.f&gt;fe<span class="comment">[tot]</span>.t)swap(fe<span class="comment">[tot]</span>.f,fe<span class="comment">[tot]</span>.t);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else if(i!=(pre^1))&#123;//对重边进行特判</span><br><span class="line">			low<span class="comment">[u]</span>=min(low<span class="comment">[u]</span>,dfn<span class="comment">[v]</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void tarj()&#123;</span><br><span class="line">	for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(!fl<span class="comment">[i]</span>)dfs(i,0);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="求双连通分量"><a href="#求双连通分量" class="headerlink" title="求双连通分量"></a>求双连通分量</h2><h4 id="边双连通分量的求法"><a href="#边双连通分量的求法" class="headerlink" title="边双连通分量的求法"></a>边双连通分量的求法</h4><p>求出所有桥后，把桥边删除，原图变成多个连通块，每个连通块都是一个边双连通分量。具体实现可以DFS一遍，遇到桥就跳过。</p>
<h4 id="代码实现-2"><a href="#代码实现-2" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ans;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	fl[u]=<span class="number">1</span>;</span><br><span class="line">	ans.<span class="built_in">push_back</span>(u);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(fl[v]||e[i].brg)<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="点双连通分量的求法"><a href="#点双连通分量的求法" class="headerlink" title="点双连通分量的求法"></a>点双连通分量的求法</h4><p>效仿强连通分量，维护一个栈。第一次访问节点时入栈。当割点判定法则中 $DFN(u) \le Low(v)$ 成立时，无论该点是否为根，都要从栈顶不断弹出节点直至 $v$ 出栈，此时弹出的所有结点与 $u$ 一起构成一个点双连通分量。注意：<strong>孤立点</strong>也属于点双连通分量！要特判！</p>
<h4 id="代码实现-3"><a href="#代码实现-3" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void dfs(int u)&#123;</span><br><span class="line">	fl<span class="comment">[u]</span>=1;</span><br><span class="line">	dfn<span class="comment">[u]</span>=low<span class="comment">[u]</span>=++tim;</span><br><span class="line">	stk<span class="comment">[++top]</span>=u;</span><br><span class="line">	int sz=0;</span><br><span class="line">	for(int i=lst<span class="comment">[u]</span>;i;i=e<span class="comment">[i]</span>.lst)&#123;</span><br><span class="line">		int v=e<span class="comment">[i]</span>.t;</span><br><span class="line">		if(!fl<span class="comment">[v]</span>)&#123;</span><br><span class="line">			dfs(v);</span><br><span class="line">			sz++;</span><br><span class="line">			low<span class="comment">[u]</span>=min(low<span class="comment">[u]</span>,low<span class="comment">[v]</span>);</span><br><span class="line">			if(u==rt&amp;&amp;sz&gt;1)ct<span class="comment">[u]</span>=1;</span><br><span class="line">			if(u!=rt&amp;&amp;dfn<span class="comment">[u]</span>&lt;=low<span class="comment">[v]</span>)ct<span class="comment">[u]</span>=1;</span><br><span class="line">			if(dfn<span class="comment">[u]</span>&lt;=low<span class="comment">[v]</span>)&#123;</span><br><span class="line">				hd<span class="comment">[v]</span>=1;</span><br><span class="line">				while(stk<span class="comment">[top]</span>!=v)&#123;</span><br><span class="line">					ans<span class="comment">[v]</span>.push_back(stk<span class="comment">[top]</span>);</span><br><span class="line">					vis<span class="comment">[stk<span class="comment">[top]</span>]</span>=1;</span><br><span class="line">					top--;</span><br><span class="line">				&#125;</span><br><span class="line">				ans<span class="comment">[v]</span>.push_back(v);</span><br><span class="line">				ans<span class="comment">[v]</span>.push_back(u);</span><br><span class="line">				vis<span class="comment">[u]</span>=vis<span class="comment">[v]</span>=1;</span><br><span class="line">				top--;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			low<span class="comment">[u]</span>=min(dfn<span class="comment">[v]</span>,low<span class="comment">[u]</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void tarjan()&#123;</span><br><span class="line">	for(int i=1;i&lt;=n;i++)&#123;</span><br><span class="line">		if(!fl<span class="comment">[i]</span>)rt=i,dfs(i);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>网络流定理与结论</title>
    <url>/2024/08/06/flow_theory/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="37dfabbe12813df0e252416aa8dc1f53782bfd2ebd92142994ed12d6d10955b6">05cd41db3361879aefb4267e575d7f2d0fad6e8fb5cc2dfe3712cdf9a2708595d5d69984a9cf62b894bca9ba77abbca8da9599c1bb8de0d78c810b06b55ab3f4b316e4a0ae0dfa34fdef3a6b5cd6c02cd995ae19cad41586e4c58fd2b53c17c08da61f84f9f5a00d5e95a10513e2205a696329181150f6cda76784002fdd0f2cc512e05220b3ec8699a710919f6c3f1d4d41df2e65b27b63ffd589779c919311f29e61d32360176fbde46b5af0d378d0a9e0cf9ab24b46dde7c4f769a2ee1cd7f598c73e3f717d6119ac9c02219c2311cd0bf69ca5abd31f96a54aac9a31f0cebec292bbb86e589735fd8c96d5d38988dd4626e0ae1bcbc7e3a31ac8210b8c9700a4d88d26344c25099e41d5910842f60cfff9933d78aa0edde33068f92dd221ea19ab78e52aff2270ca0fe01f493ee58eec08ccd335b7d2cc218bcdc0949d8a8e8f38f15eb044eee16c98cb7949f41403308ee19eae298cfcd10a7d70e1079f78a7932a5006570d47dece4bbe4e68e2fd5a67a35eb5688cd84bf9839246b383312396d3aeb746d9173054e567fceeedba5cb606bd259fb29f4b2a0a7be0de802bf448226dc09ef3a4de05c6f38fbb970694c02f6a9006858ab97dcf12432f73ba57ee2a3d2ab035c3777e1400a6f1b05319b7aa9868e9cf0fe4babefd204742220c68d7928b5f46e24536157eadbb07c1864fe12eb7b2c1f24eb17cf44a6cba25d472c8fae370a781d87e23be5702f597d3dcfcbc246f04966adef6849de1be14eff9c71793d9b4cbf2323c901ac71e3a8e508de160598d80ace2339b544d03ed2682296fe065e41129bcaedba03545e68a6f2537ad0a48e89c8c95c5947bfef8bd4b1f0c9717fe0c41227372dd2a557d111052021b12710a953d3ee96dd1dd57eca9b7e4045e8bd171415c2aaaae49aa71f8283530cd910e8c699ca7f56275b1a6afc1a6a8093b0159f5589f4a5ce6b7c44bdf558a581641d349ee174618b49d5bf34673dd945bc01fd862fdf64c65223eda044a8d155dcc1d364aec10b4f0d9ec156e1976a0d5ae46d1d0ea7f69fa8a167cbe29d5d12fee21e03fe12e4469f335341bf3b4b4d8fd188b9ff58fe677b2f7128e9a2b08c0c02210bd19f62e1a09f469bb09cde30df1c2116446ee825fc62a5e28e7e86f124a3b01d5b14b2a13efc3e8e21abfc3733835c2ddb2f6a802ee0eab7a1a0d55a268d1888bcb52d4528445c6da2ec05e2dc1115af3045dfa23380d9b9a7df79425ee32af558b3c4071c23eeae98a091d3c9cc0f48eb6c9d2f7a829a16a0fb1138fa106da15d62a0fb2cb9649089e39ef9fdda3dd2110820447fa828e9af3a143cece57e894dae79e53fbfb475496777ed58f4dac370740a52b0a06ade1472e74185b6d3fb2d2db7f0b4c184a29a3ccc09ed09c1cef038e6f7f33ee75484508b840574b3ca9fa2263d41c4e5064a781dfbcc6da45439b23584142e6b79b44c4879576455a4809e3189685dc07021166974b11e2975a9e4fa8b6725cd23b3102e38ce706c3f456610affaeb915066afcac365d089c7a97ee559e16009a1b7a7817268da43a539066656f</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>博弈论</title>
    <url>/2024/08/06/games/</url>
    <content><![CDATA[<ul>
<li><p>NIM 游戏及几个经典模型</p>
</li>
<li><p>其他典型博弈</p>
</li>
<li><p>SG函数</p>
</li>
<li><p>对抗搜索与其他技巧</p>
</li>
</ul>
<h3 id="NIM游戏及几个经典模型"><a href="#NIM游戏及几个经典模型" class="headerlink" title="NIM游戏及几个经典模型"></a>NIM游戏及几个经典模型</h3><h5 id="经典NIM游戏"><a href="#经典NIM游戏" class="headerlink" title="经典NIM游戏"></a>经典NIM游戏</h5><blockquote>
<p>给定 $n$ 堆物品，第 $i$ 堆物品有 $A_i$ 个。两名玩家轮流行动，每次可以任选一堆，取走任意多个物品，可以一堆取光，但不能不取。取走最后一件物品则<strong>获胜</strong>。两人都采取最优策略，问先手能否获胜。</p>
</blockquote>
<p>结论：对于 Nim 游戏的一个局面 $(A_1,A_2,\ldots,A_n)$ 来说，先手必败当且仅当 $A_1 \oplus A_2 \oplus \ldots \oplus A_n&#x3D;0$。</p>
<p>证明：凡是异或和非 $0$ 的都可以通过一次操作变为异或和为 $0$ 的，因此可以归纳证明。</p>
<h5 id="阶梯模型"><a href="#阶梯模型" class="headerlink" title="阶梯模型"></a>阶梯模型</h5><blockquote>
<p>有 $n$ 层阶梯，编号 $1\dots n$，每层阶梯上有一些石子。</p>
<p>两个玩家轮流操作，每次操作可以将第 $i$ 层阶梯上若干(至少一个)石头放到 $i-1$ 层阶梯上，第 $0$ 层阶梯即为地板。</p>
<p>将最后一颗石头从阶梯移到地板上的玩家胜利。</p>
</blockquote>
<p>不难发现，所有偶数阶梯都等价于垃圾桶。若一方尝试将偶数阶梯中的石子移出(至奇数阶梯)，下一个人只需要紧跟着把这些石子丢到下一个(偶数)阶梯即可，最终会到达地板。这个过程中，先后手是不会转换的。</p>
<p>接下来考虑奇数阶梯，一步就可以把任意多的石子丢进垃圾桶，实际上就等价于 NIM 问题。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P5363">SDOI2019移动金币</a>，<a href="https://www.luogu.com.cn/problem/P2575">洛谷P2575高手过招</a></p>
<h5 id="翻硬币模型"><a href="#翻硬币模型" class="headerlink" title="翻硬币模型"></a>翻硬币模型</h5><blockquote>
<p>$n$ 个硬币排成一行，每次可以翻连续的若干个，要求最右边的必须从反到正，无法操作的人输，问谁赢。</p>
</blockquote>
<p>结论：整个游戏的 SG 函数相当于所有反面硬币的 SG 函数的异或和，而位于 $x$ 位置的 SG 函数有规律：$SG(x)&#x3D;lowbit(x)$</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4077">SDOI2016硬币游戏</a>，<a href="https://www.luogu.com.cn/problem/CF494E">CF494E sharti</a></p>
<h5 id="斐波那契NIM游戏"><a href="#斐波那契NIM游戏" class="headerlink" title="斐波那契NIM游戏"></a>斐波那契NIM游戏</h5><blockquote>
<p>有 $n$ 枚石子。两位玩家定了如下规则进行游戏：</p>
<ul>
<li>第一次取石子时可以取走任意多个；</li>
<li>接下来，每次至少要取走一个石子，最多取走上一次取的数量的 $2$ 倍。当然，玩家取走的数量必须不大于目前场上剩余的石子数量。</li>
<li>取走最后一块石子的玩家获胜。</li>
</ul>
</blockquote>
<p>结论：先将 $n$ 写成齐肯多夫表示，即用斐波那契数表示且没有相邻两个都是 $1$，则先手每次取最低位的 $1$ 即可获胜。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P6791">SNOI2020取石子游戏</a></p>
<h3 id="其他典型博弈"><a href="#其他典型博弈" class="headerlink" title="其他典型博弈"></a>其他典型博弈</h3><h5 id="威佐夫博弈"><a href="#威佐夫博弈" class="headerlink" title="威佐夫博弈"></a>威佐夫博弈</h5><blockquote>
<p>有两堆石子，数量任意，可以不同。游戏开始由两个人轮流取石子。游戏规定，每次有两种不同的取法，一是可以在任意的一堆中取走任意多的石子；二是可以在两堆中同时取走相同数量的石子。最后把石子全部取完者为胜者。现在给出初始的两堆石子的数目，你先取，假设双方都采取最好的策略，问最后你是胜者还是败者。</p>
</blockquote>
<p>结论：当且仅当两堆石子的数量构成黄金比的时候后手获胜。</p>
<p><a href="https://www.luogu.com.cn/blog/chen-zhe/wei-zuo-fu-bo-yi">证明</a></p>
<h5 id="二分图博弈"><a href="#二分图博弈" class="headerlink" title="二分图博弈"></a>二分图博弈</h5><blockquote>
<p>在二分图上，两人轮流指定下一步去哪个点，不经过重复的点，无法指定的人输，问谁赢？</p>
</blockquote>
<p>结论：当一个点在所有最大匹配的方案中（少了这个点无法最大匹配），那么先手必胜。</p>
<p>证明：后手不可能选到非匹配点，如果后手选到一个非匹配点，设路径为 $S_1\rightarrow S_n$，那么把现在的匹配换成 $S_2\rightarrow S_n$，匹配数不变但不包含 $S_1$，与最大匹配一定包含 $S_1$ 矛盾。</p>
<p>扩展到无向图的情况：不指定起点，则有完美匹配后手必胜；否则结论与上面一样。</p>
<h5 id="树（图）上删边博弈"><a href="#树（图）上删边博弈" class="headerlink" title="树（图）上删边博弈"></a>树（图）上删边博弈</h5><blockquote>
<p>在一棵树&#x2F;图上钦定一个根，每次可以删去一条边，若删边后某部分与根不连通则一并删去，不能操作者失败，问谁赢？</p>
</blockquote>
<p>结论：叶子的 SG 是 0，其他点的 SG 是所有儿子节点 $+1$ 后异或起来。</p>
<p>证明：考虑往一个子树顶上加一条边是什么意思，就是对于子树内的状态转移 $DAG$ ，加一个点 $T$, 然后对原来的每个点，加一条到 $T$ 的边，容易归纳说明每个点的 $SG$ 都会增加 $1$。该思路在其他题目中也可以使用。</p>
<p>图的情况：把所有偶环缩成点，所有奇环缩成一个点和一条边（只连他自己那个点），然后当成树来做。</p>
<h3 id="SG函数"><a href="#SG函数" class="headerlink" title="SG函数"></a>SG函数</h3><p>约定终止态的 SG 函数值为 $0$。</p>
<p>定义 $mex(S)$ 为集合 $S$ 中最小的未出现的自然数。</p>
<p>设 $G$ 能转移到的集合为 $T_G$，则定义 $$SG(G)&#x3D;mex{SG(V):V\in T_G}$$</p>
<p>性质：$SG(G)&#x3D;0$ 为必败态，否则为必胜态。</p>
<h5 id="SG和"><a href="#SG和" class="headerlink" title="SG和"></a>SG和</h5><p>考虑两个人同时面对多个游戏，但每次只能操作其中一个。则 $SG(A+B)&#x3D;SG(A)\oplus SG(B)$，NIM游戏的原理也可以这么解释。</p>
<p>推SG函数的例题：<a href="https://www.luogu.com.cn/problem/P3185">HNOI2007分裂游戏</a>，<a href="https://www.luogu.com.cn/problem/CF1149E">CF1149E</a></p>
<h5 id="反SG-游戏"><a href="#反SG-游戏" class="headerlink" title="反SG-游戏"></a>反SG-游戏</h5><p>即最后一步不能走的人胜利的游戏。</p>
<p>有以下 SJ 定理：对于任意一个 Anti-SG 游戏，如果规定当局面中所有单一游戏的 SG 值为 $0$ 时，游戏结束。则先手必胜当且仅当：</p>
<p>1.游戏的 SG 函数不为 $0$ 且游戏中某一个单一游戏的 SG 函数大于 $1$；</p>
<p>2.游戏的 SG 函数为 $0$ 且游戏中没有单一游戏的 SG 函数大于 $1$。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4279">SHOI2008小约翰的游戏</a></p>
<h3 id="对抗搜索与其他技巧"><a href="#对抗搜索与其他技巧" class="headerlink" title="对抗搜索与其他技巧"></a>对抗搜索与其他技巧</h3><h5 id="对抗搜索-DP"><a href="#对抗搜索-DP" class="headerlink" title="对抗搜索&amp;DP"></a>对抗搜索&amp;DP</h5><blockquote>
<p>在一个竞争的环境中，双方通过竞争实现相反的利益，一方最大化这个利益，另一方最小化。</p>
</blockquote>
<p>定义合适的状态后，先找到必败态，然后通过记忆化搜索的方式实现，如果当前是必胜态就要在所有后继为必败态的结果中取 $\max$，否则在所有后继状态中取 $\min$。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P4576">CQOI2013棋盘游戏</a>，<a href="https://www.luogu.com.cn/problem/P4363">九省联考2018一双木棋</a></p>
<h5 id="决策包容性"><a href="#决策包容性" class="headerlink" title="决策包容性"></a>决策包容性</h5><p>如果一个状态能直接到达他后继状态的所有后继状态，在该状态是一个必胜态。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/AT_arc137_c">ARC137C</a></p>
<h5 id="建立模型"><a href="#建立模型" class="headerlink" title="建立模型"></a>建立模型</h5><p>通过建模把原问题中复杂的操作转化为图形化的，或是易于处理的操作。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/AT_agc002_e">AGC002E</a></p>
<p>通过建模把其他问题转化为博弈论问题。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/AT_agc043_c">AGC043C</a></p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>生成函数与多项式  学习笔记</title>
    <url>/2024/08/06/gf-and-poly/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="a686de6fd09cba4c46ce6957f315d80d9afd6d34d535c3944b041d0caa674786"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>群论基础</title>
    <url>/2024/08/06/group_theory/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cd035f9cbeae2280b82c730ed64839bb0ad825994280f78c211a969a26e976e4">05cd41db3361879aefb4267e575d7f2d3cd51ecf5e79a5aeb906b571463e7640e6d05ffcaa86c563466a59f49f188115aa1de4dce8b681efb469e1a072ecd6c6646af25c2a29c2fd9939ec5c5d41f0180c581f86654c157b71c930cb176a1e904dcd6b440c037b6b8055a7c1d72aed5bd88b785fb210c52e5b5cebf5e5cb573b888cc7975baeea1397e29cb73f7b7dd26fcace52b313ee7976b6d4a42610a8894958ad6511e5e47128d1bf67f7c85ed61ccb51fdbc6eecd85ecf98eaa7d66fa9ab65e36a033bd2efd0b95392806576c03477c1506f14f1630ffc01bdcb0e13629ad621724802ae43111fdff57563fbcbd1fb9c4f7e594e874058a305003990369f49ed0e2d17bfe53059c40f33a99a227a98a59d8e4da3fbf3e8f7228a6544a71b41cf6af2e0c3f0b9bb687c546611880314a375bc483eae671d960fb82be2093b5c96812294a915be60671b02e8a420c274edae64d309bf0f34e188cf58c81fb7f6fcedf9d90e5384d005b9ae7e054ac9a9201e1f111d46a8d3e6d00a4fe501c500c63e4415f970d684298466376eee46f42f6777c6a7135fc330f32eb82584295b2a8fa585c196a54e63afaba06209542a5b445d1f7aa99a8618527ae606a913ff1d07aca55577592e0c694cdfdf2e554dff7803c7016740ea8a5d74c434b720956afd23789229e0ac86886908c256711dab724f91e9773376efe36ddbce8db07a1c82310f4ba12e855e4425ec2d393e3ca0099291ad245e9bd4203b30b6b901d77f4a05c2ccdf23bbd96d8c88e61b1e5a878106dfda1774634fcc9eed6bd2abd7b8aa107aa281d91c173134271a5f9bd9025eccc304fe6770e5a79a4fc96d53edfef91518a57c53f3d2ac3afc2bf6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>卡常小技巧</title>
    <url>/2024/08/06/faster/</url>
    <content><![CDATA[<h3 id="IO优化"><a href="#IO优化" class="headerlink" title="IO优化"></a>IO优化</h3><p>这个没啥好说的，注意Obuff如果手写栈会跑得更快；以及千万不要用endl而要用\n。</p>
<h3 id="函数内联"><a href="#函数内联" class="headerlink" title="函数内联"></a>函数内联</h3><p>这个没啥好说的。</p>
<h3 id="枚举顺序"><a href="#枚举顺序" class="headerlink" title="枚举顺序"></a>枚举顺序</h3><p>要让可能连续的内存尽量在相近的位置被枚举，例如三维数组 $f[i][j][k]$ 建议按 $i,j,k$ 的顺序嵌套。这一点在<strong>倍增</strong>算法中特别要注意。</p>
<h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>据说这样可以让内存访问变得连续。</p>
<h3 id="取模优化"><a href="#取模优化" class="headerlink" title="取模优化"></a>取模优化</h3><p>对于加法中的取模，建议采用做减法。</p>
<h3 id="Define"><a href="#Define" class="headerlink" title="Define"></a>Define</h3><p>树状数组中的lowbit函数直接define会快一些。</p>
<h3 id="merge代替sort"><a href="#merge代替sort" class="headerlink" title="merge代替sort"></a>merge代替sort</h3><p>对于两个有序序列的合并，建议用STL中的merge函数。使用时需要多开一个临时数组存合并结果再复制回去。这个技巧在<strong>CDQ分治</strong>中很管用。</p>
<h3 id="const-修饰"><a href="#const-修饰" class="headerlink" title="const 修饰"></a>const 修饰</h3><p>对于代码中的常量（如<strong>模数</strong>），尽量加上 const 修饰，会快不止亿点点。</p>
]]></content>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/08/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p>
<span id="more"></span>

<p>This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>计算几何  学习笔记</title>
    <url>/2024/08/06/geometry/</url>
    <content><![CDATA[<p>推荐阅读<a href="https://blog.csdn.net/BUG_Creater_jie/article/details/122226874">这个</a>，模板可在<a href="https://onlinejudge.u-aizu.ac.jp/courses/library/4/CGL/all">这里</a>找strangeman的提交记录。</p>
<h2 id="向量相关"><a href="#向量相关" class="headerlink" title="向量相关"></a>向量相关</h2><h4 id="向量的坐标表示"><a href="#向量的坐标表示" class="headerlink" title="向量的坐标表示"></a>向量的坐标表示</h4><p>  有点 $A(x_1,y_1)$ 和点 $B(x_2,y_2)$，则 $\overrightarrow{AB}$ 可表示为 $(x_2-x_1,y_2-y_1)$</p>
<h4 id="共线向量"><a href="#共线向量" class="headerlink" title="共线向量"></a>共线向量</h4><p>  共线向量 $a(x_1,y_1)$ 和 $b(x_2,y_2)$ 满足<br>$$<br>  x_1y_2&#x3D;x_2y_1<br>$$</p>
<p>  由此得到判断三点共线的方法：计算 $\overrightarrow{AB}$ 和 $\overrightarrow{BC}$ 进行比较。</p>
<h4 id="向量的点乘"><a href="#向量的点乘" class="headerlink" title="向量的点乘"></a>向量的点乘</h4><p>  向量 $a(x_1,y_1)$ 和 $b(x_2,y_2)$ 的数量积<br>$$<br>  a \cdot b&#x3D;x_1x_2+y_1y_2<br>$$</p>
<p>  由此得到向量垂直的条件：<br>$$<br>  a\perp b \Leftrightarrow x_1x_2+y_1y_2&#x3D;0<br>$$</p>
<h4 id="向量的叉乘"><a href="#向量的叉乘" class="headerlink" title="向量的叉乘"></a>向量的叉乘</h4><p>  向量 $a(x_1,y_1)$ 和 $b(x_2,y_2)$ 的向量积<br>$$<br>  a \times b&#x3D;x_1y_2-y_1x_2<br>$$</p>
<h4 id="叉乘的意义"><a href="#叉乘的意义" class="headerlink" title="叉乘的意义"></a>叉乘的意义</h4><ul>
<li><p>若两个向量的叉积不为 $0$，则他们相交；否则他们重合或平行。</p>
</li>
<li><p>两个向量的叉积是他们围成的平行四边形的面积，由此可以快速计算三角形的面积，从而快速计算多边形的面积。注意：<strong>逆时针求得的面积是正的，顺时针求得的是负的</strong>。</p>
</li>
<li><p>若两个向量的叉积大于 $0$,则第二个向量由第一个逆时针选择得到；反之由顺时针旋转得到。由此可以判定多边形的凹凸性、判定点与多边形的位置关系、判定线段相交等等。</p>
</li>
</ul>
<h2 id="多边形相关"><a href="#多边形相关" class="headerlink" title="多边形相关"></a>多边形相关</h2><h4 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h4><ul>
<li><p>$\pi&#x3D;\arccos(-1)$，这样精度比较高。</p>
</li>
<li><p>开平方、反三角函数最容易炸精度。因此不要使用正弦定理求解角度，尽量使用余弦定理或点乘。还有个好处就是余弦值在 $[0,\pi]$ 是唯一的！</p>
</li>
</ul>
<h4 id="凸包与面积"><a href="#凸包与面积" class="headerlink" title="凸包与面积"></a>凸包与面积</h4><p>  求凸多边形的面积的基本思想是三角剖分后求每个三角形的面积。由此产生了两种子类型：</p>
<p>  1.在动态凸包中处理。则每次增加点、删除点的面积与该点和相邻两点组成的三角形的面积相关；</p>
<p>  2.以某一点为基准点处理。则面积与基准点和当前边构成的三角形的面积相关，注意<strong>三点共线</strong>的情况要特判。 </p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>数学公式杂项</title>
    <url>/2024/08/06/math_theory/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b98c0d464fff4679599bb7b7ca5952e29cb2805084306dfd09fb2f77c3e4af7b">05cd41db3361879aefb4267e575d7f2d1949322503b48f7d8edebb52667df13576470eab1374094fa970a8d16891c73e790317ee334dbfd4e51ebcd8b086b9350b2556c2a2c216cf78eefaca13dee51e5231479f8ed47852e762d2d46744bb81b46be4a88a3125c3b42a2ca291580f6f59fcea8cf541e3a5ee5beb9ef96790bffff1a43c6121987bc28908cedca515c3219155e958cafccc54caace1e0a5bd57aaddd1c1ba95276c66041847657d54bdda8ce4347a477dbae10d0707a64aba53cb475c3e6cc457b88b83596d3e18b07ad3628e45245d936793bbd3b40ee3df28a0376f8150e149ccf58b6f354b520cad0ce88f4b21665eade014aa2037a8068e2ff7754c6b85cceefead73580ede2317732b0ab968a1870bce05df92ba03f3013151555e354cb91016dd2f1216db3753410d946b1c11970b66115fff392d695b0a20d052c6296c68dfc3e97f8ec5323d772b7e945ec5262c8f99144fc8c1e7a65e73c0e556b6ce313b749bf3c32112872f4569d92038ad92df64ace8b8661ef587e25350fc0e131bcab3b843387d604bcd0f8c1c6a120d598bcda7655e85921a7910f1569f88588a66c2b3eded858c6f7e5bb85fb402cbb03c0777006ccf43c9eb9bff710e112cccb686bb640adefe5b09fc9ac9990886482a418f09b4ee573b5b69ec29ba2334d8c90fa4ccfb020c60bec34fc0ebaa35bf2da4adff651ea2b61adcc1cd91f63d0f9d7968ed0d2b9ec0818a0be86825a984f2bc968cfdcdcadf14ed5a0a801b5b46ee1a0378149a6aafce48f74a144fb2eec7c32f8b0a1dc17f97e88cf48ea95c8a4b4b63342de35482cd453da3e7d42d5eee9398560ffc64170cb8fd6ea2db3bfdc3bf47d0cf2cbb6241bc4a6af390e84a3790d9d5c09b0fd0a1c471179df9b25090f6670a4709d3c04df487b8d18ff42a4731d1e58bc14414cb74f1a7a53a19b035d415532a9c516a47b45f1620782b069a5573666256428e67aa08748aca105bf504c2b4100493c1d14aa29f33bd76048981bcb520ff04c1d8e8f797160d0f6cac5c62f3db0a84aa991b910fac9bc987b8e5db327a6a1e90fc8345e9d7ed62985fd94fb38a75999db992cf67dbc99fe266ad9e2303a73ffcd058f12c561fe86a557e4a102d875e068f688fc7fae4afec303d509a4c60585f815c8814b2c7f17704730a92082489e98f70b0c2bd87f88717613c5c83e178ce66e24a471d366f4cb866bf16c9e1caafec23cb735ab31b4d02d6386cfb6ddb579a6900bad710c980b2b80f60ee3f84d7de702d5bc599c3bb5ce4bce0c45434b6a3c793d084da2ed635d575fa779d122997fb2d3aad7de2b7d21f0eb4af10d551882e33705d90940ec6a38876d51e3b03b5b62cb05f6e542cb7f0a6e38a84040567b5badbda324055500c0d319660bf51f9932217f107549e18043c8f5c47de037aa4012436e3aab602a1aead7ddbd084280c18ddf617a3825a2a5250b0649c4fd114a207c50d6c39f1075d0a0d7a4bc8a5d5605267be5046b71674e7ed45d384f2c374a509a9452e5657a6f361bff0cd2782006d88ae9e0fc9241e4d16508b149725b1c39f9d3a09f68183b3035011001cc11da4b276091c416164a918f500900574ed565abf2c572a816d346922a2102020f9c91ce98d4220b47f3b98b7f49f3603734e7b0de106d07dcf9892fb1f63d289b63bc00c573920c7f5069141e0acfcb146d0bbf94dedde30ccc653cc9d25fd24c55d59ac9de003dfd944dc0a68148fc1df00ef12c0f9d69fb4159a302498b6516c00a54c88608a87cc43f737cde54d4474bed691dbb494452b949f46d0840e88dd2e0d19c46e7983e6bec469387f389379071047b3c1c147a468f426db59e08c36e302c66a1905cc7bb852d11bb009171a1c5c3f3e44b2c5b0612f71e4df32ef4738b734403caaa44b354a539817</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>莫比乌斯反演  学习笔记</title>
    <url>/2024/08/06/mobius_inversion/</url>
    <content><![CDATA[<p>注：以下内容源自各种各样的资料，不保证正确性，仅供参考。</p>
<p>约定 $*$ 代表运算“卷”，部分出现的 $1$ 代表常数函数。</p>
<h3 id="莫比乌斯函数"><a href="#莫比乌斯函数" class="headerlink" title="莫比乌斯函数"></a>莫比乌斯函数</h3><p> $\mu$ 为莫比乌斯函数，定义为：<br>$$<br>\mu(n)&#x3D;\begin{cases}<br>1  &amp; n&#x3D;1 \<br>0 &amp; n\text{含有平方因子}\<br>(-1)^k  &amp; k\text{为}n\text{的本质不同质因子个数}<br>\end{cases}<br>$$<br>莫比乌斯函数是<strong>积性函数</strong>，可以求线性筛的同时求出。</p>
<h3 id="莫比乌斯函数的性质"><a href="#莫比乌斯函数的性质" class="headerlink" title="莫比乌斯函数的性质"></a>莫比乌斯函数的性质</h3><ul>
<li><p>性质1：<br>$$<br>\sum\limits_{d|n}\mu (d)&#x3D;\begin{cases}<br>1  &amp; n&#x3D;1 \<br>0 &amp; n\neq 1<br>\end{cases}<br>$$<br>也就是说，$\sum_{d|n}\mu(d)&#x3D;\varepsilon(n)$，即 $\mu * 1&#x3D;\varepsilon$</p>
<ul>
<li>引理：$[gcd(i,j)&#x3D;1]&#x3D;\sum\limits_{d|gcd(i,j)}\mu(d)$</li>
</ul>
</li>
<li><p>性质2：<br>$$<br>\varphi * 1&#x3D;\operatorname{id}<br>$$<br>两边同时卷 $\mu$ 可得到 $\varphi&#x3D;\operatorname{id}*\mu$</p>
</li>
</ul>
<h3 id="莫比乌斯变换与反演"><a href="#莫比乌斯变换与反演" class="headerlink" title="莫比乌斯变换与反演"></a>莫比乌斯变换与反演</h3><p>设 $f(n),g(n)$ 是两个数论函数。</p>
<ul>
<li><p>如果有 $f(n)&#x3D;\sum_{d|n}g(d)$，那么有 $g(n)&#x3D;\sum_{d|n}\mu(d)f(\frac{n}{d})$</p>
<p>这种形式下，$f(n)$ 称作 $g(n)$ 的莫比乌斯变换，$g(n)$ 称作 $f(n)$ 的莫比乌斯反演。</p>
</li>
<li><p>如果有 $f(n)&#x3D;\sum_{n|d}g(d)$，那么有 $g(n)&#x3D;\sum_{n|d}\mu(\frac{d}{n})f(d)$</p>
</li>
</ul>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>莫反常常与数论分块+前缀和结合，加速运算。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>树链剖分  学习笔记</title>
    <url>/2024/08/06/heavy-light-decomposition/</url>
    <content><![CDATA[<h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>修改树上某一路径的权值，查询树上某一路径（子树）的权值。</p>
<h2 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h2><p>将树上的结点分成若干重链，每次只用维护重链即可。</p>
<h2 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h2><p>1.两次DFS，分别预处理出{father,dep,size,son}和{top,seg,rev}；</p>
<p>2.建线段树；</p>
<p>3.修改&amp;求值</p>
<h4 id="DFS细节"><a href="#DFS细节" class="headerlink" title="DFS细节"></a>DFS细节</h4><p>第一次DFS没啥细节。</p>
<p>第二次注意在DFS前先处理根节点。对于每个结点先走重儿子，保证线段树中重链连续；然后处理其他儿子。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void dfs2(int u)&#123;</span><br><span class="line">	if(son<span class="comment">[u]</span>)&#123;</span><br><span class="line">		seg<span class="comment">[son<span class="comment">[u]</span>]</span>=++seg<span class="comment">[0]</span>;</span><br><span class="line">		top<span class="comment">[son<span class="comment">[u]</span>]</span>=top<span class="comment">[u]</span>;</span><br><span class="line">		rev<span class="comment">[seg<span class="comment">[0]</span>]</span>=son<span class="comment">[u]</span>;</span><br><span class="line">		dfs2(son<span class="comment">[u]</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	for(int i=lst<span class="comment">[u]</span>;i;i=e<span class="comment">[i]</span>.lst)&#123;</span><br><span class="line">		int v=e<span class="comment">[i]</span>.t;</span><br><span class="line">		if(!top<span class="comment">[v]</span>)&#123;</span><br><span class="line">			seg<span class="comment">[v]</span>=++seg<span class="comment">[0]</span>;</span><br><span class="line">			rev<span class="comment">[seg<span class="comment">[0]</span>]</span>=v;</span><br><span class="line">			top<span class="comment">[v]</span>=v;</span><br><span class="line">			dfs2(v);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="修改细节"><a href="#修改细节" class="headerlink" title="修改细节"></a>修改细节</h4><p>对于每条路径的两个结点，若不在同一条重链上，则选取深的重链往上跳；最后更新当前重链。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void modify(int x,int y,int v)&#123;</span><br><span class="line">	int fx=top<span class="comment">[x]</span>,fy=top<span class="comment">[y]</span>,ret=0;</span><br><span class="line">	while(fx!=fy)&#123;</span><br><span class="line">		if(dep<span class="comment">[fx]</span>&lt;dep<span class="comment">[fy]</span>)swap(x,y),swap(fx,fy);</span><br><span class="line">		mfy(1,seg<span class="comment">[fx]</span>,seg<span class="comment">[x]</span>,v);</span><br><span class="line">		x=fath<span class="comment">[fx]</span>;</span><br><span class="line">		fx=top<span class="comment">[x]</span>; </span><br><span class="line">	&#125;</span><br><span class="line">	if(seg<span class="comment">[x]</span>&gt;seg<span class="comment">[y]</span>)swap(x,y);</span><br><span class="line">	mfy(1,seg<span class="comment">[x]</span>,seg<span class="comment">[y]</span>,v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="询问细节"><a href="#询问细节" class="headerlink" title="询问细节"></a>询问细节</h4><p>大体流程与修改相同，代码略。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>数论相关  学习笔记</title>
    <url>/2024/08/06/number_theory/</url>
    <content><![CDATA[<p>实在不想挂一堆链接了。还是自己写个文章把各种知识点归纳一下吧。</p>
<h3 id="gcd-exgcd"><a href="#gcd-exgcd" class="headerlink" title="gcd&#x2F;exgcd"></a>gcd&#x2F;exgcd</h3><p>求exgcd的过程就是在求gcd的过程中，同步维护两个变量，以求得不定方程<br>$$<br>ax+by&#x3D;\gcd(a,b)<br>$$</p>
<p>的一组特解。显然我们通过这组特解可以求得对应的最小非负整数解。当然我们也同样能解决<br>$$<br>ax+by&#x3D;c<br>$$<br>这样的不定方程。</p>
<p>算法最关键的步骤就是 $x,y$ 在递归过程中的维护。先放代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> &amp;x,<span class="type">int</span> &amp;y)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">		x=<span class="number">1</span>,y=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> d,tx,ty;</span><br><span class="line">	d=<span class="built_in">gcd</span>(b,a%b,tx,ty);</span><br><span class="line">	x=ty;</span><br><span class="line">	y=tx-a/b*ty;</span><br><span class="line">	<span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>怎么理解？首先递归到边界时，问题变成 $ax&#x3D;\gcd(a,b)$，所以答案比较显然。</p>
<p>第二个就是递归过程中。其实更新 $x,y$ 和求gcd的 $a,b$ 道理是一样的，我们更新 $a,b$ 的时候是变成了 $b,a% b$ 往下递归，其中 $a% b$ 可以理解成 $a-(\left \lfloor \frac{a}{b} \right \rfloor \times b)$ 。所以我们就用 $ty,tx-(\left \lfloor \frac{a}{b} \right \rfloor \times ty)$ 来更新 $x,y$。</p>
<p><strong>注意：</strong>该算法求得的特解的绝对值不会超过 $a,b$ 的绝对值，但是过程中仍然需要开long long。</p>
<h3 id="逆元"><a href="#逆元" class="headerlink" title="逆元"></a>逆元</h3><p>当模数为质数的时候，可以用费马小定理求，原因不解释。逆元的结果是 $a^{p-2}% p$。</p>
<p>一般情况下，可以利用exgcd构造求方程<br>$$<br>ax+bp&#x3D;1<br>$$</p>
<p>的解，变成最小非负整数解即为 $a$ 在模 $p$ 意义下的逆元。</p>
<p>当然，在求组合数等情况下，也可以利用阶乘求得阶乘的逆元。</p>
<h3 id="CRT-exCRT"><a href="#CRT-exCRT" class="headerlink" title="CRT&#x2F;exCRT"></a>CRT&#x2F;exCRT</h3><h4 id="中国剩余定理"><a href="#中国剩余定理" class="headerlink" title="中国剩余定理"></a>中国剩余定理</h4><p>该算法能给出形如 $x\equiv a_i \pmod{p_i}$ 线性同余方程组的（<strong>模数两两互质</strong>）的一组解。</p>
<p>求解方法如下：</p>
<ul>
<li>算得 $M&#x3D;\prod_{i&#x3D;1}^n p_i$</li>
<li>算得 $M_i&#x3D;\frac{M}{p_i}$</li>
<li>用exgcd求得 $M_i$ 在模 $p_i$ 意义下的逆元 $t_i$</li>
<li>$ans\equiv \sum_{i&#x3D;1}^n a_iM_it_i \pmod{M}$</li>
</ul>
<p><strong>注意：</strong>上面的几个式子模数不太一样！</p>
<p>代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	cin&gt;&gt;m[i]&gt;&gt;a[i];</span><br><span class="line">	M*=m[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">	Mi[i]=M/m[i];</span><br><span class="line">	<span class="type">int</span> x=<span class="number">0</span>,y=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">gcd</span>(Mi[i],m[i],x,y);</span><br><span class="line">	ans+=x*a[i]*Mi[i];</span><br><span class="line">	ans=(ans+M)%M;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="扩展中国剩余定理"><a href="#扩展中国剩余定理" class="headerlink" title="扩展中国剩余定理"></a>扩展中国剩余定理</h4><p>该算法用于解决上述问题中模数不保证两两互质的情形。</p>
<p>先考虑只有两个方程的简单情况。<br>$$<br>\begin{cases}<br>x\equiv a_1 \pmod{p_1} \<br>x\equiv a_2 \pmod{p_2}<br>\end{cases}<br>$$<br>我们可以写成不定方程的形式：<br>$$<br>\begin{cases}<br>x&#x3D;a_1+p_1m_1\<br>x&#x3D;a_2+p_2m_2<br>\end{cases}<br>$$<br>移项得<br>$$<br>m_1p_1-m_2p_2&#x3D;a_2-a_1<br>$$<br>用exgcd可以求得一组 $(p_1,p_2)$ 的解，这样我们就将两个不定方程合并成了这个不定方程<br>$$<br>x\equiv m_1p_1+a_1 \pmod{\operatorname{lcm}(p_1,p_2)}<br>$$<br>多组的问题也像这么合并就行了。</p>
<p>放代码：</p>
<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line">int excrt()&#123;</span><br><span class="line">	int M<span class="operator">=</span>m[<span class="number">1</span>]<span class="punctuation">,</span>ans<span class="operator">=</span>a[<span class="number">1</span>]<span class="comment">;</span></span><br><span class="line">	for(int i<span class="operator">=</span><span class="number">2</span><span class="comment">;i&lt;=n;i++)&#123;</span></span><br><span class="line">		int <span class="keyword">x</span><span class="punctuation">,</span>y<span class="punctuation">,</span><span class="keyword">c</span><span class="operator">=</span>(a[i]-ans<span class="variable">%m</span>[i]+m[i])<span class="variable">%m</span>[i]<span class="comment">;</span></span><br><span class="line">		int <span class="keyword">gc</span><span class="operator">=</span>gcd(M<span class="punctuation">,</span>m[i]<span class="punctuation">,</span><span class="keyword">x</span><span class="punctuation">,</span>y)<span class="comment">;</span></span><br><span class="line">		<span class="keyword">x</span><span class="operator">=</span><span class="keyword">x</span>*(<span class="keyword">c</span>/<span class="keyword">gc</span>)%(m[i]/<span class="keyword">gc</span>)<span class="comment">;</span></span><br><span class="line">		ans+<span class="operator">=</span><span class="keyword">x</span>*M<span class="comment">;</span></span><br><span class="line">		M*<span class="operator">=</span>(m[i]/<span class="keyword">gc</span>)<span class="comment">;</span></span><br><span class="line">		ans<span class="operator">=</span>(ans+M)<span class="variable">%M</span><span class="comment">;</span></span><br><span class="line">	&#125;</span><br><span class="line">	return ans<span class="comment">;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Lucas-定理"><a href="#Lucas-定理" class="headerlink" title="Lucas 定理"></a>Lucas 定理</h3><p>感觉说了跟没说一样。<br>$$<br>\begin{pmatrix}<br>n\<br>m<br>\end{pmatrix}\bmod p&#x3D;<br>\begin{pmatrix}<br>\lfloor\frac{n}{p}\rfloor \<br>\lfloor\frac{m}{p}\rfloor<br>\end{pmatrix}\times<br>\begin{pmatrix}<br>n\bmod p \<br>m\bmod p<br>\end{pmatrix}<br>$$</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>最小割  学习笔记</title>
    <url>/2024/08/06/minimum-cut/</url>
    <content><![CDATA[<h2 id="最小割的概念"><a href="#最小割的概念" class="headerlink" title="最小割的概念"></a>最小割的概念</h2><p>使得源点无法到达汇点所需要删除的边集的容量和。</p>
<h2 id="最小割的求法"><a href="#最小割的求法" class="headerlink" title="最小割的求法"></a>最小割的求法</h2><p>根据最小割最大流定理，可用最大流算法求出最小割的值。</p>
<p>在残余网络中，从源点出发DFS，凡是能通过剩余流量大于0的边到达的点属于S集合，其余点属于T集合，则S集合到T集合之间的边就是组成最小割的边集。</p>
<h2 id="最小割的应用"><a href="#最小割的应用" class="headerlink" title="最小割的应用"></a>最小割的应用</h2><p>最小割是一种选择，因此可以解决一些最大收益&#x2F;最小开销类的选择方法。</p>
<p>如：<a href="https://www.luogu.com.cn/problem/P1361">P1361</a></p>
<p>当然，难点依然是网络流的建图。</p>
<h2 id="扩展：最大权闭合子图"><a href="#扩展：最大权闭合子图" class="headerlink" title="扩展：最大权闭合子图"></a>扩展：最大权闭合子图</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>若从一个图中选择一个子图，使得每个点的后继都在子图中，则该子图是一个闭合子图。</p>
<p>最大权闭合子图即<strong>点权</strong>和最大的一个闭合子图。</p>
<h3 id="求法"><a href="#求法" class="headerlink" title="求法"></a>求法</h3><p>从源点向所有正点连容量为该正点权值的边，从所有负点向汇点连容量为该负点权值绝对值的边，将图中其他边的容量设为INF，跑最小割。不难证明，所有正点的权值和减去最小割即是最大权闭合子图的权值和。</p>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><p>比如：<a href="https://www.luogu.com.cn/problem/P4174">P4174</a></p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>概率期望  学习笔记</title>
    <url>/2024/08/06/probability-and-expectation/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="500626a008945868a92e3d485ae2e0c363b0085c95afa118007ff7036f13fc5f">05cd41db3361879aefb4267e575d7f2d0fad6e8fb5cc2dfe3712cdf9a27085950774697ab857679968cb57189317684fa7aefef427e1b81d5950d13ffb080227e51af3b7847d58d92c7b600af71d3520165c701a0edec93628e3471be72500c91928e2575eb0a468dfb7ed87ab9712e045feeeef8e5be5032c86129eeb86ae572f6c074948e4def876a06b2cdde962a72a032072547c734f66e91488ac521222b24c22d66e521f34515b065e806c408aa70e0306d41b7904b174161b4c93466fbf74e890724f70e22c8675952f5727ea981152605fc212a56b4933a093b114ef652a75a8e1aa73f2989cbe6b0a6f217137a31f295ccb22b2fd3db8838ae32c13e7021c405a033fb1111261f8cbf6a665360580ec75a465dbaabf28ede987313d936a9630b1362dc6069ba7d20047e2704c7bd6c8170de96a910bb698cb1327fac5a726956aaef0f04f0d595f6f1d1fd9fdf3083a26de7f09b4d224138887257f05768bb95ad80fc3727c2dcf802c015d69ede0bba9e557c68b2f050cd19e5ed46f64cdf3d4ca0f35c780765eafe3aa9f35e8f38bb5fea860d9ea4fba55d513021590f548277c55dba7c478d4f54b2674cc2657be19b07f6d9ae0b3a4ed89762bac7966e9f2dc0dd8bddfd164aebfd73fd701ba7153578d4eac97cabd4a7ddf3c841c05159698a54b381e0676afc93fb137acc01d5ab1ea90b125ce70f128a35a6b69f150925202a4cf9426be222eed8b42a506f6dc48945da80c722031957be9de2963da6aa7f1f9bb2e0679844547ff67d447492ad4f306e749949b8145f81576ab9b8fd1b689961c09e1d4a26fbf480d9cd3e81e4e8723e19e1cf89a2c33284087e35991cfc0460b2f52b6297d6fcda71a59e6dca9d0380a5b1479bc5e83c663fd82568a7388c5a955fb34b3e1ffb5f3ff60d7513bcf0b7fb754b92bcd172f9204a4c6658c0885fbaa55843a4164ee1a5a1d66455bf9101d86467ac1b464d7a8dcadad823d8d7af8290387c9c0e8daedbf6fc798ad9bb4b602b9871c5ce438577b0cfa4b02398974e1f3af454e1e55ca6b0acdaa4f9b4d64e20699d542d102bf36b63d9aec399d48f1c0e1014b1528dee5f36bbd386936f143db07a309372514a01f32b7cdc30c3fbe4af991abe77ea18cdf2a50856a3c567a5756712384e3bfb91279fdc4677351a982e30f9064fb0b0c3bf85bdec3bac6b21abd89229b5b699c8dac85a783eb09fc40308294ca66eaba8605e717ecadbecad694b8cb2a3d2fc4ba466c51a4f21a472acb01b1791f863976a1e17ffa788fe13f9a278416b5ee03f6d9cf7d82a6c7c6f40a3b87cda092bffeed5ecc895ec9de7d76959e540cc2f0e75790d41794cfca6adc6c7e6702d9a1d3a02f5b877cdf783df00815ccfd24915d52e83bd793a5d3e5a3a4d27f9dd5ee8d1cc6e0d5a1e9b3a14f94b4b1e12a6501ae60fbc52116ae6a0daa508503362b040b67782a40dac517601d3b8fcf8d21e4a55ed916608fd4c4350bae9751d962ab0f309ced5be29da53fdf1b59913ce0b47e219fc299ba629339bccda0b8f868c95a0d57128c5c67e683afb43a96fdb4707fc76f0c96e5f4d2a1499665ac0e3ba059cec5d672535155f8c4b275ad9361ecdc7be24e1146582bb6544c05304b0296dd04144ef319126f48fc4446d377fe9e6e177a6791ad506f3bbed17889b1828940062106bacd91441f901762c6cd4871f726d41d75d681c1d36b5a1b1f8498c36499b75223a7913570c2079c5c36a41c897f594f1445643104528baab1a16f90d9118c015c28c7c7929d325c4cfd256158c630de319adf6094a2ff2f8741bd95fddbe14d38989848576188fa2922536a41e3cfe3acdeceb6443feb05fc8754fe1b5b92da80480f6a0deeffa279b5c2efc69a045a8f9fb2ce88bc49b3782ff467f676d322fe58ac4dd72944bd5f247dc33befd4e7057a8a6890750c29b558860dddbe51570ac7bd6a669bc2b9fe833af74a45a0655ffe0ac01e8d742e17739afd5f4f10c1675309b51b120eaa3b0bb72ea4c438c26613e00f985b0bffdff3e956cb1184c5b28d0ee83a16f74934b61a5f43ffa7f112436a255227a3491c6ea9ac209e063c6f64cd451688dde26d907b36c55d2fc8c67a37ac451e054380da37703d0257953a91572523ab1b4e085c4cdd489b8abbf01127d9ff24876528621540b13e1d923f28a868e0a71d1310c4c911b782b409d63c4d21fae15ba5d8cd7050e054535b9a172173c302287fab162189006035726e29f18e6a468c2b9b10a997afbb05c8376bda85b805197f907620be8de99f60a3279b0a4eb3174e5aae8ea28692eda18922b0b2f5ebbf0c8cf1782d24c71689df6103fb22f668fb546abac843cf855fc1fc572d51979a602b79b1e8e0c1ee9642cea7984c3128b84c6c3dc1fb7edf7905cbd432e1176738e196af2337a2c43c6430365b1cde44588934cc305b21df6d3ac38beeb1b031dc290fd7b31296031aa1f15c0c6b8b8231d5b02b11e1d004aa53138587ffb6741f78666134fbc8f6860948d4ae2f4cd2e649a196d364702787609d7deb9be21c2dd81c2bc6932adeb4ebcecf38ecca8d6abefd147fb930929950c1ecfa0ac76d4c9e17a544350b15f573d724e11dbc423ad41690b0644a6dae0cc4111251d4f1b12d1b45595f9eb1f6881a1e1cc696673e06144f1d2f0f55f83f97e6d53ccebffa0e0cd3f5e30ceb741068ccdfef77315be8c988d3e93a091d90cde8bd2947fb610e</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>考试检查事项</title>
    <url>/2024/08/06/remember_to_review/</url>
    <content><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>推荐结合阅读<a href="https://www.luogu.com.cn/blog/AIQ/ka-chang-xiao-ji-qiao">这个</a>和<a href="https://www.luogu.com.cn/blog/AIQ/chu-sai-keng">这个</a>。</p>
<h2 id="写作缘由"><a href="#写作缘由" class="headerlink" title="写作缘由"></a>写作缘由</h2><p>还用说吗？显然是不想太快AFO啦！</p>
<h2 id="主要坑点"><a href="#主要坑点" class="headerlink" title="主要坑点"></a>主要坑点</h2><h4 id="数组大小"><a href="#数组大小" class="headerlink" title="数组大小"></a>数组大小</h4><ul>
<li><p>数组需要定义大小，且至少多开1，否则就要写const使其静态。这一点在DFS类的题目中特别注意！</p>
</li>
<li><p>不能太大，否则TLE&#x2F;MLE，都不是什么好结果。</p>
</li>
<li><p>也不能太小，不然RE&#x2F;WA，也不是什么好结果。</p>
</li>
<li><p>在建双向边、存线段树、高精度乘法等题目中特别要小心！</p>
</li>
</ul>
<h4 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h4><ul>
<li>处理到0或者1时一定要特判，不要偷懒！</li>
</ul>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li><p>十年OI一场空，不开long long见祖宗。</p>
</li>
<li><p>有些时候还卡long long，注意是否高精&#x2F;__int128。</p>
</li>
<li><p>开了long long，要检查数组是否爆空间。</p>
</li>
<li><p>double在数据过大时，精度很差，注意是否要优化。</p>
</li>
<li><p>long double：数据在1e9以上要用，输出时printf(“%.2Lf”)</p>
</li>
</ul>
<h4 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h4><ul>
<li>不多说，删注释并检查打对freopen没有。</li>
</ul>
<h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><ul>
<li><p>对于整数，最好都用快读快写，至少用scanf&#x2F;printf。</p>
</li>
<li><p>对于字符，用getchar()或者scanf。</p>
</li>
<li><p>对于字符串，用cin&#x2F;cout。</p>
</li>
<li><p>对于换行，建议用putchar(‘\n’)，最后一个用endl</p>
</li>
</ul>
<h4 id="取模"><a href="#取模" class="headerlink" title="取模"></a>取模</h4><ul>
<li><p>每一步运算都要取模！</p>
</li>
<li><p>快读时也要取模！</p>
</li>
<li><p>做减法时加上模数。</p>
</li>
<li><p>在确保正确的基础上，因为取模很慢，所以尽量手写取模或少取模（确保long long存的下的前提）。</p>
</li>
</ul>
<h4 id="运算顺序"><a href="#运算顺序" class="headerlink" title="运算顺序"></a>运算顺序</h4><ul>
<li><p>矩阵乘法不具有交换律！</p>
</li>
<li><p>减法不具有交换律！</p>
</li>
</ul>
<h4 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h4><ul>
<li>位运算的优先级难以预料，一定要加括号，特别是！、&#x3D;&#x3D;、&amp;&amp;、||这些特别容易错！</li>
</ul>
<h4 id="多种算法的选择"><a href="#多种算法的选择" class="headerlink" title="多种算法的选择"></a>多种算法的选择</h4><ul>
<li><p>最小生成树，要根据图的特点选择。</p>
</li>
<li><p>最短路，用dij似乎更靠谱。</p>
</li>
<li><p>不带修的RMQ，别再写线段树了，写ST表吧，你的ST表水平已经不像原来那样糟糕了！</p>
</li>
</ul>
<h4 id="二分边界"><a href="#二分边界" class="headerlink" title="二分边界"></a>二分边界</h4><ul>
<li>二分上界要尽可能开大，但是不要太接近 int 或 long long 的边界！</li>
</ul>
<h2 id="出过人命的坑"><a href="#出过人命的坑" class="headerlink" title="出过人命的坑"></a>出过人命的坑</h2><h4 id="循坏次数"><a href="#循坏次数" class="headerlink" title="循坏次数"></a>循坏次数</h4><ul>
<li>如果答案要更新到n，要检查n是否得到了更新（如NOIP2021T1）；同理要检查0是否会出问题。</li>
</ul>
<h4 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h4><ul>
<li>对于需要更新size的，要判断是否在一个集合再合并！</li>
</ul>
<h2 id="查出错了怎么办？"><a href="#查出错了怎么办？" class="headerlink" title="查出错了怎么办？"></a>查出错了怎么办？</h2><ul>
<li><p>发现有错，要将相关的所有变量做更改。改完后建议全部重新读一遍代码，再看一次有无缺漏。</p>
</li>
<li><p>修改后不用的数组变量及调试用的变量要及时删去，可以省空间且看出是否有漏改的地方。</p>
</li>
</ul>
<p>未完待续……</p>
]]></content>
      <tags>
        <tag>杂项</tag>
      </tags>
  </entry>
  <entry>
    <title>强连通分量  学习笔记</title>
    <url>/2024/08/06/scc/</url>
    <content><![CDATA[<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><p>强连通：对于结点 $u$、$v$，同时存在 $u$ 到 $v$ 的路径和 $v$ 到 $u$ 的路径。</p>
<p>强连通图：图中任意两个结点都强连通。</p>
<p>强连通分量：有向非强连通图中的极大强连通子图</p>
<h2 id="两种求法"><a href="#两种求法" class="headerlink" title="两种求法"></a>两种求法</h2><h3 id="Kosaraju算法"><a href="#Kosaraju算法" class="headerlink" title="Kosaraju算法"></a>Kosaraju算法</h3><h4 id="算法原理"><a href="#算法原理" class="headerlink" title="算法原理"></a>算法原理</h4><p>根据定义，对于一个结点 $A$，我们搜索 $A$ 能到达的所有结点；我们再搜索能达到 $A$ 的所有结点。二者的交集显然是包含 $A$ 的强连通分量。</p>
<h4 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h4><ul>
<li>如何搜索到达 $A$ 的结点？</li>
</ul>
<p>反向建边。</p>
<ul>
<li>如何优化？</li>
</ul>
<p>我们希望一次搜索就能找到所有强连通分量。考虑在第一次搜索中，在某个结点其中一个儿子子树中的结点不可能与原结点另一个儿子子树中的结点构成强连通分量。因此我们在第二次搜索中要杜绝这种情况的出现。</p>
<p>在第一次搜索中，我们存下每个结点<strong>结束</strong>访问的时间戳。第二次搜索时，按照第一次搜索的时间戳<strong>倒序</strong>搜索，这样可以保证从 $A$ 搜到的都在包含 $A$ 的强连通分量中。</p>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs1</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">	fl[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(fl[v])<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs1</span>(v);</span><br><span class="line">	&#125;</span><br><span class="line">	xu[++cmt]=u;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs2</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> f)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">find</span>(u)!=<span class="built_in">find</span>(f))&#123;</span><br><span class="line">		sz[<span class="built_in">find</span>(f)]+=sz[<span class="built_in">find</span>(u)];</span><br><span class="line">		fa[<span class="built_in">find</span>(u)]=<span class="built_in">find</span>(f);</span><br><span class="line">	&#125;</span><br><span class="line">	fl[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lstf[u];i;i=fe[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=fe[i].t;</span><br><span class="line">		<span class="keyword">if</span>(fl[v])<span class="keyword">continue</span>;</span><br><span class="line">		<span class="built_in">dfs2</span>(v,f);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">kosaraju</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fl[i])<span class="built_in">dfs1</span>(i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">memset</span>(fl,<span class="number">0</span>,<span class="built_in">sizeof</span>(fl));</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=n;i&gt;=<span class="number">1</span>;i--)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fl[xu[i]])<span class="built_in">dfs2</span>(xu[i],xu[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h4><p>由于进行了两次DFS，所以总复杂度为 $O(2\times E)$。</p>
<h3 id="Tarjan算法"><a href="#Tarjan算法" class="headerlink" title="Tarjan算法"></a>Tarjan算法</h3><h4 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h4><p>回边：连向栈中的边（栈呢？等一下嘛）</p>
<p>时间戳：搜索到某一结点的序</p>
<p>最老祖先：某一结点及其子树中，能到达的最远的祖先。</p>
<h4 id="算法原理-1"><a href="#算法原理-1" class="headerlink" title="算法原理"></a>算法原理</h4><p>搜索，对于每个结点，先入栈，然后递归更新所有儿子结点。枚举该点的所有出边，如果连向儿子结点，用儿子结点的最老祖先更新该结点的最老祖先；如果出边是回边，直接更新最老祖先。更新结束后，如果该点的最老祖先不是自己，说明该点处在某一强连通分量中，返回，<strong>不出栈</strong>。如果是自己，则退栈直到自己，退出的这部分结点属于一个强连通分量。</p>
<h4 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> fa)</span></span>&#123;</span><br><span class="line">	dfn[u]=low[u]=++tim;</span><br><span class="line">	stk[++top]=u;</span><br><span class="line">	fl[u]=zh[u]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=lst[u];i;i=e[i].lst)&#123;</span><br><span class="line">		<span class="type">int</span> v=e[i].t;</span><br><span class="line">		<span class="keyword">if</span>(!fl[v])&#123;</span><br><span class="line">			<span class="built_in">dfs</span>(v,u);</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],low[v]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(zh[v])&#123;</span><br><span class="line">			low[u]=<span class="built_in">min</span>(low[u],dfn[v]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(low[u]!=dfn[u])&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	tot++;</span><br><span class="line">	<span class="keyword">while</span>(stk[top]!=u)&#123;</span><br><span class="line">		zh[stk[top]]=<span class="number">0</span>; </span><br><span class="line">		qfl[tot].<span class="built_in">push_back</span>(stk[top]);</span><br><span class="line">		top--;</span><br><span class="line">	&#125;</span><br><span class="line">	qfl[tot].<span class="built_in">push_back</span>(stk[top]);</span><br><span class="line">	zh[stk[top]]=<span class="number">0</span>;</span><br><span class="line">	top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">tarj</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fl[i])<span class="built_in">dfs</span>(i,<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="复杂度-1"><a href="#复杂度-1" class="headerlink" title="复杂度"></a>复杂度</h4><p>由于只进行一次DFS，甚至不需要存反边。所以总的复杂度是 $O(E)$。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>原根  学习笔记</title>
    <url>/2024/08/06/primitive-root/</url>
    <content><![CDATA[<h3 id="若干定义"><a href="#若干定义" class="headerlink" title="若干定义"></a>若干定义</h3><ul>
<li><p>阶：$a$ 在模 $p$ 意义下的阶是最小的正整数 $k$ 使得 $a^k \equiv 1 \pmod{p}$</p>
</li>
<li><p>原根：正整数 $g$ 是正整数 $n$ 的原根，当且仅当 $1\le g\le n-1$ 且 $g$ 模 $n$ 的阶为 $\varphi(n)$。</p>
</li>
</ul>
<h3 id="一些性质"><a href="#一些性质" class="headerlink" title="一些性质"></a>一些性质</h3><ul>
<li><p>有原根的数：$2,4,p^k,2p^k$ 其中 $p$ 是质数。</p>
</li>
<li><p>若 $g$ 是 $n$ 的原根，且 $\gcd(x,\varphi(n))&#x3D;1$，则 $g^x\bmod n$ 也是原根。</p>
</li>
</ul>
<p>更多有关阶的性质及证明，参见<a href="https://www.luogu.com.cn/blog/11DBeyonder/solution-p6091">这里</a>。</p>
<h3 id="原根的求法"><a href="#原根的求法" class="headerlink" title="原根的求法"></a>原根的求法</h3><p>由上面的第二条性质，我们只需要找出最小的原根，然后就能找出所有的原根。怎么找最小的？根据某些定理，最小的原根是小于 $n^{0.25}$ 的。因此我们可以暴力枚举，然后进行判断。</p>
<p>按照定义去判断会超时，但是我们注意到，关于阶有这么一条性质：如果 $\gcd(x,n)&#x3D;1$，且 $a^k \equiv 1 \pmod{n}$，那么 $k$ 能整除 $\varphi(n)$ 。因此我们只需要找到 $\varphi(n)$ 的所有质因数，并检验 $\frac{\varphi(n)}{p_i}$ 即可。</p>
<h3 id="主要的函数"><a href="#主要的函数" class="headerlink" title="主要的函数"></a>主要的函数</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;<span class="comment">//预处理欧拉函数与有原根的数</span></span><br><span class="line">	phi[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=<span class="number">1000000</span>;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!fl[i])&#123;</span><br><span class="line">			zh[++top]=i;</span><br><span class="line">			phi[i]=i<span class="number">-1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=top&amp;&amp;i*zh[j]&lt;=<span class="number">1000000</span>;j++)&#123;</span><br><span class="line">			fl[i*zh[j]]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(i%zh[j]==<span class="number">0</span>)&#123;</span><br><span class="line">				phi[i*zh[j]]=phi[i]*zh[j];</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			phi[i*zh[j]]=phi[i]*(zh[j]<span class="number">-1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	rt[<span class="number">2</span>]=rt[<span class="number">4</span>]=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=top;i++)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=zh[i];j&lt;=<span class="number">1000000</span>;j*=zh[i])&#123;</span><br><span class="line">			rt[j]=<span class="number">1</span>;</span><br><span class="line">			<span class="keyword">if</span>(j&lt;=<span class="number">500000</span>)rt[j*<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">divi</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//对phi(n)分解质因数</span></span><br><span class="line">	hd=num=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=top;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(x%zh[i])<span class="keyword">continue</span>;</span><br><span class="line">		ys[++hd]=zh[i];</span><br><span class="line">		<span class="keyword">while</span>(x%zh[i]==<span class="number">0</span>)x/=zh[i];</span><br><span class="line">		<span class="keyword">if</span>(x==<span class="number">1</span>)<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">chk</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> n)</span></span>&#123;<span class="comment">//判断是否是原根</span></span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">qp</span>(u,phi[n],n)!=<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=hd;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">qp</span>(u,phi[n]/ys[i],n)==<span class="number">1</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find_m</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;<span class="comment">//找到最小的原根</span></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;x;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">chk</span>(i,x))<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="built_in">init</span>();</span><br><span class="line">	cin&gt;&gt;t;</span><br><span class="line">	<span class="keyword">while</span>(t--)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;n,&amp;d);</span><br><span class="line">		<span class="keyword">if</span>(!rt[n])&#123;</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;0&quot;</span>);</span><br><span class="line">			<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">divi</span>(phi[n]);</span><br><span class="line">		<span class="type">int</span> minm=<span class="built_in">find_m</span>(n);</span><br><span class="line">		<span class="type">int</span> now=<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=phi[n];i++)&#123;</span><br><span class="line">			now=now*minm%n;</span><br><span class="line">			<span class="keyword">if</span>(<span class="built_in">gcd</span>(i,phi[n])==<span class="number">1</span>)ans[++num]=now;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,num);</span><br><span class="line">		<span class="built_in">sort</span>(ans+<span class="number">1</span>,ans+num+<span class="number">1</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=d;i&lt;=num;i+=d)<span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>,ans[i]);</span><br><span class="line">		<span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>slope trick 小记</title>
    <url>/2024/08/06/slope_trick/</url>
    <content><![CDATA[<p>学习的过程比较艰辛，搞了半天才搞明白，所以记录一下。</p>
<h3 id="适用范围"><a href="#适用范围" class="headerlink" title="适用范围"></a>适用范围</h3><p>优化形如 $f_{i,j}&#x3D;|x_i-j|+\min f_{i-1,k}$ 的 DP 转移。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>由于绝对值函数是连续，下凸的一次函数，因此几个绝对值函数相加仍然满足这一特点，即归纳证明将 DP 式子的第二维当做横坐标后，每个 $f_i$ 的图像也满足这一特点。我们考虑存储每次斜率 $+1$ 的横坐标，从而快速转移 DP。</p>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>首先尝试列出朴素的 $n^2$ DP式子，如最开始的例子。然后考虑 $k$ 的取值范围。假设每次转移中 $k$ 的取值范围是 $[l_i,r_i]$，则整个函数有以下变化：</p>
<ul>
<li><p>最低点右边的部分全部向右平移 $r_i-l_i$，最低点的范围增加 $r_i-l_i$。</p>
</li>
<li><p>在 $x_i$ 这个点，斜率增加了 $2$，即维护的点集需要增加两个 $x_i$。</p>
</li>
<li><p>若当前 $x_i$ 在最低点左边，则左边下降的部分的最后一段变成上升的，反之亦然。</p>
</li>
</ul>
<p>由这 $3$ 条关键信息，我们可以用堆来维护点集。比较好的例子是 <a href="https://www.luogu.com.cn/problem/CF1534G">CF1534G</a>，感觉是整个过程最完整的一道题。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>字符串相关  学习笔记</title>
    <url>/2024/08/06/strings/</url>
    <content><![CDATA[<h2 id="哈希和哈希表"><a href="#哈希和哈希表" class="headerlink" title="哈希和哈希表"></a>哈希和哈希表</h2><p>令 $b$ 为选取的基数（229或233等），则字符串匹配时子串 $C’&#x3D;c_{k+1}c_{k+2}\dots c_{k_n}$ 的哈希值为<br>$$ H(C’)&#x3D;H(C,k+n)-H(C,k)\times b^n $$</p>
<h4 id="哈希的相关运用"><a href="#哈希的相关运用" class="headerlink" title="哈希的相关运用"></a>哈希的相关运用</h4><ul>
<li>哈希字符串匹配</li>
</ul>
<p>转化成上面的板子就好做了。</p>
<ul>
<li>哈希找回文串</li>
</ul>
<p>正着存一组哈希值，再倒着存一组哈希值。枚举回文串的对称中心，二分回文长度（的一半），利用哈希判等。可以在 $O(n\log n)$ 的复杂度内找最长的回文串、回文串的数量。</p>
<p>例题：<a href="https://www.luogu.com.cn/problem/P3501">P3501</a></p>
<h2 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h2><p>运用两个指针 $i,j$ 表示以 $A[i]$ 结尾长度为 $j$ 的字符串正好与 $B$ 串的前 $j$ 个字符匹配。若下一个字符匹配，则挪动指针；否则将 $j$ 挪动到 $fail[j]$ 处。 $fail[j]$ 为失配数组，表示在 $B$ 串的 $j$ 处失配时， $j$ 应该往前跳到的位置。</p>
<p>首先对 $B$ 串预处理，得到 $fail$ 数组，预处理过程可视为 $B$ 串自己和自己匹配的过程。</p>
<p>该算法复杂度为线性的。</p>
<h4 id="KMP的相关运用"><a href="#KMP的相关运用" class="headerlink" title="KMP的相关运用"></a>KMP的相关运用</h4><ul>
<li>KMP求公共前后缀</li>
</ul>
<p>在KMP中，若一个串长度为 $n$ ，则 $fail[n]$ 就是该串公共前后缀的长度。</p>
<ul>
<li>KMP求最大（最小）周期</li>
</ul>
<p>如果一个长度为 $n$ 的串有长度为 $j$ 的公共前后缀，则该串必有长度为 $n-j$ 的周期。</p>
<p>由此，在KMP中，若一个串长度为 $n$ ，则 $fail[n]$ 是最长公共前后缀，则 $n-fail[n]$ 是该串的最小周期；在 $j&gt;0$ 时找 $fail[j]$ ，最小的非0的 $j’$ 是最短公共前后缀，则 $n-j’$ 是该串的最大周期。</p>
<h2 id="扩展KMP"><a href="#扩展KMP" class="headerlink" title="扩展KMP"></a>扩展KMP</h2><p>求解的问题：求出一个字符串的每个后缀与一个字符串（可以是自己）的最长公共前缀。</p>
<p>先暴力求得 $Z_1$ 的值，然后向后枚举。像后文的 manacher 一样维护 $pos,maxr$，并判断 $Z_{i-pos}$ 能否扩展到 $maxr$ 右边，如果不能就直接更新 $Z_i$，否则暴力更新。</p>
<h2 id="失配树"><a href="#失配树" class="headerlink" title="失配树"></a>失配树</h2><p>求解的问题：求出一个字符串的两个前缀的最长公共前后缀。</p>
<p>先跑KMP，容易发现，一个字符串的最长公共前后缀就是 $fail[n]$。同时 $fail[fail[n]]…$ 等都是他的最长公共前后缀。那么我们容易知道，两个字符串的公共前后缀构成树形。于是我们将 $(fail[i],i)$ 连边，会得到一棵树，这就是失配树。上面那个问题可以在失配树上求LCA解决。</p>
<h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><p>若有一个主串需要与多个模式串匹配，需要用的AC自动机。考虑将多个模式串建立字典树，再在字典树上建立 $fail$ 数组，即可完成匹配。</p>
<p>具体实现：先建立字典树，注意<strong>下标从1开始</strong>。然后将0号结点的所有边全部连向1号结点。从1开始进行广搜，对于每个结点 $u$，枚举所有出边，若不存在，则直接将出边连向 $fail[u]$ 的出边；否则将儿子入队，找到 $fail[u]$ 能跳到的有和该儿子相同的结点，更新 $fail[v]$。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)tr[<span class="number">0</span>][i]=<span class="number">1</span>;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	fail[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">		<span class="type">int</span> u=q.<span class="built_in">front</span>();</span><br><span class="line">		q.<span class="built_in">pop</span>();</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">26</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(!tr[u][i])tr[u][i]=tr[fail[u]][i];</span><br><span class="line">			<span class="keyword">else</span>&#123;</span><br><span class="line">				q.<span class="built_in">push</span>(tr[u][i]);</span><br><span class="line">				<span class="type">int</span> v=fail[u];</span><br><span class="line">				<span class="keyword">while</span>(v&gt;<span class="number">1</span>&amp;&amp;!tr[v][i])v=fail[v];</span><br><span class="line">				fail[tr[u][i]]=tr[v][i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="AC自动机相关题目处理技巧"><a href="#AC自动机相关题目处理技巧" class="headerlink" title="AC自动机相关题目处理技巧"></a>AC自动机相关题目处理技巧</h4><p>可以先考虑只有一个模式串的情况，先按KMP的做法写，思路厘清后再甩到字典树上。</p>
<h2 id="最小表示法"><a href="#最小表示法" class="headerlink" title="最小表示法"></a>最小表示法</h2><p>参考<a href="https://blog.csdn.net/zhaoxinxin1234/article/details/89971780">这个</a>。思路和代码都比较简单。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">solve</span><span class="params">()</span></span>&#123;<span class="comment">//返回最小表示的初始位置</span></span><br><span class="line">	<span class="type">int</span> i=<span class="number">1</span>,j=<span class="number">2</span>,k=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(i&lt;=n&amp;&amp;j&lt;=n&amp;&amp;k&lt;n)&#123;</span><br><span class="line">		<span class="keyword">if</span>(num[i+k]==num[j+k])&#123;</span><br><span class="line">			k++;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(num[i+k]&gt;num[j+k])i=i+k+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span> j=j+k+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(i==j)j++;</span><br><span class="line">		k=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">min</span>(i,j);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="manacher算法"><a href="#manacher算法" class="headerlink" title="manacher算法"></a>manacher算法</h2><p>先在两个字符间插入一个特殊字符，然后执行以下步骤：</p>
<p>1.如果 $i&lt;maxr_i$，按对称方法更新 $p_i$。</p>
<p>2.暴力拓展 $p_i$。</p>
<p>3.更新 $maxr$ 和 $pos$。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>splay  学习笔记</title>
    <url>/2024/08/06/splay/</url>
    <content><![CDATA[<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="排序二叉树"><a href="#排序二叉树" class="headerlink" title="排序二叉树"></a>排序二叉树</h3><p>简单的说，就是每个结点的左子树中的每个数都小于该节点，且右子树中的每个数都大于该节点。</p>
<h2 id="重点问题"><a href="#重点问题" class="headerlink" title="重点问题"></a>重点问题</h2><p>对于普通的排序二叉树，很容易通过特殊数据卡你。那就需要通过<strong>旋转</strong>将出题人精心设计的数据打乱。</p>
<h2 id="旋转操作"><a href="#旋转操作" class="headerlink" title="旋转操作"></a>旋转操作</h2><p>若 $u$ 是 $v$ 的左儿子，且要将 $u$ 旋转到 $v$ 处：</p>
<p>先断开 $u$ 和 $v$ 以及 $u$ 和他的右儿子，然后交换处理 $u$ 和 $v$ ，最后把儿子接回去。</p>
<p>若 $u$ 是 $v$ 的右儿子同理。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void ziag(int x)&#123;</span><br><span class="line">	if(!fa<span class="comment">[x]</span>||!x)return;</span><br><span class="line">	int f=fa<span class="comment">[x]</span>;</span><br><span class="line">	int sson=son<span class="comment">[f]</span><span class="comment">[1]</span>==x,sonn=son<span class="comment">[fa<span class="comment">[f]</span>]</span><span class="comment">[1]</span>==f;</span><br><span class="line">	fa<span class="comment">[x]</span>=fa<span class="comment">[f]</span>;</span><br><span class="line">	son<span class="comment">[f]</span><span class="comment">[sson]</span>=son<span class="comment">[x]</span><span class="comment">[sson^1]</span>;</span><br><span class="line">	if(son<span class="comment">[x]</span><span class="comment">[sson^1]</span>)fa<span class="comment">[son<span class="comment">[x]</span><span class="comment">[sson^1]</span>]</span>=f;</span><br><span class="line">	son<span class="comment">[x]</span><span class="comment">[sson^1]</span>=f;</span><br><span class="line">	son<span class="comment">[fa<span class="comment">[f]</span>]</span><span class="comment">[sonn]</span>=x;</span><br><span class="line">	fa<span class="comment">[f]</span>=x;</span><br><span class="line">	pull_up(x);</span><br><span class="line">	pull_up(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>但是，如果全部按一个方向旋转，则常数较大，达不到优化效果。</p>
<h2 id="伸展操作"><a href="#伸展操作" class="headerlink" title="伸展操作"></a>伸展操作</h2><p>如果儿子与父亲在一侧，且要把儿子旋转到根节点，则应该先将父亲转到根节点，再将儿子与父亲旋转。否则连续两次旋转儿子。</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">splay</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> ed)</span></span>&#123;<span class="comment">//表示将x旋转成为ed的儿子</span></span><br><span class="line">	<span class="keyword">while</span>(fa[x]!=ed)&#123;</span><br><span class="line">		<span class="type">int</span> f=fa[x],ff=fa[f];</span><br><span class="line">		<span class="keyword">if</span>(ff==ed)<span class="built_in">ziag</span>(x);</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>((son[ff][<span class="number">1</span>]==f)==(son[f][<span class="number">1</span>]==x))<span class="built_in">ziag</span>(f),<span class="built_in">ziag</span>(x); </span><br><span class="line">		<span class="keyword">else</span> <span class="built_in">ziag</span>(x),<span class="built_in">ziag</span>(x);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(ed==<span class="number">0</span>)root=x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h2><p>如果当前树为空，则新建结点并更新树根；如果当前树非空，则递归找到应更新的位置，并新建结点或直接更新结点。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void insert(int x,int f)&#123;</span><br><span class="line">	if(!root)&#123;</span><br><span class="line">		root=++cnt;</span><br><span class="line">		val<span class="comment">[cnt]</span>=x;</span><br><span class="line">		num<span class="comment">[cnt]</span>=sz<span class="comment">[cnt]</span>=1;</span><br><span class="line">		return ;</span><br><span class="line">	&#125;</span><br><span class="line">	if(x==val<span class="comment">[f]</span>)&#123;</span><br><span class="line">		sz<span class="comment">[f]</span>++,num<span class="comment">[f]</span>++;</span><br><span class="line">		splay(f,0);</span><br><span class="line">		return;</span><br><span class="line">	&#125;</span><br><span class="line">	if(x&lt;val<span class="comment">[f]</span>)&#123;</span><br><span class="line">		if(!son<span class="comment">[f]</span><span class="comment">[0]</span>)&#123;</span><br><span class="line">			son<span class="comment">[f]</span><span class="comment">[0]</span>=++cnt;</span><br><span class="line">			fa<span class="comment">[cnt]</span>=f;</span><br><span class="line">			val<span class="comment">[cnt]</span>=x;</span><br><span class="line">			num<span class="comment">[cnt]</span>=sz<span class="comment">[cnt]</span>=1;</span><br><span class="line">			splay(cnt,0);</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		insert(x,son<span class="comment">[f]</span><span class="comment">[0]</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	else&#123;</span><br><span class="line">		if(!son<span class="comment">[f]</span><span class="comment">[1]</span>)&#123;</span><br><span class="line">			son<span class="comment">[f]</span><span class="comment">[1]</span>=++cnt;</span><br><span class="line">			fa<span class="comment">[cnt]</span>=f;</span><br><span class="line">			val<span class="comment">[cnt]</span>=x;</span><br><span class="line">			num<span class="comment">[cnt]</span>=sz<span class="comment">[cnt]</span>=1;</span><br><span class="line">			splay(cnt,0);</span><br><span class="line">			return;</span><br><span class="line">		&#125;</span><br><span class="line">		insert(x,son<span class="comment">[f]</span><span class="comment">[1]</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h2><p>首先插入要查询的数，然后递归查找，如果发现当前节点就是答案，需要将当前节点转动成根节点的儿子，最后删除查询的数。注意分清：查询排名&#x2F;位置，前驱&#x2F;后继。</p>
<ul>
<li><p>查排名为 $x$ 的数：如果左子树大于 $x$ ，在左子树中找；然后考虑当前结点；最后考虑右子树。</p>
</li>
<li><p>查 $x$ 数的排名：先找到当前的数，再累计算答案。注意答案要随着递归更新。</p>
</li>
<li><p>查前驱：先转到根，再找左子树中最大的。</p>
</li>
<li><p>查后继：先转到根，再找右子树中最小的。</p>
</li>
</ul>
<h2 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h2><p>首先递归找到要删除的结点，然后将其转到叶子，最后直接砍断该节点与父节点的联系。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void dele(int x,int now)&#123;</span><br><span class="line">	if (val<span class="comment">[now]</span> == x) &#123;</span><br><span class="line">        while (son<span class="comment">[now]</span><span class="comment">[0]</span> || son<span class="comment">[now]</span><span class="comment">[1]</span>) &#123;</span><br><span class="line">            if (son<span class="comment">[now]</span><span class="comment">[0]</span>) &#123;</span><br><span class="line">				if(now==root)root=son<span class="comment">[now]</span><span class="comment">[0]</span>;</span><br><span class="line">                ziag(son<span class="comment">[now]</span><span class="comment">[0]</span>);            </span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">			if(now==root)root=son<span class="comment">[now]</span><span class="comment">[1]</span>;</span><br><span class="line">            ziag(son<span class="comment">[now]</span><span class="comment">[1]</span>);        </span><br><span class="line">        &#125;</span><br><span class="line">        sz<span class="comment">[now]</span>--, num<span class="comment">[now]</span>--;</span><br><span class="line">        if (num<span class="comment">[now]</span>) &#123;</span><br><span class="line">            pull_up(now);</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int sson = son<span class="comment">[fa<span class="comment">[now]</span>]</span><span class="comment">[1]</span> == now;          </span><br><span class="line">        pull_up(now);</span><br><span class="line">		son<span class="comment">[fa<span class="comment">[now]</span>]</span><span class="comment">[sson]</span> = 0; </span><br><span class="line">		fa<span class="comment">[now]</span> = 0;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">	if(val<span class="comment">[now]</span>&lt;x)dele(x,son<span class="comment">[now]</span><span class="comment">[1]</span>);</span><br><span class="line">	else dele(x,son<span class="comment">[now]</span><span class="comment">[0]</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间翻转操作"><a href="#区间翻转操作" class="headerlink" title="区间翻转操作"></a>区间翻转操作</h2><p>假设我们要翻转区间 $[l,r]$，那我们先把 $l-1$ 转到树根，再把 $r+1$ 转成树根的右儿子，则我们要翻转的区间是此时 $r+1$ 的左子树。类似线段树的方式采用懒标记，注意在以下地方需要更新：</p>
<ul>
<li><p>每一个旋转操作（先更新父亲，再更新儿子）</p>
</li>
<li><p>每一个查询操作</p>
</li>
</ul>
<p>注意上述的 $l$ 和 $r$ 是位置，<strong>相当于排名</strong>，所有还要记得查找真正的值。</p>
<figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">void push_down(int x)&#123;</span><br><span class="line">	if(!x||!lazy<span class="comment">[x]</span>)return;</span><br><span class="line">	lazy<span class="comment">[x]</span>=0;</span><br><span class="line">	swap(son<span class="comment">[x]</span><span class="comment">[0]</span>,son<span class="comment">[x]</span><span class="comment">[1]</span>);</span><br><span class="line">	if(son<span class="comment">[x]</span><span class="comment">[0]</span>)lazy<span class="comment">[son<span class="comment">[x]</span><span class="comment">[0]</span>]</span>^=1;</span><br><span class="line">	if(son<span class="comment">[x]</span><span class="comment">[1]</span>)lazy<span class="comment">[son<span class="comment">[x]</span><span class="comment">[1]</span>]</span>^=1;</span><br><span class="line">&#125;</span><br><span class="line">void modify(int l,int r)&#123;//这个函数不完整哟</span><br><span class="line">	splay(l,0);</span><br><span class="line">	splay(r,root);</span><br><span class="line">	lazy<span class="comment">[son<span class="comment">[son<span class="comment">[root]</span><span class="comment">[1]</span>]</span><span class="comment">[0]</span>]</span>^=1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="玄学优化"><a href="#玄学优化" class="headerlink" title="玄学优化"></a><del>玄学</del>优化</h2><p>由于这玩意常数比较大而且不太稳定，考虑随机优化：每个插入、查询操作后随机选取一个数旋转到根。这样大概能跑得快那么一点点（其实快不少）。</p>
]]></content>
      <tags>
        <tag>知识点</tag>
      </tags>
  </entry>
</search>
